### YamlMime:ManagedReference
items:
- uid: FastEndpoints.ICommandHandler`2
  commentId: T:FastEndpoints.ICommandHandler`2
  id: ICommandHandler`2
  parent: FastEndpoints
  children:
  - FastEndpoints.ICommandHandler`2.ExecuteAsync(`0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ICommandHandler<TCommand, TResult>
  nameWithType: ICommandHandler<TCommand, TResult>
  fullName: FastEndpoints.ICommandHandler<TCommand, TResult>
  type: Interface
  source:
    id: ICommandHandler
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Messaging.Core\Interfaces\ICommandHandler.cs
    startLine: 28
  assemblies:
  - FastEndpoints.Messaging.Core
  namespace: FastEndpoints
  summary: "\ninterface to be implemented by a command handler for a given command type that returns a result\n"
  example: []
  syntax:
    content: 'public interface ICommandHandler<in TCommand, TResult> : ICommandHandler where TCommand : ICommand<TResult>'
    typeParameters:
    - id: TCommand
      description: the type of the input command
    - id: TResult
      description: the type of the result returned
    content.vb: >-
      Public Interface ICommandHandler(Of In TCommand As ICommand(Of TResult), TResult)

          Inherits ICommandHandler
  extensionMethods:
  - FastEndpoints.ICommandHandler`2.FastEndpoints.CommandExtensions.RegisterForTesting``2
  nameWithType.vb: ICommandHandler(Of TCommand, TResult)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: FastEndpoints.ICommandHandler(Of TCommand, TResult)
  name.vb: ICommandHandler(Of TCommand, TResult)
- uid: FastEndpoints.ICommandHandler`2.ExecuteAsync(`0,System.Threading.CancellationToken)
  commentId: M:FastEndpoints.ICommandHandler`2.ExecuteAsync(`0,System.Threading.CancellationToken)
  id: ExecuteAsync(`0,System.Threading.CancellationToken)
  parent: FastEndpoints.ICommandHandler`2
  langs:
  - csharp
  - vb
  name: ExecuteAsync(TCommand, CancellationToken)
  nameWithType: ICommandHandler<TCommand, TResult>.ExecuteAsync(TCommand, CancellationToken)
  fullName: FastEndpoints.ICommandHandler<TCommand, TResult>.ExecuteAsync(TCommand, System.Threading.CancellationToken)
  type: Method
  source:
    id: ExecuteAsync
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Messaging.Core\Interfaces\ICommandHandler.cs
    startLine: 35
  assemblies:
  - FastEndpoints.Messaging.Core
  namespace: FastEndpoints
  summary: "\nreceives a command and returns a result.\n"
  example: []
  syntax:
    content: Task<TResult> ExecuteAsync(TCommand command, CancellationToken ct)
    parameters:
    - id: command
      type: '{TCommand}'
      description: the input command object
    - id: ct
      type: System.Threading.CancellationToken
      description: optional cancellation token
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Function ExecuteAsync(command As TCommand, ct As CancellationToken) As Task(Of TResult)
  overload: FastEndpoints.ICommandHandler`2.ExecuteAsync*
  nameWithType.vb: ICommandHandler(Of TCommand, TResult).ExecuteAsync(TCommand, CancellationToken)
  fullName.vb: FastEndpoints.ICommandHandler(Of TCommand, TResult).ExecuteAsync(TCommand, System.Threading.CancellationToken)
references:
- uid: FastEndpoints
  commentId: N:FastEndpoints
  name: FastEndpoints
  nameWithType: FastEndpoints
  fullName: FastEndpoints
- uid: FastEndpoints.ICommandHandler`2.FastEndpoints.CommandExtensions.RegisterForTesting``2
  commentId: M:FastEndpoints.CommandExtensions.RegisterForTesting``2(FastEndpoints.ICommandHandler{``0,``1})
  parent: FastEndpoints.CommandExtensions
  definition: FastEndpoints.CommandExtensions.RegisterForTesting``2(FastEndpoints.ICommandHandler{``0,``1})
  name: RegisterForTesting<TCommand, TResult>()
  nameWithType: CommandExtensions.RegisterForTesting<TCommand, TResult>()
  fullName: FastEndpoints.CommandExtensions.RegisterForTesting<TCommand, TResult>()
  nameWithType.vb: CommandExtensions.RegisterForTesting(Of TCommand, TResult)()
  fullName.vb: FastEndpoints.CommandExtensions.RegisterForTesting(Of TCommand, TResult)()
  name.vb: RegisterForTesting(Of TCommand, TResult)()
  spec.csharp:
  - uid: FastEndpoints.CommandExtensions.RegisterForTesting``2
    name: RegisterForTesting<TCommand, TResult>
    nameWithType: CommandExtensions.RegisterForTesting<TCommand, TResult>
    fullName: FastEndpoints.CommandExtensions.RegisterForTesting<TCommand, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FastEndpoints.CommandExtensions.RegisterForTesting``2
    name: RegisterForTesting(Of TCommand, TResult)
    nameWithType: CommandExtensions.RegisterForTesting(Of TCommand, TResult)
    fullName: FastEndpoints.CommandExtensions.RegisterForTesting(Of TCommand, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints.CommandExtensions.RegisterForTesting``2(FastEndpoints.ICommandHandler{``0,``1})
  commentId: M:FastEndpoints.CommandExtensions.RegisterForTesting``2(FastEndpoints.ICommandHandler{``0,``1})
  name: RegisterForTesting<TCommand, TResult>(ICommandHandler<TCommand, TResult>)
  nameWithType: CommandExtensions.RegisterForTesting<TCommand, TResult>(ICommandHandler<TCommand, TResult>)
  fullName: FastEndpoints.CommandExtensions.RegisterForTesting<TCommand, TResult>(FastEndpoints.ICommandHandler<TCommand, TResult>)
  nameWithType.vb: CommandExtensions.RegisterForTesting(Of TCommand, TResult)(ICommandHandler(Of TCommand, TResult))
  fullName.vb: FastEndpoints.CommandExtensions.RegisterForTesting(Of TCommand, TResult)(FastEndpoints.ICommandHandler(Of TCommand, TResult))
  name.vb: RegisterForTesting(Of TCommand, TResult)(ICommandHandler(Of TCommand, TResult))
  spec.csharp:
  - uid: FastEndpoints.CommandExtensions.RegisterForTesting``2(FastEndpoints.ICommandHandler{``0,``1})
    name: RegisterForTesting<TCommand, TResult>
    nameWithType: CommandExtensions.RegisterForTesting<TCommand, TResult>
    fullName: FastEndpoints.CommandExtensions.RegisterForTesting<TCommand, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: FastEndpoints.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: FastEndpoints.ICommandHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FastEndpoints.CommandExtensions.RegisterForTesting``2(FastEndpoints.ICommandHandler{``0,``1})
    name: RegisterForTesting(Of TCommand, TResult)
    nameWithType: CommandExtensions.RegisterForTesting(Of TCommand, TResult)
    fullName: FastEndpoints.CommandExtensions.RegisterForTesting(Of TCommand, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: FastEndpoints.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: FastEndpoints.ICommandHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints.CommandExtensions
  commentId: T:FastEndpoints.CommandExtensions
  parent: FastEndpoints
  name: CommandExtensions
  nameWithType: CommandExtensions
  fullName: FastEndpoints.CommandExtensions
- uid: FastEndpoints.ICommandHandler`2.ExecuteAsync*
  commentId: Overload:FastEndpoints.ICommandHandler`2.ExecuteAsync
  name: ExecuteAsync
  nameWithType: ICommandHandler<TCommand, TResult>.ExecuteAsync
  fullName: FastEndpoints.ICommandHandler<TCommand, TResult>.ExecuteAsync
  nameWithType.vb: ICommandHandler(Of TCommand, TResult).ExecuteAsync
  fullName.vb: FastEndpoints.ICommandHandler(Of TCommand, TResult).ExecuteAsync
- uid: '{TCommand}'
  commentId: '!:TCommand'
  definition: TCommand
  name: TCommand
  nameWithType: TCommand
  fullName: TCommand
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{`1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TCommand
  name: TCommand
  nameWithType: TCommand
  fullName: TCommand
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
