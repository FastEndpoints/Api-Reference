### YamlMime:ManagedReference
items:
- uid: FastEndpoints.BindingOptions
  commentId: T:FastEndpoints.BindingOptions
  id: BindingOptions
  parent: FastEndpoints
  children:
  - FastEndpoints.BindingOptions.FailureMessage
  - FastEndpoints.BindingOptions.JsonExceptionTransformer
  - FastEndpoints.BindingOptions.Modifier
  - FastEndpoints.BindingOptions.ValueParserFor(System.Type,System.Func{System.Object,FastEndpoints.ParseResult})
  - FastEndpoints.BindingOptions.ValueParserFor``1(System.Func{System.Object,FastEndpoints.ParseResult})
  langs:
  - csharp
  - vb
  name: BindingOptions
  nameWithType: BindingOptions
  fullName: FastEndpoints.BindingOptions
  type: Class
  source:
    id: BindingOptions
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Config\BindingOptions.cs
    startLine: 10
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nrequest binding options\n"
  example: []
  syntax:
    content: public sealed class BindingOptions
    content.vb: Public NotInheritable Class BindingOptions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: FastEndpoints.BindingOptions.FailureMessage
  commentId: P:FastEndpoints.BindingOptions.FailureMessage
  id: FailureMessage
  parent: FastEndpoints.BindingOptions
  langs:
  - csharp
  - vb
  name: FailureMessage
  nameWithType: BindingOptions.FailureMessage
  fullName: FastEndpoints.BindingOptions.FailureMessage
  type: Property
  source:
    id: FailureMessage
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Config\BindingOptions.cs
    startLine: 21
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\na function used to construct the failure message when a supplied value cannot be succesfully bound to a dto property during model binding.\n<p>NOTE: this only applies to non-STJ operations. for customizing error messages of STJ binding failures, specify a <xref href=\"FastEndpoints.BindingOptions.JsonExceptionTransformer\" data-throw-if-not-resolved=\"false\"></xref> func.</p>\nthe following arguments are supplied to the function.\n<p><xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>: the type of the property which failed to bind</p>\n<p><xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>: the name of the property which failed to bind</p>\n<p><xref href=\"Microsoft.Extensions.Primitives.StringValues\" data-throw-if-not-resolved=\"false\"></xref>: the value that was attempted which resulted in the failure</p>\nuse these input parameters and construct your own error message string and return it from the function.\n"
  example: []
  syntax:
    content: public Func<Type, string, StringValues, string> FailureMessage { set; }
    parameters: []
    return:
      type: System.Func{System.Type,System.String,Microsoft.Extensions.Primitives.StringValues,System.String}
    content.vb: Public WriteOnly Property FailureMessage As Func(Of Type, String, StringValues, String)
  overload: FastEndpoints.BindingOptions.FailureMessage*
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
- uid: FastEndpoints.BindingOptions.JsonExceptionTransformer
  commentId: P:FastEndpoints.BindingOptions.JsonExceptionTransformer
  id: JsonExceptionTransformer
  parent: FastEndpoints.BindingOptions
  langs:
  - csharp
  - vb
  name: JsonExceptionTransformer
  nameWithType: BindingOptions.JsonExceptionTransformer
  fullName: FastEndpoints.BindingOptions.JsonExceptionTransformer
  type: Property
  source:
    id: JsonExceptionTransformer
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Config\BindingOptions.cs
    startLine: 30
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nby default, all STJ <xref href=\"System.Text.Json.JsonException\" data-throw-if-not-resolved=\"false\"></xref>s thrown during deserialization are automatically caught and transformed using this function. \nif you&apos;d like to disable this behavior, simply set this property to <code>null</code> or specify a function to construct a\n<xref href=\"FluentValidation.Results.ValidationFailure\" data-throw-if-not-resolved=\"false\"></xref> when STJ throws an exception due to invalid json input.\n<p>NOTE: this only applies to STJ based operations. for customizing error messages of non-STJ binding failures, specify a <xref href=\"FastEndpoints.BindingOptions.FailureMessage\" data-throw-if-not-resolved=\"false\"></xref> func.</p>\n"
  example: []
  syntax:
    content: public Func<JsonException, ValidationFailure> JsonExceptionTransformer { set; }
    parameters: []
    return:
      type: System.Func{System.Text.Json.JsonException,FluentValidation.Results.ValidationFailure}
    content.vb: Public WriteOnly Property JsonExceptionTransformer As Func(Of JsonException, ValidationFailure)
  overload: FastEndpoints.BindingOptions.JsonExceptionTransformer*
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
- uid: FastEndpoints.BindingOptions.Modifier
  commentId: P:FastEndpoints.BindingOptions.Modifier
  id: Modifier
  parent: FastEndpoints.BindingOptions
  langs:
  - csharp
  - vb
  name: Modifier
  nameWithType: BindingOptions.Modifier
  fullName: FastEndpoints.BindingOptions.Modifier
  type: Property
  source:
    id: Modifier
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Config\BindingOptions.cs
    startLine: 45
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nan optional action to be run after the endpoint level request binding has occured.\nit is intended as a way to perform common model binding logic that applies to all endpoints/requests.\nthe action is passed in the following arguments:\n<p><xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>: the request dto instance</p>\n<p><xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>: the type of the request dto</p>\n<p><xref href=\"FastEndpoints.BinderContext\" data-throw-if-not-resolved=\"false\"></xref>: the request binding context</p>\n<p><xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>: a cancellation token</p>\n<p>WARNING: be mindful of the performance cost of using reflection to modify the request dto object</p>\n"
  example: []
  syntax:
    content: public Action<object, Type, BinderContext, CancellationToken> Modifier { set; }
    parameters: []
    return:
      type: System.Action{System.Object,System.Type,FastEndpoints.BinderContext,System.Threading.CancellationToken}
    content.vb: Public WriteOnly Property Modifier As Action(Of Object, Type, BinderContext, CancellationToken)
  overload: FastEndpoints.BindingOptions.Modifier*
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
- uid: FastEndpoints.BindingOptions.ValueParserFor``1(System.Func{System.Object,FastEndpoints.ParseResult})
  commentId: M:FastEndpoints.BindingOptions.ValueParserFor``1(System.Func{System.Object,FastEndpoints.ParseResult})
  id: ValueParserFor``1(System.Func{System.Object,FastEndpoints.ParseResult})
  parent: FastEndpoints.BindingOptions
  langs:
  - csharp
  - vb
  name: ValueParserFor<T>(Func<Object, ParseResult>)
  nameWithType: BindingOptions.ValueParserFor<T>(Func<Object, ParseResult>)
  fullName: FastEndpoints.BindingOptions.ValueParserFor<T>(System.Func<System.Object, FastEndpoints.ParseResult>)
  type: Method
  source:
    id: ValueParserFor
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Config\BindingOptions.cs
    startLine: 72
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nadd a custom value parser function for any given type which the default model binder will use to parse values when model binding request dto properties from query/route/forms/headers/claims.\nthis is an alternative approach to adding a `TryParse()` function to your types that need model binding support from the abovementioned binding sources.\nonce you register a parser function here for a type, any `TryParse()` method on the type will not be used for parsing.\nalso, these parser functions do not apply to JSON deserialization done by STJ and can be considered the equivalent to registering a custom converter in STJ when it comes to query/route/forms/headers/claims binding sources.\n"
  example: []
  syntax:
    content: public bool ValueParserFor<T>(Func<object, ParseResult> parser)
    parameters:
    - id: parser
      type: System.Func{System.Object,FastEndpoints.ParseResult}
      description: >
        a function that takes in a nullable object and returns a <xref href="FastEndpoints.ParseResult" data-throw-if-not-resolved="false"></xref> as the output.

        <pre><code>app.UseFastEndpoints(c =>

        {
           c.Binding.ValueParserFor&lt;Guid>(MyParsers.GuidParser);
        });


        public static class MyParsers

        {
           public static ParseResult GuidParser(object? input)
           {
               Guid result;
               bool success = Guid.TryParse(input?.ToString(), out result);
               return new(success, result);
           }
        }</code></pre>
    typeParameters:
    - id: T
      description: the type of the class which this parser function will target
    return:
      type: System.Boolean
    content.vb: Public Function ValueParserFor(Of T)(parser As Func(Of Object, ParseResult)) As Boolean
  overload: FastEndpoints.BindingOptions.ValueParserFor*
  nameWithType.vb: BindingOptions.ValueParserFor(Of T)(Func(Of Object, ParseResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.BindingOptions.ValueParserFor(Of T)(System.Func(Of System.Object, FastEndpoints.ParseResult))
  name.vb: ValueParserFor(Of T)(Func(Of Object, ParseResult))
- uid: FastEndpoints.BindingOptions.ValueParserFor(System.Type,System.Func{System.Object,FastEndpoints.ParseResult})
  commentId: M:FastEndpoints.BindingOptions.ValueParserFor(System.Type,System.Func{System.Object,FastEndpoints.ParseResult})
  id: ValueParserFor(System.Type,System.Func{System.Object,FastEndpoints.ParseResult})
  parent: FastEndpoints.BindingOptions
  langs:
  - csharp
  - vb
  name: ValueParserFor(Type, Func<Object, ParseResult>)
  nameWithType: BindingOptions.ValueParserFor(Type, Func<Object, ParseResult>)
  fullName: FastEndpoints.BindingOptions.ValueParserFor(System.Type, System.Func<System.Object, FastEndpoints.ParseResult>)
  type: Method
  source:
    id: ValueParserFor
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Config\BindingOptions.cs
    startLine: 100
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nadd a custom value parser function for any given type which the default model binder will use to parse values when model binding request dto properties from query/route/forms/headers/claims.\nthis is an alternative approach to adding a `TryParse()` function to your types that need model binding support from the abovementioned binding sources.\nonce you register a parser function here for a type, any `TryParse()` method on the type will not be used for parsing.\nalso, these parser functions do not apply to JSON deserialization done by STJ and can be considered the equivalent to registering a custom converter in STJ when it comes to query/route/forms/headers/claims binding sources.\n"
  example: []
  syntax:
    content: public bool ValueParserFor(Type type, Func<object, ParseResult> parser)
    parameters:
    - id: type
      type: System.Type
      description: the type of the class which this parser function will target
    - id: parser
      type: System.Func{System.Object,FastEndpoints.ParseResult}
      description: >
        a function that takes in a nullable object and returns a <xref href="FastEndpoints.ParseResult" data-throw-if-not-resolved="false"></xref> as the output.

        <pre><code>app.UseFastEndpoints(c =>

        {
           c.Binding.ValueParserFor(typeof(Guid), MyParsers.GuidParser);
        });


        public static class MyParsers

        {
           public static ParseResult GuidParser(object? input)
           {
               Guid result;
               bool success = Guid.TryParse(input?.ToString(), out result);
               return new(success, result);
           }
        }</code></pre>
    return:
      type: System.Boolean
    content.vb: Public Function ValueParserFor(type As Type, parser As Func(Of Object, ParseResult)) As Boolean
  overload: FastEndpoints.BindingOptions.ValueParserFor*
  nameWithType.vb: BindingOptions.ValueParserFor(Type, Func(Of Object, ParseResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.BindingOptions.ValueParserFor(System.Type, System.Func(Of System.Object, FastEndpoints.ParseResult))
  name.vb: ValueParserFor(Type, Func(Of Object, ParseResult))
references:
- uid: FastEndpoints
  commentId: N:FastEndpoints
  name: FastEndpoints
  nameWithType: FastEndpoints
  fullName: FastEndpoints
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FastEndpoints.BindingOptions.JsonExceptionTransformer
  commentId: P:FastEndpoints.BindingOptions.JsonExceptionTransformer
  isExternal: true
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.Primitives.StringValues
  commentId: T:Microsoft.Extensions.Primitives.StringValues
  isExternal: true
- uid: FastEndpoints.BindingOptions.FailureMessage*
  commentId: Overload:FastEndpoints.BindingOptions.FailureMessage
  name: FailureMessage
  nameWithType: BindingOptions.FailureMessage
  fullName: FastEndpoints.BindingOptions.FailureMessage
- uid: System.Func{System.Type,System.String,Microsoft.Extensions.Primitives.StringValues,System.String}
  commentId: T:System.Func{System.Type,System.String,Microsoft.Extensions.Primitives.StringValues,System.String}
  parent: System
  definition: System.Func`4
  name: Func<Type, String, StringValues, String>
  nameWithType: Func<Type, String, StringValues, String>
  fullName: System.Func<System.Type, System.String, Microsoft.Extensions.Primitives.StringValues, System.String>
  nameWithType.vb: Func(Of Type, String, StringValues, String)
  fullName.vb: System.Func(Of System.Type, System.String, Microsoft.Extensions.Primitives.StringValues, System.String)
  name.vb: Func(Of Type, String, StringValues, String)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Primitives.StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: Microsoft.Extensions.Primitives.StringValues
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Primitives.StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: Microsoft.Extensions.Primitives.StringValues
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text.Json.JsonException
  commentId: T:System.Text.Json.JsonException
  isExternal: true
- uid: FluentValidation.Results.ValidationFailure
  commentId: T:FluentValidation.Results.ValidationFailure
  parent: FluentValidation.Results
  isExternal: true
  name: ValidationFailure
  nameWithType: ValidationFailure
  fullName: FluentValidation.Results.ValidationFailure
- uid: FastEndpoints.BindingOptions.FailureMessage
  commentId: P:FastEndpoints.BindingOptions.FailureMessage
  isExternal: true
- uid: FastEndpoints.BindingOptions.JsonExceptionTransformer*
  commentId: Overload:FastEndpoints.BindingOptions.JsonExceptionTransformer
  name: JsonExceptionTransformer
  nameWithType: BindingOptions.JsonExceptionTransformer
  fullName: FastEndpoints.BindingOptions.JsonExceptionTransformer
- uid: System.Func{System.Text.Json.JsonException,FluentValidation.Results.ValidationFailure}
  commentId: T:System.Func{System.Text.Json.JsonException,FluentValidation.Results.ValidationFailure}
  parent: System
  definition: System.Func`2
  name: Func<JsonException, ValidationFailure>
  nameWithType: Func<JsonException, ValidationFailure>
  fullName: System.Func<System.Text.Json.JsonException, FluentValidation.Results.ValidationFailure>
  nameWithType.vb: Func(Of JsonException, ValidationFailure)
  fullName.vb: System.Func(Of System.Text.Json.JsonException, FluentValidation.Results.ValidationFailure)
  name.vb: Func(Of JsonException, ValidationFailure)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Text.Json.JsonException
    name: JsonException
    nameWithType: JsonException
    fullName: System.Text.Json.JsonException
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FluentValidation.Results.ValidationFailure
    name: ValidationFailure
    nameWithType: ValidationFailure
    fullName: FluentValidation.Results.ValidationFailure
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Text.Json.JsonException
    name: JsonException
    nameWithType: JsonException
    fullName: System.Text.Json.JsonException
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FluentValidation.Results.ValidationFailure
    name: ValidationFailure
    nameWithType: ValidationFailure
    fullName: FluentValidation.Results.ValidationFailure
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FluentValidation.Results
  commentId: N:FluentValidation.Results
  isExternal: true
  name: FluentValidation.Results
  nameWithType: FluentValidation.Results
  fullName: FluentValidation.Results
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints.BinderContext
  commentId: T:FastEndpoints.BinderContext
  parent: FastEndpoints
  name: BinderContext
  nameWithType: BinderContext
  fullName: FastEndpoints.BinderContext
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: FastEndpoints.BindingOptions.Modifier*
  commentId: Overload:FastEndpoints.BindingOptions.Modifier
  name: Modifier
  nameWithType: BindingOptions.Modifier
  fullName: FastEndpoints.BindingOptions.Modifier
- uid: System.Action{System.Object,System.Type,FastEndpoints.BinderContext,System.Threading.CancellationToken}
  commentId: T:System.Action{System.Object,System.Type,FastEndpoints.BinderContext,System.Threading.CancellationToken}
  parent: System
  definition: System.Action`4
  name: Action<Object, Type, BinderContext, CancellationToken>
  nameWithType: Action<Object, Type, BinderContext, CancellationToken>
  fullName: System.Action<System.Object, System.Type, FastEndpoints.BinderContext, System.Threading.CancellationToken>
  nameWithType.vb: Action(Of Object, Type, BinderContext, CancellationToken)
  fullName.vb: System.Action(Of System.Object, System.Type, FastEndpoints.BinderContext, System.Threading.CancellationToken)
  name.vb: Action(Of Object, Type, BinderContext, CancellationToken)
  spec.csharp:
  - uid: System.Action`4
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FastEndpoints.BinderContext
    name: BinderContext
    nameWithType: BinderContext
    fullName: FastEndpoints.BinderContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`4
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FastEndpoints.BinderContext
    name: BinderContext
    nameWithType: BinderContext
    fullName: FastEndpoints.BinderContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Action`4
  commentId: T:System.Action`4
  isExternal: true
  name: Action<T1, T2, T3, T4>
  nameWithType: Action<T1, T2, T3, T4>
  fullName: System.Action<T1, T2, T3, T4>
  nameWithType.vb: Action(Of T1, T2, T3, T4)
  fullName.vb: System.Action(Of T1, T2, T3, T4)
  name.vb: Action(Of T1, T2, T3, T4)
  spec.csharp:
  - uid: System.Action`4
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`4
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints.ParseResult
  commentId: T:FastEndpoints.ParseResult
  name: ParseResult
  nameWithType: ParseResult
  fullName: FastEndpoints.ParseResult
- uid: FastEndpoints.BindingOptions.ValueParserFor*
  commentId: Overload:FastEndpoints.BindingOptions.ValueParserFor
  name: ValueParserFor
  nameWithType: BindingOptions.ValueParserFor
  fullName: FastEndpoints.BindingOptions.ValueParserFor
- uid: System.Func{System.Object,FastEndpoints.ParseResult}
  commentId: T:System.Func{System.Object,FastEndpoints.ParseResult}
  parent: System
  definition: System.Func`2
  name: Func<Object, ParseResult>
  nameWithType: Func<Object, ParseResult>
  fullName: System.Func<System.Object, FastEndpoints.ParseResult>
  nameWithType.vb: Func(Of Object, ParseResult)
  fullName.vb: System.Func(Of System.Object, FastEndpoints.ParseResult)
  name.vb: Func(Of Object, ParseResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FastEndpoints.ParseResult
    name: ParseResult
    nameWithType: ParseResult
    fullName: FastEndpoints.ParseResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FastEndpoints.ParseResult
    name: ParseResult
    nameWithType: ParseResult
    fullName: FastEndpoints.ParseResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
