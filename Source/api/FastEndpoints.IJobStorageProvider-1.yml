### YamlMime:ManagedReference
items:
- uid: FastEndpoints.IJobStorageProvider`1
  commentId: T:FastEndpoints.IJobStorageProvider`1
  id: IJobStorageProvider`1
  parent: FastEndpoints
  children:
  - FastEndpoints.IJobStorageProvider`1.CancelJobAsync(System.Guid,System.Threading.CancellationToken)
  - FastEndpoints.IJobStorageProvider`1.GetNextBatchAsync(FastEndpoints.PendingJobSearchParams{`0})
  - FastEndpoints.IJobStorageProvider`1.MarkJobAsCompleteAsync(`0,System.Threading.CancellationToken)
  - FastEndpoints.IJobStorageProvider`1.OnHandlerExecutionFailureAsync(`0,System.Exception,System.Threading.CancellationToken)
  - FastEndpoints.IJobStorageProvider`1.PurgeStaleJobsAsync(FastEndpoints.StaleJobSearchParams{`0})
  - FastEndpoints.IJobStorageProvider`1.StoreJobAsync(`0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IJobStorageProvider<TStorageRecord>
  nameWithType: IJobStorageProvider<TStorageRecord>
  fullName: FastEndpoints.IJobStorageProvider<TStorageRecord>
  type: Interface
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: interface for defining the contract of a job storage provider
  example: []
  syntax:
    content: 'public interface IJobStorageProvider<TStorageRecord> where TStorageRecord : IJobStorageRecord'
    typeParameters:
    - id: TStorageRecord
      description: the type of job storage record of this storage provider
    content.vb: Public Interface IJobStorageProvider(Of TStorageRecord As IJobStorageRecord)
  nameWithType.vb: IJobStorageProvider(Of TStorageRecord)
  fullName.vb: FastEndpoints.IJobStorageProvider(Of TStorageRecord)
  name.vb: IJobStorageProvider(Of TStorageRecord)
- uid: FastEndpoints.IJobStorageProvider`1.StoreJobAsync(`0,System.Threading.CancellationToken)
  commentId: M:FastEndpoints.IJobStorageProvider`1.StoreJobAsync(`0,System.Threading.CancellationToken)
  id: StoreJobAsync(`0,System.Threading.CancellationToken)
  parent: FastEndpoints.IJobStorageProvider`1
  langs:
  - csharp
  - vb
  name: StoreJobAsync(TStorageRecord, CancellationToken)
  nameWithType: IJobStorageProvider<TStorageRecord>.StoreJobAsync(TStorageRecord, CancellationToken)
  fullName: FastEndpoints.IJobStorageProvider<TStorageRecord>.StoreJobAsync(TStorageRecord, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: store the job storage record however you please. ideally on a nosql database.
  example: []
  syntax:
    content: Task StoreJobAsync(TStorageRecord r, CancellationToken ct)
    parameters:
    - id: r
      type: '{TStorageRecord}'
      description: the job storage record which contains the actual command object as well as some metadata
    - id: ct
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function StoreJobAsync(r As TStorageRecord, ct As CancellationToken) As Task
  overload: FastEndpoints.IJobStorageProvider`1.StoreJobAsync*
  nameWithType.vb: IJobStorageProvider(Of TStorageRecord).StoreJobAsync(TStorageRecord, CancellationToken)
  fullName.vb: FastEndpoints.IJobStorageProvider(Of TStorageRecord).StoreJobAsync(TStorageRecord, System.Threading.CancellationToken)
- uid: FastEndpoints.IJobStorageProvider`1.GetNextBatchAsync(FastEndpoints.PendingJobSearchParams{`0})
  commentId: M:FastEndpoints.IJobStorageProvider`1.GetNextBatchAsync(FastEndpoints.PendingJobSearchParams{`0})
  id: GetNextBatchAsync(FastEndpoints.PendingJobSearchParams{`0})
  parent: FastEndpoints.IJobStorageProvider`1
  langs:
  - csharp
  - vb
  name: GetNextBatchAsync(PendingJobSearchParams<TStorageRecord>)
  nameWithType: IJobStorageProvider<TStorageRecord>.GetNextBatchAsync(PendingJobSearchParams<TStorageRecord>)
  fullName: FastEndpoints.IJobStorageProvider<TStorageRecord>.GetNextBatchAsync(FastEndpoints.PendingJobSearchParams<TStorageRecord>)
  type: Method
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: fetch the next pending batch of job storage records that need to be processed, with the supplied search parameters.
  example: []
  syntax:
    content: Task<IEnumerable<TStorageRecord>> GetNextBatchAsync(PendingJobSearchParams<TStorageRecord> parameters)
    parameters:
    - id: parameters
      type: FastEndpoints.PendingJobSearchParams{{TStorageRecord}}
      description: use these supplied search parameters to find the next batch of job records from your database
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{TStorageRecord}}}
    content.vb: Function GetNextBatchAsync(parameters As PendingJobSearchParams(Of TStorageRecord)) As Task(Of IEnumerable(Of TStorageRecord))
  overload: FastEndpoints.IJobStorageProvider`1.GetNextBatchAsync*
  nameWithType.vb: IJobStorageProvider(Of TStorageRecord).GetNextBatchAsync(PendingJobSearchParams(Of TStorageRecord))
  fullName.vb: FastEndpoints.IJobStorageProvider(Of TStorageRecord).GetNextBatchAsync(FastEndpoints.PendingJobSearchParams(Of TStorageRecord))
  name.vb: GetNextBatchAsync(PendingJobSearchParams(Of TStorageRecord))
- uid: FastEndpoints.IJobStorageProvider`1.MarkJobAsCompleteAsync(`0,System.Threading.CancellationToken)
  commentId: M:FastEndpoints.IJobStorageProvider`1.MarkJobAsCompleteAsync(`0,System.Threading.CancellationToken)
  id: MarkJobAsCompleteAsync(`0,System.Threading.CancellationToken)
  parent: FastEndpoints.IJobStorageProvider`1
  langs:
  - csharp
  - vb
  name: MarkJobAsCompleteAsync(TStorageRecord, CancellationToken)
  nameWithType: IJobStorageProvider<TStorageRecord>.MarkJobAsCompleteAsync(TStorageRecord, CancellationToken)
  fullName: FastEndpoints.IJobStorageProvider<TStorageRecord>.MarkJobAsCompleteAsync(TStorageRecord, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: >-
    mark the job storage record as complete by either replacing the entity on storage with the supplied instance or

    simply update the <xref href="FastEndpoints.IJobStorageRecord.IsComplete" data-throw-if-not-resolved="false"></xref> field to true with a partial update operation.
  example: []
  syntax:
    content: Task MarkJobAsCompleteAsync(TStorageRecord r, CancellationToken ct)
    parameters:
    - id: r
      type: '{TStorageRecord}'
      description: the job storage record to mark as complete
    - id: ct
      type: System.Threading.CancellationToken
      description: cancellation token
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function MarkJobAsCompleteAsync(r As TStorageRecord, ct As CancellationToken) As Task
  overload: FastEndpoints.IJobStorageProvider`1.MarkJobAsCompleteAsync*
  nameWithType.vb: IJobStorageProvider(Of TStorageRecord).MarkJobAsCompleteAsync(TStorageRecord, CancellationToken)
  fullName.vb: FastEndpoints.IJobStorageProvider(Of TStorageRecord).MarkJobAsCompleteAsync(TStorageRecord, System.Threading.CancellationToken)
- uid: FastEndpoints.IJobStorageProvider`1.CancelJobAsync(System.Guid,System.Threading.CancellationToken)
  commentId: M:FastEndpoints.IJobStorageProvider`1.CancelJobAsync(System.Guid,System.Threading.CancellationToken)
  id: CancelJobAsync(System.Guid,System.Threading.CancellationToken)
  parent: FastEndpoints.IJobStorageProvider`1
  langs:
  - csharp
  - vb
  name: CancelJobAsync(Guid, CancellationToken)
  nameWithType: IJobStorageProvider<TStorageRecord>.CancelJobAsync(Guid, CancellationToken)
  fullName: FastEndpoints.IJobStorageProvider<TStorageRecord>.CancelJobAsync(System.Guid, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: >-
    either delete the job storage record from the db using the supplied tracking id or update the <xref href="FastEndpoints.IJobStorageRecord.IsComplete" data-throw-if-not-resolved="false"></xref> field to true

    with a partial update operation.
  example: []
  syntax:
    content: Task CancelJobAsync(Guid trackingId, CancellationToken ct)
    parameters:
    - id: trackingId
      type: System.Guid
      description: the <xref href="FastEndpoints.IJobStorageRecord.TrackingID" data-throw-if-not-resolved="false"></xref> of the job to be cancelled
    - id: ct
      type: System.Threading.CancellationToken
      description: cancellation token
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function CancelJobAsync(trackingId As Guid, ct As CancellationToken) As Task
  overload: FastEndpoints.IJobStorageProvider`1.CancelJobAsync*
  nameWithType.vb: IJobStorageProvider(Of TStorageRecord).CancelJobAsync(Guid, CancellationToken)
  fullName.vb: FastEndpoints.IJobStorageProvider(Of TStorageRecord).CancelJobAsync(System.Guid, System.Threading.CancellationToken)
- uid: FastEndpoints.IJobStorageProvider`1.OnHandlerExecutionFailureAsync(`0,System.Exception,System.Threading.CancellationToken)
  commentId: M:FastEndpoints.IJobStorageProvider`1.OnHandlerExecutionFailureAsync(`0,System.Exception,System.Threading.CancellationToken)
  id: OnHandlerExecutionFailureAsync(`0,System.Exception,System.Threading.CancellationToken)
  parent: FastEndpoints.IJobStorageProvider`1
  langs:
  - csharp
  - vb
  name: OnHandlerExecutionFailureAsync(TStorageRecord, Exception, CancellationToken)
  nameWithType: IJobStorageProvider<TStorageRecord>.OnHandlerExecutionFailureAsync(TStorageRecord, Exception, CancellationToken)
  fullName: FastEndpoints.IJobStorageProvider<TStorageRecord>.OnHandlerExecutionFailureAsync(TStorageRecord, System.Exception, System.Threading.CancellationToken)
  type: Method
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: >-
    this will only be triggered when a command handler (<xref href="FastEndpoints.ICommandHandler%601" data-throw-if-not-resolved="false"></xref>) associated with a command

    throws an exception. If you've set an execution time limit for the command, the thrown exception would be of type

    <xref href="System.OperationCanceledException" data-throw-if-not-resolved="false"></xref>.

    <p>

    when a job/command execution fails, it will be retried immediately. the failed job will be fetched again with the next batch of pending jobs.

    if one or more jobs keep failing repeatedly, it may cause the whole queue to get stuck in a retry loop preventing it from progressing.

    </p>

    <p>

    to prevent this from happening and allow other jobs to be given a chance at execution, you can reschedule failed jobs

    to be re-attempted at a future time instead. simply update the <xref href="FastEndpoints.IJobStorageRecord.ExecuteAfter" data-throw-if-not-resolved="false"></xref> property to a future date/time

    and save the entity to the database (or do a partial update of only that property value).

    </p>
  example: []
  syntax:
    content: Task OnHandlerExecutionFailureAsync(TStorageRecord r, Exception exception, CancellationToken ct)
    parameters:
    - id: r
      type: '{TStorageRecord}'
      description: the job that failed to execute successfully
    - id: exception
      type: System.Exception
      description: the exception that was thrown
    - id: ct
      type: System.Threading.CancellationToken
      description: cancellation token
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function OnHandlerExecutionFailureAsync(r As TStorageRecord, exception As Exception, ct As CancellationToken) As Task
  overload: FastEndpoints.IJobStorageProvider`1.OnHandlerExecutionFailureAsync*
  nameWithType.vb: IJobStorageProvider(Of TStorageRecord).OnHandlerExecutionFailureAsync(TStorageRecord, Exception, CancellationToken)
  fullName.vb: FastEndpoints.IJobStorageProvider(Of TStorageRecord).OnHandlerExecutionFailureAsync(TStorageRecord, System.Exception, System.Threading.CancellationToken)
- uid: FastEndpoints.IJobStorageProvider`1.PurgeStaleJobsAsync(FastEndpoints.StaleJobSearchParams{`0})
  commentId: M:FastEndpoints.IJobStorageProvider`1.PurgeStaleJobsAsync(FastEndpoints.StaleJobSearchParams{`0})
  id: PurgeStaleJobsAsync(FastEndpoints.StaleJobSearchParams{`0})
  parent: FastEndpoints.IJobStorageProvider`1
  langs:
  - csharp
  - vb
  name: PurgeStaleJobsAsync(StaleJobSearchParams<TStorageRecord>)
  nameWithType: IJobStorageProvider<TStorageRecord>.PurgeStaleJobsAsync(StaleJobSearchParams<TStorageRecord>)
  fullName: FastEndpoints.IJobStorageProvider<TStorageRecord>.PurgeStaleJobsAsync(FastEndpoints.StaleJobSearchParams<TStorageRecord>)
  type: Method
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: >-
    this method will be called hourly. implement this method to delete stale records (completed or expired) from storage.

    you can safely delete the completed records. the incomplete &amp; expired records can be moved to some other location (dead-letter-queue maybe) or

    for inspection by a human.

    or if you'd like to retry expired events, update the <xref href="FastEndpoints.IJobStorageRecord.ExpireOn" data-throw-if-not-resolved="false"></xref> field to a future date/time.
  example: []
  syntax:
    content: Task PurgeStaleJobsAsync(StaleJobSearchParams<TStorageRecord> parameters)
    parameters:
    - id: parameters
      type: FastEndpoints.StaleJobSearchParams{{TStorageRecord}}
      description: use these supplied search parameters to find stale job records from your database
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function PurgeStaleJobsAsync(parameters As StaleJobSearchParams(Of TStorageRecord)) As Task
  overload: FastEndpoints.IJobStorageProvider`1.PurgeStaleJobsAsync*
  nameWithType.vb: IJobStorageProvider(Of TStorageRecord).PurgeStaleJobsAsync(StaleJobSearchParams(Of TStorageRecord))
  fullName.vb: FastEndpoints.IJobStorageProvider(Of TStorageRecord).PurgeStaleJobsAsync(FastEndpoints.StaleJobSearchParams(Of TStorageRecord))
  name.vb: PurgeStaleJobsAsync(StaleJobSearchParams(Of TStorageRecord))
references:
- uid: FastEndpoints
  commentId: N:FastEndpoints
  href: FastEndpoints.html
  name: FastEndpoints
  nameWithType: FastEndpoints
  fullName: FastEndpoints
- uid: FastEndpoints.IJobStorageProvider`1.StoreJobAsync*
  commentId: Overload:FastEndpoints.IJobStorageProvider`1.StoreJobAsync
  href: FastEndpoints.IJobStorageProvider-1.html#FastEndpoints_IJobStorageProvider_1_StoreJobAsync__0_System_Threading_CancellationToken_
  name: StoreJobAsync
  nameWithType: IJobStorageProvider<TStorageRecord>.StoreJobAsync
  fullName: FastEndpoints.IJobStorageProvider<TStorageRecord>.StoreJobAsync
  nameWithType.vb: IJobStorageProvider(Of TStorageRecord).StoreJobAsync
  fullName.vb: FastEndpoints.IJobStorageProvider(Of TStorageRecord).StoreJobAsync
- uid: '{TStorageRecord}'
  commentId: '!:TStorageRecord'
  definition: TStorageRecord
  name: TStorageRecord
  nameWithType: TStorageRecord
  fullName: TStorageRecord
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: TStorageRecord
  name: TStorageRecord
  nameWithType: TStorageRecord
  fullName: TStorageRecord
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: FastEndpoints.IJobStorageProvider`1.GetNextBatchAsync*
  commentId: Overload:FastEndpoints.IJobStorageProvider`1.GetNextBatchAsync
  href: FastEndpoints.IJobStorageProvider-1.html#FastEndpoints_IJobStorageProvider_1_GetNextBatchAsync_FastEndpoints_PendingJobSearchParams__0__
  name: GetNextBatchAsync
  nameWithType: IJobStorageProvider<TStorageRecord>.GetNextBatchAsync
  fullName: FastEndpoints.IJobStorageProvider<TStorageRecord>.GetNextBatchAsync
  nameWithType.vb: IJobStorageProvider(Of TStorageRecord).GetNextBatchAsync
  fullName.vb: FastEndpoints.IJobStorageProvider(Of TStorageRecord).GetNextBatchAsync
- uid: FastEndpoints.PendingJobSearchParams{{TStorageRecord}}
  commentId: T:FastEndpoints.PendingJobSearchParams{`0}
  parent: FastEndpoints
  definition: FastEndpoints.PendingJobSearchParams`1
  href: FastEndpoints.PendingJobSearchParams-1.html
  name: PendingJobSearchParams<TStorageRecord>
  nameWithType: PendingJobSearchParams<TStorageRecord>
  fullName: FastEndpoints.PendingJobSearchParams<TStorageRecord>
  nameWithType.vb: PendingJobSearchParams(Of TStorageRecord)
  fullName.vb: FastEndpoints.PendingJobSearchParams(Of TStorageRecord)
  name.vb: PendingJobSearchParams(Of TStorageRecord)
  spec.csharp:
  - uid: FastEndpoints.PendingJobSearchParams`1
    name: PendingJobSearchParams
    href: FastEndpoints.PendingJobSearchParams-1.html
  - name: <
  - name: TStorageRecord
  - name: '>'
  spec.vb:
  - uid: FastEndpoints.PendingJobSearchParams`1
    name: PendingJobSearchParams
    href: FastEndpoints.PendingJobSearchParams-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TStorageRecord
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{TStorageRecord}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEnumerable<TStorageRecord>>
  nameWithType: Task<IEnumerable<TStorageRecord>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<TStorageRecord>>
  nameWithType.vb: Task(Of IEnumerable(Of TStorageRecord))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of TStorageRecord))
  name.vb: Task(Of IEnumerable(Of TStorageRecord))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TStorageRecord
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TStorageRecord
  - name: )
  - name: )
- uid: FastEndpoints.PendingJobSearchParams`1
  commentId: T:FastEndpoints.PendingJobSearchParams`1
  href: FastEndpoints.PendingJobSearchParams-1.html
  name: PendingJobSearchParams<TStorageRecord>
  nameWithType: PendingJobSearchParams<TStorageRecord>
  fullName: FastEndpoints.PendingJobSearchParams<TStorageRecord>
  nameWithType.vb: PendingJobSearchParams(Of TStorageRecord)
  fullName.vb: FastEndpoints.PendingJobSearchParams(Of TStorageRecord)
  name.vb: PendingJobSearchParams(Of TStorageRecord)
  spec.csharp:
  - uid: FastEndpoints.PendingJobSearchParams`1
    name: PendingJobSearchParams
    href: FastEndpoints.PendingJobSearchParams-1.html
  - name: <
  - name: TStorageRecord
  - name: '>'
  spec.vb:
  - uid: FastEndpoints.PendingJobSearchParams`1
    name: PendingJobSearchParams
    href: FastEndpoints.PendingJobSearchParams-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TStorageRecord
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: FastEndpoints.IJobStorageRecord.IsComplete
  commentId: P:FastEndpoints.IJobStorageRecord.IsComplete
  href: FastEndpoints.IJobStorageRecord.html#FastEndpoints_IJobStorageRecord_IsComplete
  name: IsComplete
  nameWithType: IJobStorageRecord.IsComplete
  fullName: FastEndpoints.IJobStorageRecord.IsComplete
- uid: FastEndpoints.IJobStorageProvider`1.MarkJobAsCompleteAsync*
  commentId: Overload:FastEndpoints.IJobStorageProvider`1.MarkJobAsCompleteAsync
  href: FastEndpoints.IJobStorageProvider-1.html#FastEndpoints_IJobStorageProvider_1_MarkJobAsCompleteAsync__0_System_Threading_CancellationToken_
  name: MarkJobAsCompleteAsync
  nameWithType: IJobStorageProvider<TStorageRecord>.MarkJobAsCompleteAsync
  fullName: FastEndpoints.IJobStorageProvider<TStorageRecord>.MarkJobAsCompleteAsync
  nameWithType.vb: IJobStorageProvider(Of TStorageRecord).MarkJobAsCompleteAsync
  fullName.vb: FastEndpoints.IJobStorageProvider(Of TStorageRecord).MarkJobAsCompleteAsync
- uid: FastEndpoints.IJobStorageRecord.TrackingID
  commentId: P:FastEndpoints.IJobStorageRecord.TrackingID
  href: FastEndpoints.IJobStorageRecord.html#FastEndpoints_IJobStorageRecord_TrackingID
  name: TrackingID
  nameWithType: IJobStorageRecord.TrackingID
  fullName: FastEndpoints.IJobStorageRecord.TrackingID
- uid: FastEndpoints.IJobStorageProvider`1.CancelJobAsync*
  commentId: Overload:FastEndpoints.IJobStorageProvider`1.CancelJobAsync
  href: FastEndpoints.IJobStorageProvider-1.html#FastEndpoints_IJobStorageProvider_1_CancelJobAsync_System_Guid_System_Threading_CancellationToken_
  name: CancelJobAsync
  nameWithType: IJobStorageProvider<TStorageRecord>.CancelJobAsync
  fullName: FastEndpoints.IJobStorageProvider<TStorageRecord>.CancelJobAsync
  nameWithType.vb: IJobStorageProvider(Of TStorageRecord).CancelJobAsync
  fullName.vb: FastEndpoints.IJobStorageProvider(Of TStorageRecord).CancelJobAsync
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System
  commentId: N:System
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: FastEndpoints.ICommandHandler`1
  commentId: T:FastEndpoints.ICommandHandler`1
  href: FastEndpoints.ICommandHandler-1.html
  name: ICommandHandler<TCommand>
  nameWithType: ICommandHandler<TCommand>
  fullName: FastEndpoints.ICommandHandler<TCommand>
  nameWithType.vb: ICommandHandler(Of TCommand)
  fullName.vb: FastEndpoints.ICommandHandler(Of TCommand)
  name.vb: ICommandHandler(Of TCommand)
  spec.csharp:
  - uid: FastEndpoints.ICommandHandler`1
    name: ICommandHandler
    href: FastEndpoints.ICommandHandler-1.html
  - name: <
  - name: TCommand
  - name: '>'
  spec.vb:
  - uid: FastEndpoints.ICommandHandler`1
    name: ICommandHandler
    href: FastEndpoints.ICommandHandler-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TCommand
  - name: )
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.operationcanceledexception
  name: OperationCanceledException
  nameWithType: OperationCanceledException
  fullName: System.OperationCanceledException
- uid: FastEndpoints.IJobStorageRecord.ExecuteAfter
  commentId: P:FastEndpoints.IJobStorageRecord.ExecuteAfter
  href: FastEndpoints.IJobStorageRecord.html#FastEndpoints_IJobStorageRecord_ExecuteAfter
  name: ExecuteAfter
  nameWithType: IJobStorageRecord.ExecuteAfter
  fullName: FastEndpoints.IJobStorageRecord.ExecuteAfter
- uid: FastEndpoints.IJobStorageProvider`1.OnHandlerExecutionFailureAsync*
  commentId: Overload:FastEndpoints.IJobStorageProvider`1.OnHandlerExecutionFailureAsync
  href: FastEndpoints.IJobStorageProvider-1.html#FastEndpoints_IJobStorageProvider_1_OnHandlerExecutionFailureAsync__0_System_Exception_System_Threading_CancellationToken_
  name: OnHandlerExecutionFailureAsync
  nameWithType: IJobStorageProvider<TStorageRecord>.OnHandlerExecutionFailureAsync
  fullName: FastEndpoints.IJobStorageProvider<TStorageRecord>.OnHandlerExecutionFailureAsync
  nameWithType.vb: IJobStorageProvider(Of TStorageRecord).OnHandlerExecutionFailureAsync
  fullName.vb: FastEndpoints.IJobStorageProvider(Of TStorageRecord).OnHandlerExecutionFailureAsync
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: FastEndpoints.IJobStorageRecord.ExpireOn
  commentId: P:FastEndpoints.IJobStorageRecord.ExpireOn
  href: FastEndpoints.IJobStorageRecord.html#FastEndpoints_IJobStorageRecord_ExpireOn
  name: ExpireOn
  nameWithType: IJobStorageRecord.ExpireOn
  fullName: FastEndpoints.IJobStorageRecord.ExpireOn
- uid: FastEndpoints.IJobStorageProvider`1.PurgeStaleJobsAsync*
  commentId: Overload:FastEndpoints.IJobStorageProvider`1.PurgeStaleJobsAsync
  href: FastEndpoints.IJobStorageProvider-1.html#FastEndpoints_IJobStorageProvider_1_PurgeStaleJobsAsync_FastEndpoints_StaleJobSearchParams__0__
  name: PurgeStaleJobsAsync
  nameWithType: IJobStorageProvider<TStorageRecord>.PurgeStaleJobsAsync
  fullName: FastEndpoints.IJobStorageProvider<TStorageRecord>.PurgeStaleJobsAsync
  nameWithType.vb: IJobStorageProvider(Of TStorageRecord).PurgeStaleJobsAsync
  fullName.vb: FastEndpoints.IJobStorageProvider(Of TStorageRecord).PurgeStaleJobsAsync
- uid: FastEndpoints.StaleJobSearchParams{{TStorageRecord}}
  commentId: T:FastEndpoints.StaleJobSearchParams{`0}
  parent: FastEndpoints
  definition: FastEndpoints.StaleJobSearchParams`1
  href: FastEndpoints.StaleJobSearchParams-1.html
  name: StaleJobSearchParams<TStorageRecord>
  nameWithType: StaleJobSearchParams<TStorageRecord>
  fullName: FastEndpoints.StaleJobSearchParams<TStorageRecord>
  nameWithType.vb: StaleJobSearchParams(Of TStorageRecord)
  fullName.vb: FastEndpoints.StaleJobSearchParams(Of TStorageRecord)
  name.vb: StaleJobSearchParams(Of TStorageRecord)
  spec.csharp:
  - uid: FastEndpoints.StaleJobSearchParams`1
    name: StaleJobSearchParams
    href: FastEndpoints.StaleJobSearchParams-1.html
  - name: <
  - name: TStorageRecord
  - name: '>'
  spec.vb:
  - uid: FastEndpoints.StaleJobSearchParams`1
    name: StaleJobSearchParams
    href: FastEndpoints.StaleJobSearchParams-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TStorageRecord
  - name: )
- uid: FastEndpoints.StaleJobSearchParams`1
  commentId: T:FastEndpoints.StaleJobSearchParams`1
  href: FastEndpoints.StaleJobSearchParams-1.html
  name: StaleJobSearchParams<TStorageRecord>
  nameWithType: StaleJobSearchParams<TStorageRecord>
  fullName: FastEndpoints.StaleJobSearchParams<TStorageRecord>
  nameWithType.vb: StaleJobSearchParams(Of TStorageRecord)
  fullName.vb: FastEndpoints.StaleJobSearchParams(Of TStorageRecord)
  name.vb: StaleJobSearchParams(Of TStorageRecord)
  spec.csharp:
  - uid: FastEndpoints.StaleJobSearchParams`1
    name: StaleJobSearchParams
    href: FastEndpoints.StaleJobSearchParams-1.html
  - name: <
  - name: TStorageRecord
  - name: '>'
  spec.vb:
  - uid: FastEndpoints.StaleJobSearchParams`1
    name: StaleJobSearchParams
    href: FastEndpoints.StaleJobSearchParams-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TStorageRecord
  - name: )
