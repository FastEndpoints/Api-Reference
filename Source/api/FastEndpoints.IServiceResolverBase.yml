### YamlMime:ManagedReference
items:
- uid: FastEndpoints.IServiceResolverBase
  commentId: T:FastEndpoints.IServiceResolverBase
  id: IServiceResolverBase
  parent: FastEndpoints
  children:
  - FastEndpoints.IServiceResolverBase.CreateScope
  - FastEndpoints.IServiceResolverBase.Resolve(System.Type)
  - FastEndpoints.IServiceResolverBase.Resolve(System.Type,System.String)
  - FastEndpoints.IServiceResolverBase.Resolve``1
  - FastEndpoints.IServiceResolverBase.Resolve``1(System.String)
  - FastEndpoints.IServiceResolverBase.TryResolve(System.Type)
  - FastEndpoints.IServiceResolverBase.TryResolve(System.Type,System.String)
  - FastEndpoints.IServiceResolverBase.TryResolve``1
  - FastEndpoints.IServiceResolverBase.TryResolve``1(System.String)
  langs:
  - csharp
  - vb
  name: IServiceResolverBase
  nameWithType: IServiceResolverBase
  fullName: FastEndpoints.IServiceResolverBase
  type: Interface
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: >-
    interface used by fastendpoints for resolving services from the DI container.

    implement this interface and register the implementation in MS DI for customizing service resolving.
  example: []
  syntax:
    content: public interface IServiceResolverBase
    content.vb: Public Interface IServiceResolverBase
- uid: FastEndpoints.IServiceResolverBase.CreateScope
  commentId: M:FastEndpoints.IServiceResolverBase.CreateScope
  id: CreateScope
  parent: FastEndpoints.IServiceResolverBase
  langs:
  - csharp
  - vb
  name: CreateScope()
  nameWithType: IServiceResolverBase.CreateScope()
  fullName: FastEndpoints.IServiceResolverBase.CreateScope()
  type: Method
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: >-
    if you'd like to resolve scoped or transient services from the MS DI container, obtain a service scope from this method and dispose the scope when

    the work is complete.

    <p>

        <pre><code class="lang-csharp">using var scope = CreateScope();
        var scopedService = scope.Resolve<MyService>();</code></pre>
    </p>
  example: []
  syntax:
    content: IServiceScope CreateScope()
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceScope
    content.vb: Function CreateScope() As IServiceScope
  overload: FastEndpoints.IServiceResolverBase.CreateScope*
- uid: FastEndpoints.IServiceResolverBase.TryResolve``1
  commentId: M:FastEndpoints.IServiceResolverBase.TryResolve``1
  id: TryResolve``1
  parent: FastEndpoints.IServiceResolverBase
  langs:
  - csharp
  - vb
  name: TryResolve<TService>()
  nameWithType: IServiceResolverBase.TryResolve<TService>()
  fullName: FastEndpoints.IServiceResolverBase.TryResolve<TService>()
  type: Method
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable.
  example: []
  syntax:
    content: 'TService? TryResolve<TService>() where TService : class'
    typeParameters:
    - id: TService
      description: the type of the service to resolve
    return:
      type: '{TService}'
    content.vb: Function TryResolve(Of TService As Class)() As TService
  overload: FastEndpoints.IServiceResolverBase.TryResolve*
  nameWithType.vb: IServiceResolverBase.TryResolve(Of TService)()
  fullName.vb: FastEndpoints.IServiceResolverBase.TryResolve(Of TService)()
  name.vb: TryResolve(Of TService)()
- uid: FastEndpoints.IServiceResolverBase.TryResolve(System.Type)
  commentId: M:FastEndpoints.IServiceResolverBase.TryResolve(System.Type)
  id: TryResolve(System.Type)
  parent: FastEndpoints.IServiceResolverBase
  langs:
  - csharp
  - vb
  name: TryResolve(Type)
  nameWithType: IServiceResolverBase.TryResolve(Type)
  fullName: FastEndpoints.IServiceResolverBase.TryResolve(System.Type)
  type: Method
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable.
  example: []
  syntax:
    content: object? TryResolve(Type typeOfService)
    parameters:
    - id: typeOfService
      type: System.Type
      description: the type of the service to resolve
    return:
      type: System.Object
    content.vb: Function TryResolve(typeOfService As Type) As Object
  overload: FastEndpoints.IServiceResolverBase.TryResolve*
- uid: FastEndpoints.IServiceResolverBase.Resolve``1
  commentId: M:FastEndpoints.IServiceResolverBase.Resolve``1
  id: Resolve``1
  parent: FastEndpoints.IServiceResolverBase
  langs:
  - csharp
  - vb
  name: Resolve<TService>()
  nameWithType: IServiceResolverBase.Resolve<TService>()
  fullName: FastEndpoints.IServiceResolverBase.Resolve<TService>()
  type: Method
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: resolve an instance for the given type from the dependency injection container. will throw if unresolvable.
  example: []
  syntax:
    content: 'TService Resolve<TService>() where TService : class'
    typeParameters:
    - id: TService
      description: the type of the service to resolve
    return:
      type: '{TService}'
    content.vb: Function Resolve(Of TService As Class)() As TService
  overload: FastEndpoints.IServiceResolverBase.Resolve*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if requested service cannot be resolved
  nameWithType.vb: IServiceResolverBase.Resolve(Of TService)()
  fullName.vb: FastEndpoints.IServiceResolverBase.Resolve(Of TService)()
  name.vb: Resolve(Of TService)()
- uid: FastEndpoints.IServiceResolverBase.Resolve(System.Type)
  commentId: M:FastEndpoints.IServiceResolverBase.Resolve(System.Type)
  id: Resolve(System.Type)
  parent: FastEndpoints.IServiceResolverBase
  langs:
  - csharp
  - vb
  name: Resolve(Type)
  nameWithType: IServiceResolverBase.Resolve(Type)
  fullName: FastEndpoints.IServiceResolverBase.Resolve(System.Type)
  type: Method
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: resolve an instance for the given type from the dependency injection container. will throw if unresolvable.
  example: []
  syntax:
    content: object Resolve(Type typeOfService)
    parameters:
    - id: typeOfService
      type: System.Type
      description: the type of the service to resolve
    return:
      type: System.Object
    content.vb: Function Resolve(typeOfService As Type) As Object
  overload: FastEndpoints.IServiceResolverBase.Resolve*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if requested service cannot be resolved
- uid: FastEndpoints.IServiceResolverBase.TryResolve``1(System.String)
  commentId: M:FastEndpoints.IServiceResolverBase.TryResolve``1(System.String)
  id: TryResolve``1(System.String)
  parent: FastEndpoints.IServiceResolverBase
  langs:
  - csharp
  - vb
  name: TryResolve<TService>(string)
  nameWithType: IServiceResolverBase.TryResolve<TService>(string)
  fullName: FastEndpoints.IServiceResolverBase.TryResolve<TService>(string)
  type: Method
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable.
  example: []
  syntax:
    content: 'TService? TryResolve<TService>(string keyName) where TService : class'
    parameters:
    - id: keyName
      type: System.String
      description: the key name for resolving keyed service
    typeParameters:
    - id: TService
      description: the type of the service to resolve
    return:
      type: '{TService}'
    content.vb: Function TryResolve(Of TService As Class)(keyName As String) As TService
  overload: FastEndpoints.IServiceResolverBase.TryResolve*
  nameWithType.vb: IServiceResolverBase.TryResolve(Of TService)(String)
  fullName.vb: FastEndpoints.IServiceResolverBase.TryResolve(Of TService)(String)
  name.vb: TryResolve(Of TService)(String)
- uid: FastEndpoints.IServiceResolverBase.TryResolve(System.Type,System.String)
  commentId: M:FastEndpoints.IServiceResolverBase.TryResolve(System.Type,System.String)
  id: TryResolve(System.Type,System.String)
  parent: FastEndpoints.IServiceResolverBase
  langs:
  - csharp
  - vb
  name: TryResolve(Type, string)
  nameWithType: IServiceResolverBase.TryResolve(Type, string)
  fullName: FastEndpoints.IServiceResolverBase.TryResolve(System.Type, string)
  type: Method
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable.
  example: []
  syntax:
    content: object? TryResolve(Type typeOfService, string keyName)
    parameters:
    - id: typeOfService
      type: System.Type
      description: the type of the service to resolve
    - id: keyName
      type: System.String
      description: the key name for resolving keyed service
    return:
      type: System.Object
    content.vb: Function TryResolve(typeOfService As Type, keyName As String) As Object
  overload: FastEndpoints.IServiceResolverBase.TryResolve*
  nameWithType.vb: IServiceResolverBase.TryResolve(Type, String)
  fullName.vb: FastEndpoints.IServiceResolverBase.TryResolve(System.Type, String)
  name.vb: TryResolve(Type, String)
- uid: FastEndpoints.IServiceResolverBase.Resolve``1(System.String)
  commentId: M:FastEndpoints.IServiceResolverBase.Resolve``1(System.String)
  id: Resolve``1(System.String)
  parent: FastEndpoints.IServiceResolverBase
  langs:
  - csharp
  - vb
  name: Resolve<TService>(string)
  nameWithType: IServiceResolverBase.Resolve<TService>(string)
  fullName: FastEndpoints.IServiceResolverBase.Resolve<TService>(string)
  type: Method
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: resolve an instance for the given type from the dependency injection container. will throw if unresolvable.
  example: []
  syntax:
    content: 'TService Resolve<TService>(string keyName) where TService : class'
    parameters:
    - id: keyName
      type: System.String
      description: the key name for resolving keyed service
    typeParameters:
    - id: TService
      description: the type of the service to resolve
    return:
      type: '{TService}'
    content.vb: Function Resolve(Of TService As Class)(keyName As String) As TService
  overload: FastEndpoints.IServiceResolverBase.Resolve*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if requested service cannot be resolved
  nameWithType.vb: IServiceResolverBase.Resolve(Of TService)(String)
  fullName.vb: FastEndpoints.IServiceResolverBase.Resolve(Of TService)(String)
  name.vb: Resolve(Of TService)(String)
- uid: FastEndpoints.IServiceResolverBase.Resolve(System.Type,System.String)
  commentId: M:FastEndpoints.IServiceResolverBase.Resolve(System.Type,System.String)
  id: Resolve(System.Type,System.String)
  parent: FastEndpoints.IServiceResolverBase
  langs:
  - csharp
  - vb
  name: Resolve(Type, string)
  nameWithType: IServiceResolverBase.Resolve(Type, string)
  fullName: FastEndpoints.IServiceResolverBase.Resolve(System.Type, string)
  type: Method
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: resolve an instance for the given type from the dependency injection container. will throw if unresolvable.
  example: []
  syntax:
    content: object Resolve(Type typeOfService, string keyName)
    parameters:
    - id: typeOfService
      type: System.Type
      description: the type of the service to resolve
    - id: keyName
      type: System.String
      description: the key name for resolving keyed service
    return:
      type: System.Object
    content.vb: Function Resolve(typeOfService As Type, keyName As String) As Object
  overload: FastEndpoints.IServiceResolverBase.Resolve*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if requested service cannot be resolved
  nameWithType.vb: IServiceResolverBase.Resolve(Type, String)
  fullName.vb: FastEndpoints.IServiceResolverBase.Resolve(System.Type, String)
  name.vb: Resolve(Type, String)
references:
- uid: FastEndpoints
  commentId: N:FastEndpoints
  href: FastEndpoints.html
  name: FastEndpoints
  nameWithType: FastEndpoints
  fullName: FastEndpoints
- uid: FastEndpoints.IServiceResolverBase.CreateScope*
  commentId: Overload:FastEndpoints.IServiceResolverBase.CreateScope
  href: FastEndpoints.IServiceResolverBase.html#FastEndpoints_IServiceResolverBase_CreateScope
  name: CreateScope
  nameWithType: IServiceResolverBase.CreateScope
  fullName: FastEndpoints.IServiceResolverBase.CreateScope
- uid: Microsoft.Extensions.DependencyInjection.IServiceScope
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceScope
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.iservicescope
  name: IServiceScope
  nameWithType: IServiceScope
  fullName: Microsoft.Extensions.DependencyInjection.IServiceScope
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.DependencyInjection
    name: DependencyInjection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.DependencyInjection
    name: DependencyInjection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection
- uid: FastEndpoints.IServiceResolverBase.TryResolve*
  commentId: Overload:FastEndpoints.IServiceResolverBase.TryResolve
  href: FastEndpoints.IServiceResolverBase.html#FastEndpoints_IServiceResolverBase_TryResolve__1
  name: TryResolve
  nameWithType: IServiceResolverBase.TryResolve
  fullName: FastEndpoints.IServiceResolverBase.TryResolve
- uid: '{TService}'
  commentId: '!:TService'
  definition: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: FastEndpoints.IServiceResolverBase.Resolve*
  commentId: Overload:FastEndpoints.IServiceResolverBase.Resolve
  href: FastEndpoints.IServiceResolverBase.html#FastEndpoints_IServiceResolverBase_Resolve__1
  name: Resolve
  nameWithType: IServiceResolverBase.Resolve
  fullName: FastEndpoints.IServiceResolverBase.Resolve
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
