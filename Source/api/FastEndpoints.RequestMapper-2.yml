### YamlMime:ManagedReference
items:
- uid: FastEndpoints.RequestMapper`2
  commentId: T:FastEndpoints.RequestMapper`2
  id: RequestMapper`2
  parent: FastEndpoints
  children:
  - FastEndpoints.RequestMapper`2.CreateScope
  - FastEndpoints.RequestMapper`2.Resolve(Type)
  - FastEndpoints.RequestMapper`2.Resolve``1
  - FastEndpoints.RequestMapper`2.ToEntity(`0)
  - FastEndpoints.RequestMapper`2.ToEntityAsync(`0)
  - FastEndpoints.RequestMapper`2.TryResolve(Type)
  - FastEndpoints.RequestMapper`2.TryResolve``1
  langs:
  - csharp
  - vb
  name: RequestMapper<TRequest, TEntity>
  nameWithType: RequestMapper<TRequest, TEntity>
  fullName: FastEndpoints.RequestMapper<TRequest, TEntity>
  type: Class
  source:
    id: RequestMapper
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Mapper.cs
    startLine: 87
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nuse this base class to define a domain entity mapper for your endpoints that only has a request dto and no response dto.\n<p>HINT: entity mappers are used as singletons for performance reasons. do not maintain state in the mappers.</p>\n"
  example: []
  syntax:
    content: 'public abstract class RequestMapper<TRequest, TEntity> : IRequestMapper, IMapper where TRequest : new()'
    typeParameters:
    - id: TRequest
      description: the type of request dto
    - id: TEntity
      description: the type of domain entity to map to/from
    content.vb: >-
      Public MustInherit Class RequestMapper(Of TRequest As New, TEntity)

          Implements IRequestMapper, IMapper
  inheritance:
  - System.Object
  implements:
  - FastEndpoints.IRequestMapper
  - FastEndpoints.IMapper
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: RequestMapper(Of TRequest, TEntity)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: FastEndpoints.RequestMapper(Of TRequest, TEntity)
  name.vb: RequestMapper(Of TRequest, TEntity)
- uid: FastEndpoints.RequestMapper`2.ToEntity(`0)
  commentId: M:FastEndpoints.RequestMapper`2.ToEntity(`0)
  id: ToEntity(`0)
  parent: FastEndpoints.RequestMapper`2
  langs:
  - csharp
  - vb
  name: ToEntity(TRequest)
  nameWithType: RequestMapper<TRequest, TEntity>.ToEntity(TRequest)
  fullName: FastEndpoints.RequestMapper<TRequest, TEntity>.ToEntity(TRequest)
  type: Method
  source:
    id: ToEntity
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Mapper.cs
    startLine: 93
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\noverride this method and place the logic for mapping the request dto to the desired domain entity\n"
  example: []
  syntax:
    content: public virtual TEntity ToEntity(TRequest r)
    parameters:
    - id: r
      type: '{TRequest}'
      description: the request dto
    return:
      type: '{TEntity}'
    content.vb: Public Overridable Function ToEntity(r As TRequest) As TEntity
  overload: FastEndpoints.RequestMapper`2.ToEntity*
  nameWithType.vb: RequestMapper(Of TRequest, TEntity).ToEntity(TRequest)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: FastEndpoints.RequestMapper(Of TRequest, TEntity).ToEntity(TRequest)
- uid: FastEndpoints.RequestMapper`2.ToEntityAsync(`0)
  commentId: M:FastEndpoints.RequestMapper`2.ToEntityAsync(`0)
  id: ToEntityAsync(`0)
  parent: FastEndpoints.RequestMapper`2
  langs:
  - csharp
  - vb
  name: ToEntityAsync(TRequest)
  nameWithType: RequestMapper<TRequest, TEntity>.ToEntityAsync(TRequest)
  fullName: FastEndpoints.RequestMapper<TRequest, TEntity>.ToEntityAsync(TRequest)
  type: Method
  source:
    id: ToEntityAsync
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Mapper.cs
    startLine: 98
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\noverride this method and place the logic for mapping the request dto to the desired domain entity\n"
  example: []
  syntax:
    content: public virtual Task<TEntity> ToEntityAsync(TRequest r)
    parameters:
    - id: r
      type: '{TRequest}'
      description: the request dto to map from
    return:
      type: Task{{TEntity}}
    content.vb: Public Overridable Function ToEntityAsync(r As TRequest) As Task(Of TEntity)
  overload: FastEndpoints.RequestMapper`2.ToEntityAsync*
  nameWithType.vb: RequestMapper(Of TRequest, TEntity).ToEntityAsync(TRequest)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: FastEndpoints.RequestMapper(Of TRequest, TEntity).ToEntityAsync(TRequest)
- uid: FastEndpoints.RequestMapper`2.TryResolve``1
  commentId: M:FastEndpoints.RequestMapper`2.TryResolve``1
  id: TryResolve``1
  parent: FastEndpoints.RequestMapper`2
  langs:
  - csharp
  - vb
  name: TryResolve<TService>()
  nameWithType: RequestMapper<TRequest, TEntity>.TryResolve<TService>()
  fullName: FastEndpoints.RequestMapper<TRequest, TEntity>.TryResolve<TService>()
  type: Method
  source:
    id: TryResolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Mapper.cs
    startLine: 104
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\ntry to resolve an instance for the given type from the dependency injection container. will return null if unresolvable.\n"
  example: []
  syntax:
    content: >-
      public TService TryResolve<TService>()

          where TService : class
    typeParameters:
    - id: TService
      description: the type of the service to resolve
    return:
      type: '{TService}'
    content.vb: Public Function TryResolve(Of TService As Class) As TService
  overload: FastEndpoints.RequestMapper`2.TryResolve*
  nameWithType.vb: RequestMapper(Of TRequest, TEntity).TryResolve(Of TService)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.RequestMapper(Of TRequest, TEntity).TryResolve(Of TService)()
  name.vb: TryResolve(Of TService)()
- uid: FastEndpoints.RequestMapper`2.TryResolve(Type)
  commentId: M:FastEndpoints.RequestMapper`2.TryResolve(Type)
  id: TryResolve(Type)
  parent: FastEndpoints.RequestMapper`2
  langs:
  - csharp
  - vb
  name: TryResolve(Type)
  nameWithType: RequestMapper<TRequest, TEntity>.TryResolve(Type)
  fullName: FastEndpoints.RequestMapper<TRequest, TEntity>.TryResolve(Type)
  type: Method
  source:
    id: TryResolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Mapper.cs
    startLine: 110
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\ntry to resolve an instance for the given type from the dependency injection container. will return null if unresolvable.\n"
  example: []
  syntax:
    content: public object TryResolve(Type typeOfService)
    parameters:
    - id: typeOfService
      type: Type
      description: the type of the service to resolve
    return:
      type: System.Object
    content.vb: Public Function TryResolve(typeOfService As Type) As Object
  overload: FastEndpoints.RequestMapper`2.TryResolve*
  nameWithType.vb: RequestMapper(Of TRequest, TEntity).TryResolve(Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.RequestMapper(Of TRequest, TEntity).TryResolve(Type)
- uid: FastEndpoints.RequestMapper`2.Resolve``1
  commentId: M:FastEndpoints.RequestMapper`2.Resolve``1
  id: Resolve``1
  parent: FastEndpoints.RequestMapper`2
  langs:
  - csharp
  - vb
  name: Resolve<TService>()
  nameWithType: RequestMapper<TRequest, TEntity>.Resolve<TService>()
  fullName: FastEndpoints.RequestMapper<TRequest, TEntity>.Resolve<TService>()
  type: Method
  source:
    id: Resolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Mapper.cs
    startLine: 117
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nresolve an instance for the given type from the dependency injection container. will throw if unresolvable.\n"
  example: []
  syntax:
    content: >-
      public TService Resolve<TService>()

          where TService : class
    typeParameters:
    - id: TService
      description: the type of the service to resolve
    return:
      type: '{TService}'
    content.vb: Public Function Resolve(Of TService As Class) As TService
  overload: FastEndpoints.RequestMapper`2.Resolve*
  nameWithType.vb: RequestMapper(Of TRequest, TEntity).Resolve(Of TService)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.RequestMapper(Of TRequest, TEntity).Resolve(Of TService)()
  name.vb: Resolve(Of TService)()
- uid: FastEndpoints.RequestMapper`2.Resolve(Type)
  commentId: M:FastEndpoints.RequestMapper`2.Resolve(Type)
  id: Resolve(Type)
  parent: FastEndpoints.RequestMapper`2
  langs:
  - csharp
  - vb
  name: Resolve(Type)
  nameWithType: RequestMapper<TRequest, TEntity>.Resolve(Type)
  fullName: FastEndpoints.RequestMapper<TRequest, TEntity>.Resolve(Type)
  type: Method
  source:
    id: Resolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Mapper.cs
    startLine: 124
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nresolve an instance for the given type from the dependency injection container. will throw if unresolvable.\n"
  example: []
  syntax:
    content: public object Resolve(Type typeOfService)
    parameters:
    - id: typeOfService
      type: Type
      description: the type of the service to resolve
    return:
      type: System.Object
    content.vb: Public Function Resolve(typeOfService As Type) As Object
  overload: FastEndpoints.RequestMapper`2.Resolve*
  nameWithType.vb: RequestMapper(Of TRequest, TEntity).Resolve(Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.RequestMapper(Of TRequest, TEntity).Resolve(Type)
- uid: FastEndpoints.RequestMapper`2.CreateScope
  commentId: M:FastEndpoints.RequestMapper`2.CreateScope
  id: CreateScope
  parent: FastEndpoints.RequestMapper`2
  langs:
  - csharp
  - vb
  name: CreateScope()
  nameWithType: RequestMapper<TRequest, TEntity>.CreateScope()
  fullName: FastEndpoints.RequestMapper<TRequest, TEntity>.CreateScope()
  type: Method
  source:
    id: CreateScope
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Mapper.cs
    startLine: 135
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nif you&apos;d like to resolve scoped or transient services from the DI container, obtain a service scope from this method and dispose the scope when the work is complete.\n<p>\n<pre><code>using var scope = CreateScope();\nvar scopedService = scope.ServiceProvider.GetService(...);</code></pre>\n</p>\n"
  example: []
  syntax:
    content: public IServiceScope CreateScope()
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceScope
    content.vb: Public Function CreateScope As IServiceScope
  overload: FastEndpoints.RequestMapper`2.CreateScope*
  nameWithType.vb: RequestMapper(Of TRequest, TEntity).CreateScope()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.RequestMapper(Of TRequest, TEntity).CreateScope()
references:
- uid: FastEndpoints
  commentId: N:FastEndpoints
  name: FastEndpoints
  nameWithType: FastEndpoints
  fullName: FastEndpoints
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: FastEndpoints.IRequestMapper
  commentId: T:FastEndpoints.IRequestMapper
  parent: FastEndpoints
  name: IRequestMapper
  nameWithType: IRequestMapper
  fullName: FastEndpoints.IRequestMapper
- uid: FastEndpoints.IMapper
  commentId: T:FastEndpoints.IMapper
  parent: FastEndpoints
  name: IMapper
  nameWithType: IMapper
  fullName: FastEndpoints.IMapper
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FastEndpoints.RequestMapper`2.ToEntity*
  commentId: Overload:FastEndpoints.RequestMapper`2.ToEntity
  name: ToEntity
  nameWithType: RequestMapper<TRequest, TEntity>.ToEntity
  fullName: FastEndpoints.RequestMapper<TRequest, TEntity>.ToEntity
  nameWithType.vb: RequestMapper(Of TRequest, TEntity).ToEntity
  fullName.vb: FastEndpoints.RequestMapper(Of TRequest, TEntity).ToEntity
- uid: '{TRequest}'
  commentId: '!:TRequest'
  definition: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: FastEndpoints.RequestMapper`2.ToEntityAsync*
  commentId: Overload:FastEndpoints.RequestMapper`2.ToEntityAsync
  name: ToEntityAsync
  nameWithType: RequestMapper<TRequest, TEntity>.ToEntityAsync
  fullName: FastEndpoints.RequestMapper<TRequest, TEntity>.ToEntityAsync
  nameWithType.vb: RequestMapper(Of TRequest, TEntity).ToEntityAsync
  fullName.vb: FastEndpoints.RequestMapper(Of TRequest, TEntity).ToEntityAsync
- uid: Task{{TEntity}}
  commentId: '!:Task{`2}'
  definition: Task`1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints.RequestMapper`2.TryResolve*
  commentId: Overload:FastEndpoints.RequestMapper`2.TryResolve
  name: TryResolve
  nameWithType: RequestMapper<TRequest, TEntity>.TryResolve
  fullName: FastEndpoints.RequestMapper<TRequest, TEntity>.TryResolve
  nameWithType.vb: RequestMapper(Of TRequest, TEntity).TryResolve
  fullName.vb: FastEndpoints.RequestMapper(Of TRequest, TEntity).TryResolve
- uid: '{TService}'
  commentId: '!:TService'
  definition: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: FastEndpoints.RequestMapper`2.Resolve*
  commentId: Overload:FastEndpoints.RequestMapper`2.Resolve
  name: Resolve
  nameWithType: RequestMapper<TRequest, TEntity>.Resolve
  fullName: FastEndpoints.RequestMapper<TRequest, TEntity>.Resolve
  nameWithType.vb: RequestMapper(Of TRequest, TEntity).Resolve
  fullName.vb: FastEndpoints.RequestMapper(Of TRequest, TEntity).Resolve
- uid: FastEndpoints.RequestMapper`2.CreateScope*
  commentId: Overload:FastEndpoints.RequestMapper`2.CreateScope
  name: CreateScope
  nameWithType: RequestMapper<TRequest, TEntity>.CreateScope
  fullName: FastEndpoints.RequestMapper<TRequest, TEntity>.CreateScope
  nameWithType.vb: RequestMapper(Of TRequest, TEntity).CreateScope
  fullName.vb: FastEndpoints.RequestMapper(Of TRequest, TEntity).CreateScope
- uid: Microsoft.Extensions.DependencyInjection.IServiceScope
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceScope
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: IServiceScope
  nameWithType: IServiceScope
  fullName: Microsoft.Extensions.DependencyInjection.IServiceScope
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
