### YamlMime:ManagedReference
items:
- uid: FastEndpoints.Factory
  commentId: T:FastEndpoints.Factory
  id: Factory
  parent: FastEndpoints
  children:
  - FastEndpoints.Factory.Create``1(Action{Microsoft.AspNetCore.Http.DefaultHttpContext},System.Object[])
  - FastEndpoints.Factory.Create``1(Microsoft.AspNetCore.Http.DefaultHttpContext,System.Object[])
  - FastEndpoints.Factory.Create``1(System.Object[])
  langs:
  - csharp
  - vb
  name: Factory
  nameWithType: Factory
  fullName: FastEndpoints.Factory
  type: Class
  source:
    id: Factory
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Testing\Factory.cs
    startLine: 9
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\na factory for instantiaing endpoints for testing purposes\n"
  example: []
  syntax:
    content: public static class Factory
    content.vb: Public Module Factory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: FastEndpoints.Factory.Create``1(Microsoft.AspNetCore.Http.DefaultHttpContext,System.Object[])
  commentId: M:FastEndpoints.Factory.Create``1(Microsoft.AspNetCore.Http.DefaultHttpContext,System.Object[])
  id: Create``1(Microsoft.AspNetCore.Http.DefaultHttpContext,System.Object[])
  parent: FastEndpoints.Factory
  langs:
  - csharp
  - vb
  name: Create<TEndpoint>(DefaultHttpContext, Object[])
  nameWithType: Factory.Create<TEndpoint>(DefaultHttpContext, Object[])
  fullName: FastEndpoints.Factory.Create<TEndpoint>(Microsoft.AspNetCore.Http.DefaultHttpContext, System.Object[])
  type: Method
  source:
    id: Create
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Testing\Factory.cs
    startLine: 17
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nget an instance of an endpoint suitable for unit testing\n"
  example: []
  syntax:
    content: >-
      public static TEndpoint Create<TEndpoint>(DefaultHttpContext httpContext, params object[] dependencies)

          where TEndpoint : class, IEndpoint
    parameters:
    - id: httpContext
      type: Microsoft.AspNetCore.Http.DefaultHttpContext
      description: a default http context object
    - id: dependencies
      type: System.Object[]
      description: the dependencies of the endpoint if it has injected dependencies
    typeParameters:
    - id: TEndpoint
      description: the type of the endpoint to create an instance of
    return:
      type: '{TEndpoint}'
    content.vb: Public Shared Function Create(Of TEndpoint As {Class, IEndpoint})(httpContext As DefaultHttpContext, ParamArray dependencies As Object()) As TEndpoint
  overload: FastEndpoints.Factory.Create*
  nameWithType.vb: Factory.Create(Of TEndpoint)(DefaultHttpContext, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: FastEndpoints.Factory.Create(Of TEndpoint)(Microsoft.AspNetCore.Http.DefaultHttpContext, System.Object())
  name.vb: Create(Of TEndpoint)(DefaultHttpContext, Object())
- uid: FastEndpoints.Factory.Create``1(Action{Microsoft.AspNetCore.Http.DefaultHttpContext},System.Object[])
  commentId: M:FastEndpoints.Factory.Create``1(Action{Microsoft.AspNetCore.Http.DefaultHttpContext},System.Object[])
  id: Create``1(Action{Microsoft.AspNetCore.Http.DefaultHttpContext},System.Object[])
  parent: FastEndpoints.Factory
  langs:
  - csharp
  - vb
  name: Create<TEndpoint>(Action<DefaultHttpContext>, Object[])
  nameWithType: Factory.Create<TEndpoint>(Action<DefaultHttpContext>, Object[])
  fullName: FastEndpoints.Factory.Create<TEndpoint>(Action<Microsoft.AspNetCore.Http.DefaultHttpContext>, System.Object[])
  type: Method
  source:
    id: Create
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Testing\Factory.cs
    startLine: 44
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nget an instance of an endpoint suitable for unit testing\n"
  example: []
  syntax:
    content: >-
      public static TEndpoint Create<TEndpoint>(Action<DefaultHttpContext> httpContext, params object[] dependencies)

          where TEndpoint : class, IEndpoint
    parameters:
    - id: httpContext
      type: Action{Microsoft.AspNetCore.Http.DefaultHttpContext}
      description: an action for configuring the default http context object
    - id: dependencies
      type: System.Object[]
      description: the dependencies of the endpoint if it has any constructor injected arguments
    typeParameters:
    - id: TEndpoint
      description: the type of the endpoint to create an instance of
    return:
      type: '{TEndpoint}'
    content.vb: Public Shared Function Create(Of TEndpoint As {Class, IEndpoint})(httpContext As Action(Of DefaultHttpContext), ParamArray dependencies As Object()) As TEndpoint
  overload: FastEndpoints.Factory.Create*
  nameWithType.vb: Factory.Create(Of TEndpoint)(Action(Of DefaultHttpContext), Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: FastEndpoints.Factory.Create(Of TEndpoint)(Action(Of Microsoft.AspNetCore.Http.DefaultHttpContext), System.Object())
  name.vb: Create(Of TEndpoint)(Action(Of DefaultHttpContext), Object())
- uid: FastEndpoints.Factory.Create``1(System.Object[])
  commentId: M:FastEndpoints.Factory.Create``1(System.Object[])
  id: Create``1(System.Object[])
  parent: FastEndpoints.Factory
  langs:
  - csharp
  - vb
  name: Create<TEndpoint>(Object[])
  nameWithType: Factory.Create<TEndpoint>(Object[])
  fullName: FastEndpoints.Factory.Create<TEndpoint>(System.Object[])
  type: Method
  source:
    id: Create
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Testing\Factory.cs
    startLine: 56
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nget an instance of an endpoint suitable for unit testing\n"
  example: []
  syntax:
    content: >-
      public static TEndpoint Create<TEndpoint>(params object[] dependencies)

          where TEndpoint : class, IEndpoint
    parameters:
    - id: dependencies
      type: System.Object[]
      description: the dependencies of the endpoint if it has any constructor injected arguments
    typeParameters:
    - id: TEndpoint
      description: the type of the endpoint to create an instance of
    return:
      type: '{TEndpoint}'
    content.vb: Public Shared Function Create(Of TEndpoint As {Class, IEndpoint})(ParamArray dependencies As Object()) As TEndpoint
  overload: FastEndpoints.Factory.Create*
  nameWithType.vb: Factory.Create(Of TEndpoint)(Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: FastEndpoints.Factory.Create(Of TEndpoint)(System.Object())
  name.vb: Create(Of TEndpoint)(Object())
references:
- uid: FastEndpoints
  commentId: N:FastEndpoints
  name: FastEndpoints
  nameWithType: FastEndpoints
  fullName: FastEndpoints
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FastEndpoints.Factory.Create*
  commentId: Overload:FastEndpoints.Factory.Create
  name: Create
  nameWithType: Factory.Create
  fullName: FastEndpoints.Factory.Create
- uid: Microsoft.AspNetCore.Http.DefaultHttpContext
  commentId: T:Microsoft.AspNetCore.Http.DefaultHttpContext
  parent: Microsoft.AspNetCore.Http
  isExternal: true
  name: DefaultHttpContext
  nameWithType: DefaultHttpContext
  fullName: Microsoft.AspNetCore.Http.DefaultHttpContext
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '{TEndpoint}'
  commentId: '!:TEndpoint'
  definition: TEndpoint
  name: TEndpoint
  nameWithType: TEndpoint
  fullName: TEndpoint
- uid: Microsoft.AspNetCore.Http
  commentId: N:Microsoft.AspNetCore.Http
  isExternal: true
  name: Microsoft.AspNetCore.Http
  nameWithType: Microsoft.AspNetCore.Http
  fullName: Microsoft.AspNetCore.Http
- uid: TEndpoint
  name: TEndpoint
  nameWithType: TEndpoint
  fullName: TEndpoint
- uid: Action{Microsoft.AspNetCore.Http.DefaultHttpContext}
  commentId: '!:Action{Microsoft.AspNetCore.Http.DefaultHttpContext}'
  definition: Action`1
  name: Action<DefaultHttpContext>
  nameWithType: Action<DefaultHttpContext>
  fullName: Action<Microsoft.AspNetCore.Http.DefaultHttpContext>
  nameWithType.vb: Action(Of DefaultHttpContext)
  fullName.vb: Action(Of Microsoft.AspNetCore.Http.DefaultHttpContext)
  name.vb: Action(Of DefaultHttpContext)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Http.DefaultHttpContext
    name: DefaultHttpContext
    nameWithType: DefaultHttpContext
    fullName: Microsoft.AspNetCore.Http.DefaultHttpContext
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Http.DefaultHttpContext
    name: DefaultHttpContext
    nameWithType: DefaultHttpContext
    fullName: Microsoft.AspNetCore.Http.DefaultHttpContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
