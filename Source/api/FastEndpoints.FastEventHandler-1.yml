### YamlMime:ManagedReference
items:
- uid: FastEndpoints.FastEventHandler`1
  commentId: T:FastEndpoints.FastEventHandler`1
  id: FastEventHandler`1
  parent: FastEndpoints
  children:
  - FastEndpoints.FastEventHandler`1.HandleAsync(`0,CancellationToken)
  - FastEndpoints.FastEventHandler`1.PublishAsync``1(``0,FastEndpoints.Mode,CancellationToken)
  - FastEndpoints.FastEventHandler`1.Resolve(Type)
  - FastEndpoints.FastEventHandler`1.Resolve``1
  - FastEndpoints.FastEventHandler`1.TryResolve(Type)
  - FastEndpoints.FastEventHandler`1.TryResolve``1
  langs:
  - csharp
  - vb
  name: FastEventHandler<TEvent>
  nameWithType: FastEventHandler<TEvent>
  fullName: FastEndpoints.FastEventHandler<TEvent>
  type: Class
  source:
    id: FastEventHandler
    path: D:\SOURCE-CONTROL\FastEndpoints\Api-Reference\Source\src\Library\Events\EventHandler.cs
    startLine: 8
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nuse this base class to handle events published by the notification system\n"
  example: []
  syntax:
    content: 'public abstract class FastEventHandler<TEvent> : IEventHandler, IServiceResolver'
    typeParameters:
    - id: TEvent
      description: the type of the event to handle
    content.vb: >-
      Public MustInherit Class FastEventHandler(Of TEvent)

          Implements IEventHandler, IServiceResolver
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: FastEventHandler(Of TEvent)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: FastEndpoints.FastEventHandler(Of TEvent)
  name.vb: FastEventHandler(Of TEvent)
- uid: FastEndpoints.FastEventHandler`1.HandleAsync(`0,CancellationToken)
  commentId: M:FastEndpoints.FastEventHandler`1.HandleAsync(`0,CancellationToken)
  id: HandleAsync(`0,CancellationToken)
  parent: FastEndpoints.FastEventHandler`1
  langs:
  - csharp
  - vb
  name: HandleAsync(TEvent, CancellationToken)
  nameWithType: FastEventHandler<TEvent>.HandleAsync(TEvent, CancellationToken)
  fullName: FastEndpoints.FastEventHandler<TEvent>.HandleAsync(TEvent, CancellationToken)
  type: Method
  source:
    id: HandleAsync
    path: D:\SOURCE-CONTROL\FastEndpoints\Api-Reference\Source\src\Library\Events\EventHandler.cs
    startLine: 18
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nthis method will be called when an event of the specified type is published.\n"
  example: []
  syntax:
    content: public abstract Task HandleAsync(TEvent eventModel, CancellationToken ct)
    parameters:
    - id: eventModel
      type: '{TEvent}'
      description: the event model/dto received
    - id: ct
      type: CancellationToken
      description: an optional cancellation token
    return:
      type: Task
    content.vb: Public MustOverride Function HandleAsync(eventModel As TEvent, ct As CancellationToken) As Task
  overload: FastEndpoints.FastEventHandler`1.HandleAsync*
  nameWithType.vb: FastEventHandler(Of TEvent).HandleAsync(TEvent, CancellationToken)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: FastEndpoints.FastEventHandler(Of TEvent).HandleAsync(TEvent, CancellationToken)
- uid: FastEndpoints.FastEventHandler`1.PublishAsync``1(``0,FastEndpoints.Mode,CancellationToken)
  commentId: M:FastEndpoints.FastEventHandler`1.PublishAsync``1(``0,FastEndpoints.Mode,CancellationToken)
  id: PublishAsync``1(``0,FastEndpoints.Mode,CancellationToken)
  parent: FastEndpoints.FastEventHandler`1
  langs:
  - csharp
  - vb
  name: PublishAsync<TEventModel>(TEventModel, Mode, CancellationToken)
  nameWithType: FastEventHandler<TEvent>.PublishAsync<TEventModel>(TEventModel, Mode, CancellationToken)
  fullName: FastEndpoints.FastEventHandler<TEvent>.PublishAsync<TEventModel>(TEventModel, FastEndpoints.Mode, CancellationToken)
  type: Method
  source:
    id: PublishAsync
    path: D:\SOURCE-CONTROL\FastEndpoints\Api-Reference\Source\src\Library\Events\EventHandler.cs
    startLine: 30
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\npublish the given model/dto to all the subscribers of the event notification\n"
  example: []
  syntax:
    content: >-
      public Task PublishAsync<TEventModel>(TEventModel eventModel, Mode waitMode = Mode.WaitForAll, CancellationToken cancellation = null)

          where TEventModel : class
    parameters:
    - id: eventModel
      type: '{TEventModel}'
      description: the notification event model/dto to publish
    - id: waitMode
      type: FastEndpoints.Mode
      description: specify whether to wait for none, any or all of the subscribers to complete their work
    - id: cancellation
      type: CancellationToken
      description: an optional cancellation token
    typeParameters:
    - id: TEventModel
    return:
      type: Task
      description: >-
        a Task that matches the wait mode specified.

        Mode.WaitForNone returns an already completed Task (fire and forget).

        Mode.WaitForAny returns a Task that will complete when any of the subscribers complete their work.

        Mode.WaitForAll return a Task that will complete only when all of the subscribers complete their work.
    content.vb: Public Function PublishAsync(Of TEventModel As Class)(eventModel As TEventModel, waitMode As Mode = Mode.WaitForAll, cancellation As CancellationToken = Nothing) As Task
  overload: FastEndpoints.FastEventHandler`1.PublishAsync*
  nameWithType.vb: FastEventHandler(Of TEvent).PublishAsync(Of TEventModel)(TEventModel, Mode, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.FastEventHandler(Of TEvent).PublishAsync(Of TEventModel)(TEventModel, FastEndpoints.Mode, CancellationToken)
  name.vb: PublishAsync(Of TEventModel)(TEventModel, Mode, CancellationToken)
- uid: FastEndpoints.FastEventHandler`1.TryResolve``1
  commentId: M:FastEndpoints.FastEventHandler`1.TryResolve``1
  id: TryResolve``1
  parent: FastEndpoints.FastEventHandler`1
  langs:
  - csharp
  - vb
  name: TryResolve<TService>()
  nameWithType: FastEventHandler<TEvent>.TryResolve<TService>()
  fullName: FastEndpoints.FastEventHandler<TEvent>.TryResolve<TService>()
  type: Method
  source:
    id: TryResolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Api-Reference\Source\src\Library\Events\EventHandler.cs
    startLine: 37
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\ntry to resolve an instance for the given type from the dependency injection container. will return null if unresolvable.\n"
  example: []
  syntax:
    content: >-
      public TService TryResolve<TService>()

          where TService : class
    typeParameters:
    - id: TService
      description: the type of the service to resolve
    return:
      type: '{TService}'
    content.vb: Public Function TryResolve(Of TService As Class) As TService
  overload: FastEndpoints.FastEventHandler`1.TryResolve*
  nameWithType.vb: FastEventHandler(Of TEvent).TryResolve(Of TService)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.FastEventHandler(Of TEvent).TryResolve(Of TService)()
  name.vb: TryResolve(Of TService)()
- uid: FastEndpoints.FastEventHandler`1.TryResolve(Type)
  commentId: M:FastEndpoints.FastEventHandler`1.TryResolve(Type)
  id: TryResolve(Type)
  parent: FastEndpoints.FastEventHandler`1
  langs:
  - csharp
  - vb
  name: TryResolve(Type)
  nameWithType: FastEventHandler<TEvent>.TryResolve(Type)
  fullName: FastEndpoints.FastEventHandler<TEvent>.TryResolve(Type)
  type: Method
  source:
    id: TryResolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Api-Reference\Source\src\Library\Events\EventHandler.cs
    startLine: 43
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\ntry to resolve an instance for the given type from the dependency injection container. will return null if unresolvable.\n"
  example: []
  syntax:
    content: public object TryResolve(Type typeOfService)
    parameters:
    - id: typeOfService
      type: Type
      description: the type of the service to resolve
    return:
      type: System.Object
    content.vb: Public Function TryResolve(typeOfService As Type) As Object
  overload: FastEndpoints.FastEventHandler`1.TryResolve*
  nameWithType.vb: FastEventHandler(Of TEvent).TryResolve(Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.FastEventHandler(Of TEvent).TryResolve(Type)
- uid: FastEndpoints.FastEventHandler`1.Resolve``1
  commentId: M:FastEndpoints.FastEventHandler`1.Resolve``1
  id: Resolve``1
  parent: FastEndpoints.FastEventHandler`1
  langs:
  - csharp
  - vb
  name: Resolve<TService>()
  nameWithType: FastEventHandler<TEvent>.Resolve<TService>()
  fullName: FastEndpoints.FastEventHandler<TEvent>.Resolve<TService>()
  type: Method
  source:
    id: Resolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Api-Reference\Source\src\Library\Events\EventHandler.cs
    startLine: 50
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nresolve an instance for the given type from the dependency injection container. will throw if unresolvable.\n"
  example: []
  syntax:
    content: >-
      public TService Resolve<TService>()

          where TService : class
    typeParameters:
    - id: TService
      description: the type of the service to resolve
    return:
      type: '{TService}'
    content.vb: Public Function Resolve(Of TService As Class) As TService
  overload: FastEndpoints.FastEventHandler`1.Resolve*
  nameWithType.vb: FastEventHandler(Of TEvent).Resolve(Of TService)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.FastEventHandler(Of TEvent).Resolve(Of TService)()
  name.vb: Resolve(Of TService)()
- uid: FastEndpoints.FastEventHandler`1.Resolve(Type)
  commentId: M:FastEndpoints.FastEventHandler`1.Resolve(Type)
  id: Resolve(Type)
  parent: FastEndpoints.FastEventHandler`1
  langs:
  - csharp
  - vb
  name: Resolve(Type)
  nameWithType: FastEventHandler<TEvent>.Resolve(Type)
  fullName: FastEndpoints.FastEventHandler<TEvent>.Resolve(Type)
  type: Method
  source:
    id: Resolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Api-Reference\Source\src\Library\Events\EventHandler.cs
    startLine: 57
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nresolve an instance for the given type from the dependency injection container. will throw if unresolvable.\n"
  example: []
  syntax:
    content: public object Resolve(Type typeOfService)
    parameters:
    - id: typeOfService
      type: Type
      description: the type of the service to resolve
    return:
      type: System.Object
    content.vb: Public Function Resolve(typeOfService As Type) As Object
  overload: FastEndpoints.FastEventHandler`1.Resolve*
  nameWithType.vb: FastEventHandler(Of TEvent).Resolve(Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.FastEventHandler(Of TEvent).Resolve(Type)
references:
- uid: FastEndpoints
  commentId: N:FastEndpoints
  name: FastEndpoints
  nameWithType: FastEndpoints
  fullName: FastEndpoints
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FastEndpoints.FastEventHandler`1.HandleAsync*
  commentId: Overload:FastEndpoints.FastEventHandler`1.HandleAsync
  name: HandleAsync
  nameWithType: FastEventHandler<TEvent>.HandleAsync
  fullName: FastEndpoints.FastEventHandler<TEvent>.HandleAsync
  nameWithType.vb: FastEventHandler(Of TEvent).HandleAsync
  fullName.vb: FastEndpoints.FastEventHandler(Of TEvent).HandleAsync
- uid: '{TEvent}'
  commentId: '!:TEvent'
  definition: TEvent
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: TEvent
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: FastEndpoints.FastEventHandler`1.PublishAsync*
  commentId: Overload:FastEndpoints.FastEventHandler`1.PublishAsync
  name: PublishAsync
  nameWithType: FastEventHandler<TEvent>.PublishAsync
  fullName: FastEndpoints.FastEventHandler<TEvent>.PublishAsync
  nameWithType.vb: FastEventHandler(Of TEvent).PublishAsync
  fullName.vb: FastEndpoints.FastEventHandler(Of TEvent).PublishAsync
- uid: '{TEventModel}'
  commentId: '!:TEventModel'
  definition: TEventModel
  name: TEventModel
  nameWithType: TEventModel
  fullName: TEventModel
- uid: FastEndpoints.Mode
  commentId: T:FastEndpoints.Mode
  parent: FastEndpoints
  name: Mode
  nameWithType: Mode
  fullName: FastEndpoints.Mode
- uid: TEventModel
  commentId: '!:TEventModel'
  name: TEventModel
  nameWithType: TEventModel
  fullName: TEventModel
- uid: FastEndpoints.FastEventHandler`1.TryResolve*
  commentId: Overload:FastEndpoints.FastEventHandler`1.TryResolve
  name: TryResolve
  nameWithType: FastEventHandler<TEvent>.TryResolve
  fullName: FastEndpoints.FastEventHandler<TEvent>.TryResolve
  nameWithType.vb: FastEventHandler(Of TEvent).TryResolve
  fullName.vb: FastEndpoints.FastEventHandler(Of TEvent).TryResolve
- uid: '{TService}'
  commentId: '!:TService'
  definition: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: FastEndpoints.FastEventHandler`1.Resolve*
  commentId: Overload:FastEndpoints.FastEventHandler`1.Resolve
  name: Resolve
  nameWithType: FastEventHandler<TEvent>.Resolve
  fullName: FastEndpoints.FastEventHandler<TEvent>.Resolve
  nameWithType.vb: FastEventHandler(Of TEvent).Resolve
  fullName.vb: FastEndpoints.FastEventHandler(Of TEvent).Resolve
