### YamlMime:ManagedReference
items:
- uid: FastEndpoints.CommandHandlerBase`1
  commentId: T:FastEndpoints.CommandHandlerBase`1
  id: CommandHandlerBase`1
  parent: FastEndpoints
  children:
  - FastEndpoints.CommandHandlerBase`1.AddError(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.String,FluentValidation.Severity)
  - FastEndpoints.CommandHandlerBase`1.AddError(System.String,System.String,FluentValidation.Severity)
  - FastEndpoints.CommandHandlerBase`1.ThrowError(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)
  - FastEndpoints.CommandHandlerBase`1.ThrowError(System.String)
  - FastEndpoints.CommandHandlerBase`1.ThrowIfAnyErrors
  - FastEndpoints.CommandHandlerBase`1.ValidationFailed
  - FastEndpoints.CommandHandlerBase`1.ValidationFailures
  langs:
  - csharp
  - vb
  name: CommandHandlerBase<TCommand>
  nameWithType: CommandHandlerBase<TCommand>
  fullName: FastEndpoints.CommandHandlerBase<TCommand>
  type: Class
  source:
    id: CommandHandlerBase
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Messaging\Commands\CommandHandler.cs
    startLine: 12
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nthe base class from which all <xref href=\"FastEndpoints.CommandHandler%601\" data-throw-if-not-resolved=\"false\"></xref> classes inherit from\n"
  example: []
  syntax:
    content: public abstract class CommandHandlerBase<TCommand>
    typeParameters:
    - id: TCommand
      description: the type of the command
    content.vb: Public MustInherit Class CommandHandlerBase(Of TCommand)
  inheritance:
  - System.Object
  derivedClasses:
  - FastEndpoints.CommandHandler`1
  - FastEndpoints.CommandHandler`2
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: CommandHandlerBase(Of TCommand)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: FastEndpoints.CommandHandlerBase(Of TCommand)
  name.vb: CommandHandlerBase(Of TCommand)
- uid: FastEndpoints.CommandHandlerBase`1.ValidationFailures
  commentId: P:FastEndpoints.CommandHandlerBase`1.ValidationFailures
  id: ValidationFailures
  parent: FastEndpoints.CommandHandlerBase`1
  langs:
  - csharp
  - vb
  name: ValidationFailures
  nameWithType: CommandHandlerBase<TCommand>.ValidationFailures
  fullName: FastEndpoints.CommandHandlerBase<TCommand>.ValidationFailures
  type: Property
  source:
    id: ValidationFailures
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Messaging\Commands\CommandHandler.cs
    startLine: 15
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  example: []
  syntax:
    content: public List<ValidationFailure> ValidationFailures { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{FluentValidation.Results.ValidationFailure}
    content.vb: Public ReadOnly Property ValidationFailures As List(Of ValidationFailure)
  overload: FastEndpoints.CommandHandlerBase`1.ValidationFailures*
  nameWithType.vb: CommandHandlerBase(Of TCommand).ValidationFailures
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: FastEndpoints.CommandHandlerBase(Of TCommand).ValidationFailures
- uid: FastEndpoints.CommandHandlerBase`1.ValidationFailed
  commentId: P:FastEndpoints.CommandHandlerBase`1.ValidationFailed
  id: ValidationFailed
  parent: FastEndpoints.CommandHandlerBase`1
  langs:
  - csharp
  - vb
  name: ValidationFailed
  nameWithType: CommandHandlerBase<TCommand>.ValidationFailed
  fullName: FastEndpoints.CommandHandlerBase<TCommand>.ValidationFailed
  type: Property
  source:
    id: ValidationFailed
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Messaging\Commands\CommandHandler.cs
    startLine: 21
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  example: []
  syntax:
    content: public bool ValidationFailed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ValidationFailed As Boolean
  overload: FastEndpoints.CommandHandlerBase`1.ValidationFailed*
  nameWithType.vb: CommandHandlerBase(Of TCommand).ValidationFailed
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: FastEndpoints.CommandHandlerBase(Of TCommand).ValidationFailed
- uid: FastEndpoints.CommandHandlerBase`1.AddError(System.String,System.String,FluentValidation.Severity)
  commentId: M:FastEndpoints.CommandHandlerBase`1.AddError(System.String,System.String,FluentValidation.Severity)
  id: AddError(System.String,System.String,FluentValidation.Severity)
  parent: FastEndpoints.CommandHandlerBase`1
  langs:
  - csharp
  - vb
  name: AddError(String, String, Severity)
  nameWithType: CommandHandlerBase<TCommand>.AddError(String, String, Severity)
  fullName: FastEndpoints.CommandHandlerBase<TCommand>.AddError(System.String, System.String, FluentValidation.Severity)
  type: Method
  source:
    id: AddError
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Messaging\Commands\CommandHandler.cs
    startLine: 24
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  example: []
  syntax:
    content: public void AddError(string message, string errorCode = null, Severity severity = Severity.Error)
    parameters:
    - id: message
      type: System.String
    - id: errorCode
      type: System.String
    - id: severity
      type: FluentValidation.Severity
    content.vb: Public Sub AddError(message As String, errorCode As String = Nothing, severity As Severity = Severity.Error)
  overload: FastEndpoints.CommandHandlerBase`1.AddError*
  nameWithType.vb: CommandHandlerBase(Of TCommand).AddError(String, String, Severity)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.CommandHandlerBase(Of TCommand).AddError(System.String, System.String, FluentValidation.Severity)
- uid: FastEndpoints.CommandHandlerBase`1.AddError(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.String,FluentValidation.Severity)
  commentId: M:FastEndpoints.CommandHandlerBase`1.AddError(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.String,FluentValidation.Severity)
  id: AddError(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.String,FluentValidation.Severity)
  parent: FastEndpoints.CommandHandlerBase`1
  langs:
  - csharp
  - vb
  name: AddError(Expression<Func<TCommand, Object>>, String, String, Severity)
  nameWithType: CommandHandlerBase<TCommand>.AddError(Expression<Func<TCommand, Object>>, String, String, Severity)
  fullName: FastEndpoints.CommandHandlerBase<TCommand>.AddError(System.Linq.Expressions.Expression<System.Func<TCommand, System.Object>>, System.String, System.String, FluentValidation.Severity)
  type: Method
  source:
    id: AddError
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Messaging\Commands\CommandHandler.cs
    startLine: 28
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  example: []
  syntax:
    content: public void AddError(Expression<Func<TCommand, object>> property, string errorMessage, string errorCode = null, Severity severity = Severity.Error)
    parameters:
    - id: property
      type: System.Linq.Expressions.Expression{System.Func{{TCommand},System.Object}}
    - id: errorMessage
      type: System.String
    - id: errorCode
      type: System.String
    - id: severity
      type: FluentValidation.Severity
    content.vb: Public Sub AddError(property As Expression(Of Func(Of TCommand, Object)), errorMessage As String, errorCode As String = Nothing, severity As Severity = Severity.Error)
  overload: FastEndpoints.CommandHandlerBase`1.AddError*
  nameWithType.vb: CommandHandlerBase(Of TCommand).AddError(Expression(Of Func(Of TCommand, Object)), String, String, Severity)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.CommandHandlerBase(Of TCommand).AddError(System.Linq.Expressions.Expression(Of System.Func(Of TCommand, System.Object)), System.String, System.String, FluentValidation.Severity)
  name.vb: AddError(Expression(Of Func(Of TCommand, Object)), String, String, Severity)
- uid: FastEndpoints.CommandHandlerBase`1.ThrowError(System.String)
  commentId: M:FastEndpoints.CommandHandlerBase`1.ThrowError(System.String)
  id: ThrowError(System.String)
  parent: FastEndpoints.CommandHandlerBase`1
  langs:
  - csharp
  - vb
  name: ThrowError(String)
  nameWithType: CommandHandlerBase<TCommand>.ThrowError(String)
  fullName: FastEndpoints.CommandHandlerBase<TCommand>.ThrowError(System.String)
  type: Method
  source:
    id: ThrowError
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Messaging\Commands\CommandHandler.cs
    startLine: 32
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  example: []
  syntax:
    content: public void ThrowError(string message)
    parameters:
    - id: message
      type: System.String
    content.vb: Public Sub ThrowError(message As String)
  overload: FastEndpoints.CommandHandlerBase`1.ThrowError*
  nameWithType.vb: CommandHandlerBase(Of TCommand).ThrowError(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.CommandHandlerBase(Of TCommand).ThrowError(System.String)
- uid: FastEndpoints.CommandHandlerBase`1.ThrowError(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)
  commentId: M:FastEndpoints.CommandHandlerBase`1.ThrowError(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)
  id: ThrowError(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)
  parent: FastEndpoints.CommandHandlerBase`1
  langs:
  - csharp
  - vb
  name: ThrowError(Expression<Func<TCommand, Object>>, String)
  nameWithType: CommandHandlerBase<TCommand>.ThrowError(Expression<Func<TCommand, Object>>, String)
  fullName: FastEndpoints.CommandHandlerBase<TCommand>.ThrowError(System.Linq.Expressions.Expression<System.Func<TCommand, System.Object>>, System.String)
  type: Method
  source:
    id: ThrowError
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Messaging\Commands\CommandHandler.cs
    startLine: 37
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  example: []
  syntax:
    content: public void ThrowError(Expression<Func<TCommand, object>> property, string errorMessage)
    parameters:
    - id: property
      type: System.Linq.Expressions.Expression{System.Func{{TCommand},System.Object}}
    - id: errorMessage
      type: System.String
    content.vb: Public Sub ThrowError(property As Expression(Of Func(Of TCommand, Object)), errorMessage As String)
  overload: FastEndpoints.CommandHandlerBase`1.ThrowError*
  nameWithType.vb: CommandHandlerBase(Of TCommand).ThrowError(Expression(Of Func(Of TCommand, Object)), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.CommandHandlerBase(Of TCommand).ThrowError(System.Linq.Expressions.Expression(Of System.Func(Of TCommand, System.Object)), System.String)
  name.vb: ThrowError(Expression(Of Func(Of TCommand, Object)), String)
- uid: FastEndpoints.CommandHandlerBase`1.ThrowIfAnyErrors
  commentId: M:FastEndpoints.CommandHandlerBase`1.ThrowIfAnyErrors
  id: ThrowIfAnyErrors
  parent: FastEndpoints.CommandHandlerBase`1
  langs:
  - csharp
  - vb
  name: ThrowIfAnyErrors()
  nameWithType: CommandHandlerBase<TCommand>.ThrowIfAnyErrors()
  fullName: FastEndpoints.CommandHandlerBase<TCommand>.ThrowIfAnyErrors()
  type: Method
  source:
    id: ThrowIfAnyErrors
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Messaging\Commands\CommandHandler.cs
    startLine: 42
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  example: []
  syntax:
    content: public void ThrowIfAnyErrors()
    content.vb: Public Sub ThrowIfAnyErrors
  overload: FastEndpoints.CommandHandlerBase`1.ThrowIfAnyErrors*
  nameWithType.vb: CommandHandlerBase(Of TCommand).ThrowIfAnyErrors()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.CommandHandlerBase(Of TCommand).ThrowIfAnyErrors()
references:
- uid: FastEndpoints.CommandHandler`1
  commentId: T:FastEndpoints.CommandHandler`1
  name: CommandHandler<TCommand>
  nameWithType: CommandHandler<TCommand>
  fullName: FastEndpoints.CommandHandler<TCommand>
  nameWithType.vb: CommandHandler(Of TCommand)
  fullName.vb: FastEndpoints.CommandHandler(Of TCommand)
  name.vb: CommandHandler(Of TCommand)
  spec.csharp:
  - uid: FastEndpoints.CommandHandler`1
    name: CommandHandler
    nameWithType: CommandHandler
    fullName: FastEndpoints.CommandHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FastEndpoints.CommandHandler`1
    name: CommandHandler
    nameWithType: CommandHandler
    fullName: FastEndpoints.CommandHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints
  commentId: N:FastEndpoints
  name: FastEndpoints
  nameWithType: FastEndpoints
  fullName: FastEndpoints
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FastEndpoints.CommandHandlerBase`1.ValidationFailures*
  commentId: Overload:FastEndpoints.CommandHandlerBase`1.ValidationFailures
  name: ValidationFailures
  nameWithType: CommandHandlerBase<TCommand>.ValidationFailures
  fullName: FastEndpoints.CommandHandlerBase<TCommand>.ValidationFailures
  nameWithType.vb: CommandHandlerBase(Of TCommand).ValidationFailures
  fullName.vb: FastEndpoints.CommandHandlerBase(Of TCommand).ValidationFailures
- uid: System.Collections.Generic.List{FluentValidation.Results.ValidationFailure}
  commentId: T:System.Collections.Generic.List{FluentValidation.Results.ValidationFailure}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ValidationFailure>
  nameWithType: List<ValidationFailure>
  fullName: System.Collections.Generic.List<FluentValidation.Results.ValidationFailure>
  nameWithType.vb: List(Of ValidationFailure)
  fullName.vb: System.Collections.Generic.List(Of FluentValidation.Results.ValidationFailure)
  name.vb: List(Of ValidationFailure)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FluentValidation.Results.ValidationFailure
    name: ValidationFailure
    nameWithType: ValidationFailure
    fullName: FluentValidation.Results.ValidationFailure
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FluentValidation.Results.ValidationFailure
    name: ValidationFailure
    nameWithType: ValidationFailure
    fullName: FluentValidation.Results.ValidationFailure
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: FastEndpoints.CommandHandlerBase`1.ValidationFailed*
  commentId: Overload:FastEndpoints.CommandHandlerBase`1.ValidationFailed
  name: ValidationFailed
  nameWithType: CommandHandlerBase<TCommand>.ValidationFailed
  fullName: FastEndpoints.CommandHandlerBase<TCommand>.ValidationFailed
  nameWithType.vb: CommandHandlerBase(Of TCommand).ValidationFailed
  fullName.vb: FastEndpoints.CommandHandlerBase(Of TCommand).ValidationFailed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: FastEndpoints.CommandHandlerBase`1.AddError*
  commentId: Overload:FastEndpoints.CommandHandlerBase`1.AddError
  name: AddError
  nameWithType: CommandHandlerBase<TCommand>.AddError
  fullName: FastEndpoints.CommandHandlerBase<TCommand>.AddError
  nameWithType.vb: CommandHandlerBase(Of TCommand).AddError
  fullName.vb: FastEndpoints.CommandHandlerBase(Of TCommand).AddError
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: FluentValidation.Severity
  commentId: T:FluentValidation.Severity
  parent: FluentValidation
  isExternal: true
  name: Severity
  nameWithType: Severity
  fullName: FluentValidation.Severity
- uid: FluentValidation
  commentId: N:FluentValidation
  isExternal: true
  name: FluentValidation
  nameWithType: FluentValidation
  fullName: FluentValidation
- uid: System.Linq.Expressions.Expression{System.Func{{TCommand},System.Object}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Object}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TCommand, Object>>
  nameWithType: Expression<Func<TCommand, Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<TCommand, System.Object>>
  nameWithType.vb: Expression(Of Func(Of TCommand, Object))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TCommand, System.Object))
  name.vb: Expression(Of Func(Of TCommand, Object))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: FastEndpoints.CommandHandlerBase`1.ThrowError*
  commentId: Overload:FastEndpoints.CommandHandlerBase`1.ThrowError
  name: ThrowError
  nameWithType: CommandHandlerBase<TCommand>.ThrowError
  fullName: FastEndpoints.CommandHandlerBase<TCommand>.ThrowError
  nameWithType.vb: CommandHandlerBase(Of TCommand).ThrowError
  fullName.vb: FastEndpoints.CommandHandlerBase(Of TCommand).ThrowError
- uid: FastEndpoints.CommandHandlerBase`1.ThrowIfAnyErrors*
  commentId: Overload:FastEndpoints.CommandHandlerBase`1.ThrowIfAnyErrors
  name: ThrowIfAnyErrors
  nameWithType: CommandHandlerBase<TCommand>.ThrowIfAnyErrors
  fullName: FastEndpoints.CommandHandlerBase<TCommand>.ThrowIfAnyErrors
  nameWithType.vb: CommandHandlerBase(Of TCommand).ThrowIfAnyErrors
  fullName.vb: FastEndpoints.CommandHandlerBase(Of TCommand).ThrowIfAnyErrors
