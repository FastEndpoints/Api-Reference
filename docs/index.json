{
  "api/FastEndpoints.Apply.html": {
    "href": "api/FastEndpoints.Apply.html",
    "title": "Enum Apply | FastEndpoints",
    "keywords": "Enum Apply Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public enum Apply Fields Name Description ToThisEndpoint"
  },
  "api/FastEndpoints.AspVersioning.Extensions.html": {
    "href": "api/FastEndpoints.AspVersioning.Extensions.html",
    "title": "Class Extensions | FastEndpoints",
    "keywords": "Class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.AspVersioning Assembly: FastEndpoints.AspVersioning.dll Syntax public static class Extensions Methods AddVersioning(IServiceCollection, Action<ApiVersioningOptions>?, Action<ApiExplorerOptions>?) add Asp.Versioning.Http versioning support to the middleware pipeline Declaration public static IServiceCollection AddVersioning(this IServiceCollection services, Action<ApiVersioningOptions>? versioningOptions = null, Action<ApiExplorerOptions>? apiExplorerOptions = null) Parameters Type Name Description IServiceCollection services Action<ApiVersioningOptions> versioningOptions action for configuring the verioning options Action<ApiExplorerOptions> apiExplorerOptions action for configuring the api explorer options Returns Type Description IServiceCollection ApiVersion(AspNetCoreOpenApiDocumentGeneratorSettings, ApiVersion) specify the version of this swagger document. Declaration public static void ApiVersion(this AspNetCoreOpenApiDocumentGeneratorSettings s, ApiVersion apiVersion) Parameters Type Name Description AspNetCoreOpenApiDocumentGeneratorSettings s ApiVersion apiVersion only endpoints belonging to the specified version will show up for this swagger doc WithVersionSet(IEndpointConventionBuilder, string) map the current endpoint to an api version set by specifying the api name Declaration public static IEndpointConventionBuilder WithVersionSet(this IEndpointConventionBuilder b, string apiName) Parameters Type Name Description IEndpointConventionBuilder b string apiName the name of the api (swagger tag) this endpoint belongs to Returns Type Description IEndpointConventionBuilder Exceptions Type Condition InvalidOperationException thrown when the specified api set is not found in the VersionSets container"
  },
  "api/FastEndpoints.AspVersioning.VersionSets.html": {
    "href": "api/FastEndpoints.AspVersioning.VersionSets.html",
    "title": "Class VersionSets | FastEndpoints",
    "keywords": "Class VersionSets a container for globally holding the Asp.Versioning.Builder.ApiVersionSet instances for the application Inheritance object VersionSets Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.AspVersioning Assembly: FastEndpoints.AspVersioning.dll Syntax public static class VersionSets Methods CreateApi(string, Action<ApiVersionSetBuilder>) creates a api/group/swagger-tag with an associated version set Declaration public static void CreateApi(string apiName, Action<ApiVersionSetBuilder> builder) Parameters Type Name Description string apiName the name of the api (swagger tag) Action<ApiVersionSetBuilder> builder version set builder action"
  },
  "api/FastEndpoints.AspVersioning.html": {
    "href": "api/FastEndpoints.AspVersioning.html",
    "title": "Namespace FastEndpoints.AspVersioning | FastEndpoints",
    "keywords": "Namespace FastEndpoints.AspVersioning Classes Extensions VersionSets a container for globally holding the Asp.Versioning.Builder.ApiVersionSet instances for the application"
  },
  "api/FastEndpoints.BaseEndpoint.html": {
    "href": "api/FastEndpoints.BaseEndpoint.html",
    "title": "Class BaseEndpoint | FastEndpoints",
    "keywords": "Class BaseEndpoint the base class all fast endpoints inherit from Inheritance object BaseEndpoint Endpoint<TRequest, TResponse> Implements IEndpoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class BaseEndpoint : IEndpoint Properties Definition gets the endpoint definition which contains all the configuration info for the endpoint Declaration public EndpointDefinition Definition { get; } Property Value Type Description EndpointDefinition HttpContext the http context of the current request Declaration public HttpContext HttpContext { get; } Property Value Type Description HttpContext ValidationFailures validation failures collection for the endpoint Declaration public List<ValidationFailure> ValidationFailures { get; } Property Value Type Description List<ValidationFailure> Methods Configure() use this method to configure how the endpoint should be listening to incoming requests. HINT: it is only called once during endpoint auto registration during app startup. Declaration public virtual void Configure() GetAclHash(string) Declaration protected static string GetAclHash(string input) Parameters Type Name Description string input Returns Type Description string Group<TEndpointGroup>() Declaration protected virtual void Group<TEndpointGroup>() where TEndpointGroup : Group, new() Type Parameters Name Description TEndpointGroup Verbs(params string[]) Declaration public virtual void Verbs(params string[] methods) Parameters Type Name Description string[] methods Implements IEndpoint"
  },
  "api/FastEndpoints.BindFromAttribute.html": {
    "href": "api/FastEndpoints.BindFromAttribute.html",
    "title": "Class BindFromAttribute | FastEndpoints",
    "keywords": "Class BindFromAttribute use this attribute to specify the name of route param, query param, or form field if it's different from the name of the property being bound to. Inheritance object Attribute BindFromAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public sealed class BindFromAttribute : Attribute Constructors BindFromAttribute(string) use this attribute to specify the name of route param, query param, or form field if it's different from the name of the property being bound to. Declaration public BindFromAttribute(string name) Parameters Type Name Description string name the name to use for binding Properties Name the name of the incoming query param, route param or form field Declaration public string Name { get; set; } Property Value Type Description string"
  },
  "api/FastEndpoints.BinderContext.html": {
    "href": "api/FastEndpoints.BinderContext.html",
    "title": "Struct BinderContext | FastEndpoints",
    "keywords": "Struct BinderContext binder context supplied to custom request binders. Implements IServiceResolverBase Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public readonly struct BinderContext : IServiceResolverBase Constructors BinderContext(HttpContext, List<ValidationFailure>, JsonSerializerContext?, bool) constructor of the binder context Declaration public BinderContext(HttpContext httpContext, List<ValidationFailure> validationFailures, JsonSerializerContext? jsonSerializerContext, bool dontAutoBindForms) Parameters Type Name Description HttpContext httpContext the http context of the current request List<ValidationFailure> validationFailures the validation failure collection of the endpoint JsonSerializerContext jsonSerializerContext json serializer context of the endpoint if applicable bool dontAutoBindForms whether or not to enable auto binding of form data Properties DontAutoBindForms set 'true' to disable auto binding of form data which enables uploading and reading of large files without buffering to memory/disk. you can access the multipart sections for reading via the FormFileSectionsAsync() method. Declaration public bool DontAutoBindForms { get; init; } Property Value Type Description bool HttpContext the http context of the current request Declaration public HttpContext HttpContext { get; init; } Property Value Type Description HttpContext JsonSerializerContext if the current endpoint is configured with a json serializer context, it will be provided to the custom request binder with this property. Declaration public JsonSerializerContext? JsonSerializerContext { get; init; } Property Value Type Description JsonSerializerContext SerializerOptions the configured json serializer options of the app, which was specified at app startup. Declaration public JsonSerializerOptions SerializerOptions { get; } Property Value Type Description JsonSerializerOptions ValidationFailures a list of validation failures for the endpoint. you can add your own validation failures for properties of the request dto using this property. Declaration public List<ValidationFailure> ValidationFailures { get; init; } Property Value Type Description List<ValidationFailure> Methods CreateScope() if you'd like to resolve scoped or transient services from the MS DI container, obtain a service scope from this method and dispose the scope when the work is complete. using var scope = CreateScope(); var scopedService = scope.Resolve<MyService>(); Declaration public IServiceScope CreateScope() Returns Type Description IServiceScope Resolve(Type) resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public object Resolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved Resolve<TService>() resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public TService Resolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved TryResolve(Type) try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public object? TryResolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object TryResolve<TService>() try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public TService? TryResolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Implements IServiceResolverBase"
  },
  "api/FastEndpoints.BindingOptions.html": {
    "href": "api/FastEndpoints.BindingOptions.html",
    "title": "Class BindingOptions | FastEndpoints",
    "keywords": "Class BindingOptions request binding options Inheritance object BindingOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class BindingOptions Properties FailureMessage a function used to construct the failure message when a supplied value cannot be succesfully bound to a dto property during model binding. NOTE: this only applies to non-STJ operations. for customizing error messages of STJ binding failures, specify a JsonExceptionTransformer func. the following arguments are supplied to the function. Type: the type of the property which failed to bind string: the name of the property which failed to bind StringValues: the value that was attempted which resulted in the failure use these input parameters and construct your own error message string and return it from the function. Declaration public Func<Type, string, StringValues, string> FailureMessage { set; } Property Value Type Description Func<Type, string, StringValues, string> JsonExceptionTransformer by default, all STJ JsonExceptions thrown during deserialization are automatically caught and transformed using this function. if you'd like to disable this behavior, simply set this property to null or specify a function to construct a FluentValidation.Results.ValidationFailure when STJ throws an exception due to invalid json input. NOTE: this only applies to STJ based operations. for customizing error messages of non-STJ binding failures, specify a FailureMessage func. Declaration public Func<JsonException, ValidationFailure>? JsonExceptionTransformer { set; } Property Value Type Description Func<JsonException, ValidationFailure> Modifier an optional action to be run after the endpoint level request binding has occured. it is intended as a way to perform common model binding logic that applies to all endpoints/requests. the action is passed in the following arguments: object: the request dto instance Type: the type of the request dto BinderContext: the request binding context CancellationToken: a cancellation token WARNING: be mindful of the performance cost of using reflection to modify the request dto object Declaration public Action<object, Type, BinderContext, CancellationToken>? Modifier { set; } Property Value Type Description Action<object, Type, BinderContext, CancellationToken> Methods ValueParserFor(Type, Func<object?, ParseResult>) add a custom value parser function for any given type which the default model binder will use to parse values when model binding request dto properties from query/route/forms/headers/claims. this is an alternative approach to adding a TryParse() function to your types that need model binding support from the abovementioned binding sources. once you register a parser function here for a type, any TryParse() method on the type will not be used for parsing. also, these parser functions do not apply to JSON deserialization done by STJ and can be considered the equivalent to registering a custom converter in STJ when it comes to query/route/forms/headers/claims binding sources. Declaration public bool ValueParserFor(Type type, Func<object?, ParseResult> parser) Parameters Type Name Description Type type the type of the class which this parser function will target Func<object, ParseResult> parser a function that takes in a nullable object and returns a ParseResult as the output. app.UseFastEndpoints(c => { c.Binding.ValueParserFor(typeof(Guid), MyParsers.GuidParser); }); public static class MyParsers { public static ParseResult GuidParser(object? input) { Guid result; bool success = Guid.TryParse(input?.ToString(), out result); return new(success, result); } } Returns Type Description bool ValueParserFor<T>(Func<object?, ParseResult>) add a custom value parser function for any given type which the default model binder will use to parse values when model binding request dto properties from query/route/forms/headers/claims. this is an alternative approach to adding a TryParse() function to your types that need model binding support from the abovementioned binding sources. once you register a parser function here for a type, any TryParse() method on the type will not be used for parsing. also, these parser functions do not apply to JSON deserialization done by STJ and can be considered the equivalent to registering a custom converter in STJ when it comes to query/route/forms/headers/claims binding sources. Declaration public bool ValueParserFor<T>(Func<object?, ParseResult> parser) Parameters Type Name Description Func<object, ParseResult> parser a function that takes in a nullable object and returns a ParseResult as the output. app.UseFastEndpoints(c => { c.Binding.ValueParserFor<Guid>(MyParsers.GuidParser); }); public static class MyParsers { public static ParseResult GuidParser(object? input) { Guid result; bool success = Guid.TryParse(input?.ToString(), out result); return new(success, result); } } Returns Type Description bool Type Parameters Name Description T the type of the class which this parser function will target ValueParserWhen(Func<PropertyInfo, bool>, Func<object?, Type, ParseResult>) override value parsers for request dto properties that match a predicate. WARNING: might lead to weird/untraceable behavior. use at own risk! Declaration public void ValueParserWhen(Func<PropertyInfo, bool> propertyMatcher, Func<object?, Type, ParseResult> parser) Parameters Type Name Description Func<PropertyInfo, bool> propertyMatcher a predicate for qualifying a property Func<object, Type, ParseResult> parser the value parser for the matched property type"
  },
  "api/FastEndpoints.BindingSource.html": {
    "href": "api/FastEndpoints.BindingSource.html",
    "title": "Enum BindingSource | FastEndpoints",
    "keywords": "Enum BindingSource enum for choosing which binding sources the default request binder should use Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax [Flags] public enum BindingSource Fields Name Description FormFields Headers JsonBody Permissions QueryParams RouteValues UserClaims"
  },
  "api/FastEndpoints.ClientGen.Extensions.html": {
    "href": "api/FastEndpoints.ClientGen.Extensions.html",
    "title": "Class Extensions | FastEndpoints",
    "keywords": "Class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.ClientGen Assembly: FastEndpoints.ClientGen.dll Syntax public static class Extensions Methods ExportSwaggerJsonAndExitAsync(WebApplication, string, string) exports swagger.json files to disk if the application is run with the commandline argument --exportswaggerjson true and exits the program with a zero exit code. HINT: make sure to place the call straight after app.UseFastEndpoints() Declaration public static Task ExportSwaggerJsonAndExitAsync(this WebApplication app, string documentName, string destinationPath) Parameters Type Name Description WebApplication app string documentName the name of the swagger document to generate the clients for string destinationPath the folder path (without file name) where the client files will be save to Returns Type Description Task GenerateCSharpClient(AspNetCoreOpenApiDocumentGeneratorSettings, Action<CSharpClientGeneratorSettings>, string, ClientGeneratorOutputType) generates a c# api client and saves it to disk at the specified location. Declaration public static void GenerateCSharpClient(this AspNetCoreOpenApiDocumentGeneratorSettings gen, Action<CSharpClientGeneratorSettings> settings, string destination, ClientGeneratorOutputType outputType = ClientGeneratorOutputType.Full) Parameters Type Name Description AspNetCoreOpenApiDocumentGeneratorSettings gen Action<CSharpClientGeneratorSettings> settings client generator settings string destination the output file path including file name ClientGeneratorOutputType outputType the type of the generated client file GenerateClientsAndExitAsync(WebApplication, string, string, Action<CSharpClientGeneratorSettings>?, Action<TypeScriptClientGeneratorSettings>?) generates c# and/or typescript clients and saves them to disk if the application is run with the commandline argument --generateclients true and exits the program with a zero exit code. HINT: make sure to place the call straight after app.UseFastEndpoints() Declaration public static Task GenerateClientsAndExitAsync(this WebApplication app, string documentName, string destinationPath, Action<CSharpClientGeneratorSettings>? csSettings, Action<TypeScriptClientGeneratorSettings>? tsSettings) Parameters Type Name Description WebApplication app string documentName the name of the swagger document to generate the clients for string destinationPath the folder path (without file name) where the client files will be save to Action<CSharpClientGeneratorSettings> csSettings client generator settings for c# Action<TypeScriptClientGeneratorSettings> tsSettings client generator settings for typescript Returns Type Description Task GenerateTypeScriptClient(AspNetCoreOpenApiDocumentGeneratorSettings, Action<TypeScriptClientGeneratorSettings>, string, ClientGeneratorOutputType) generates a typescript api client and saves it to disk at the specified location. Declaration public static void GenerateTypeScriptClient(this AspNetCoreOpenApiDocumentGeneratorSettings gen, Action<TypeScriptClientGeneratorSettings> settings, string destination, ClientGeneratorOutputType outputType = ClientGeneratorOutputType.Full) Parameters Type Name Description AspNetCoreOpenApiDocumentGeneratorSettings gen Action<TypeScriptClientGeneratorSettings> settings client generator settings string destination the output file path including file name ClientGeneratorOutputType outputType the type of the generated client file MapCSharpClientEndpoint(IEndpointRouteBuilder, string, string, Action<CSharpClientGeneratorSettings>?) registers an endpoint that provides a download of the c# api client file for a given swagger document. Declaration public static IEndpointRouteBuilder MapCSharpClientEndpoint(this IEndpointRouteBuilder builder, string route, string documentName, Action<CSharpClientGeneratorSettings>? settings = null) Parameters Type Name Description IEndpointRouteBuilder builder string route the route to register string documentName the name of the document to generate the client for Action<CSharpClientGeneratorSettings> settings c# client generator settings Returns Type Description IEndpointRouteBuilder MapTypeScriptClientEndpoint(IEndpointRouteBuilder, string, string, Action<TypeScriptClientGeneratorSettings>?) registers an endpoint that provides a download of the typescript api client file for a given swagger document. Declaration public static IEndpointRouteBuilder MapTypeScriptClientEndpoint(this IEndpointRouteBuilder builder, string route, string documentName, Action<TypeScriptClientGeneratorSettings>? settings = null) Parameters Type Name Description IEndpointRouteBuilder builder string route the route to register string documentName the name of the document to generate the client for Action<TypeScriptClientGeneratorSettings> settings typescript client generator settings Returns Type Description IEndpointRouteBuilder"
  },
  "api/FastEndpoints.ClientGen.Runner.html": {
    "href": "api/FastEndpoints.ClientGen.Runner.html",
    "title": "Class Runner | FastEndpoints",
    "keywords": "Class Runner Inheritance object Runner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.ClientGen Assembly: FastEndpoints.ClientGen.dll Syntax public class Runner"
  },
  "api/FastEndpoints.ClientGen.html": {
    "href": "api/FastEndpoints.ClientGen.html",
    "title": "Namespace FastEndpoints.ClientGen | FastEndpoints",
    "keywords": "Namespace FastEndpoints.ClientGen Classes Extensions Runner"
  },
  "api/FastEndpoints.CommandExtensions.html": {
    "href": "api/FastEndpoints.CommandExtensions.html",
    "title": "Class CommandExtensions | FastEndpoints",
    "keywords": "Class CommandExtensions Inheritance object CommandExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public static class CommandExtensions Methods ExecuteAsync<TResult>(ICommand<TResult>, CancellationToken) executes the command and returns a result Declaration public static Task<TResult> ExecuteAsync<TResult>(this ICommand<TResult> command, CancellationToken ct = default) Parameters Type Name Description ICommand<TResult> command the command to execute CancellationToken ct optional cancellation token Returns Type Description Task<TResult> Type Parameters Name Description TResult the type of the returned result Exceptions Type Condition InvalidOperationException thrown when a handler for the command cannot be instantiated ExecuteAsync<TCommand>(TCommand, CancellationToken) executes the command that does not return a result Declaration public static Task ExecuteAsync<TCommand>(this TCommand command, CancellationToken ct = default) where TCommand : ICommand Parameters Type Name Description TCommand command the command to execute CancellationToken ct optional cancellation token Returns Type Description Task Type Parameters Name Description TCommand Exceptions Type Condition InvalidOperationException thrown when a handler for the command cannot be instantiated RegisterForTesting<TCommand>(ICommandHandler<TCommand>) registers a fake command handler for unit testing purposes Declaration public static void RegisterForTesting<TCommand>(this ICommandHandler<TCommand> handler) where TCommand : ICommand Parameters Type Name Description ICommandHandler<TCommand> handler a fake handler instance Type Parameters Name Description TCommand type of the command RegisterForTesting<TCommand, TResult>(ICommandHandler<TCommand, TResult>) registers a fake command handler for unit testing purposes Declaration public static void RegisterForTesting<TCommand, TResult>(this ICommandHandler<TCommand, TResult> handler) where TCommand : ICommand<TResult> Parameters Type Name Description ICommandHandler<TCommand, TResult> handler a fake handler instance Type Parameters Name Description TCommand type of the command TResult type of the result being returned by the handler"
  },
  "api/FastEndpoints.CommandHandler-1.html": {
    "href": "api/FastEndpoints.CommandHandler-1.html",
    "title": "Class CommandHandler<TCommand> | FastEndpoints",
    "keywords": "Class CommandHandler<TCommand> inherit this base class if you'd like to manipulate validation state of the calling endpoint from within the command handler. Inheritance object ValidationContext ValidationContext<TCommand> CommandHandlerBase<TCommand> CommandHandler<TCommand> Implements ICommandHandler<TCommand> ICommandHandler Inherited Members ValidationContext<TCommand>.Instance ValidationContext<TCommand>.AddError(Expression<Func<TCommand, object>>, string, string, Severity) ValidationContext<TCommand>.ThrowError(Expression<Func<TCommand, object>>, string, int?) ValidationContext.ValidationFailures ValidationContext.ValidationFailed ValidationContext.AddError(ValidationFailure) ValidationContext.AddError(string, string, Severity) ValidationContext.ThrowError(ValidationFailure, int?) ValidationContext.ThrowError(string, int?) ValidationContext.ThrowIfAnyErrors(int?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class CommandHandler<TCommand> : CommandHandlerBase<TCommand>, ICommandHandler<TCommand>, ICommandHandler where TCommand : ICommand Type Parameters Name Description TCommand the type of the command that will be handled by this command handler Methods ExecuteAsync(TCommand, CancellationToken) accepts a command and does not return a result. Declaration public abstract Task ExecuteAsync(TCommand command, CancellationToken ct = default) Parameters Type Name Description TCommand command the input command object CancellationToken ct optional cancellation token Returns Type Description Task Implements ICommandHandler<TCommand> ICommandHandler Extension Methods CommandExtensions.RegisterForTesting<TCommand>(ICommandHandler<TCommand>)"
  },
  "api/FastEndpoints.CommandHandler-2.html": {
    "href": "api/FastEndpoints.CommandHandler-2.html",
    "title": "Class CommandHandler<TCommand, TResult> | FastEndpoints",
    "keywords": "Class CommandHandler<TCommand, TResult> inherit this base class if you'd like to manipulate validation state of the calling endpoint from within the command handler. Inheritance object ValidationContext ValidationContext<TCommand> CommandHandlerBase<TCommand> CommandHandler<TCommand, TResult> Implements ICommandHandler<TCommand, TResult> ICommandHandler Inherited Members ValidationContext<TCommand>.Instance ValidationContext<TCommand>.AddError(Expression<Func<TCommand, object>>, string, string, Severity) ValidationContext<TCommand>.ThrowError(Expression<Func<TCommand, object>>, string, int?) ValidationContext.ValidationFailures ValidationContext.ValidationFailed ValidationContext.AddError(ValidationFailure) ValidationContext.AddError(string, string, Severity) ValidationContext.ThrowError(ValidationFailure, int?) ValidationContext.ThrowError(string, int?) ValidationContext.ThrowIfAnyErrors(int?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class CommandHandler<TCommand, TResult> : CommandHandlerBase<TCommand>, ICommandHandler<TCommand, TResult>, ICommandHandler where TCommand : ICommand<TResult> Type Parameters Name Description TCommand the type of the command that will be handled by this command handler TResult the type of the result that will be returned by this command handler Methods ExecuteAsync(TCommand, CancellationToken) receives a command and returns a result. Declaration public abstract Task<TResult> ExecuteAsync(TCommand command, CancellationToken ct = default) Parameters Type Name Description TCommand command the input command object CancellationToken ct optional cancellation token Returns Type Description Task<TResult> Implements ICommandHandler<TCommand, TResult> ICommandHandler Extension Methods CommandExtensions.RegisterForTesting<TCommand, TResult>(ICommandHandler<TCommand, TResult>)"
  },
  "api/FastEndpoints.CommandHandlerBase-1.html": {
    "href": "api/FastEndpoints.CommandHandlerBase-1.html",
    "title": "Class CommandHandlerBase<TCommand> | FastEndpoints",
    "keywords": "Class CommandHandlerBase<TCommand> the base class from which all CommandHandler<TCommand> classes inherit from Inheritance object ValidationContext ValidationContext<TCommand> CommandHandlerBase<TCommand> CommandHandler<TCommand> CommandHandler<TCommand, TResult> Inherited Members ValidationContext<TCommand>.Instance ValidationContext<TCommand>.AddError(Expression<Func<TCommand, object>>, string, string, Severity) ValidationContext<TCommand>.ThrowError(Expression<Func<TCommand, object>>, string, int?) ValidationContext.ValidationFailures ValidationContext.ValidationFailed ValidationContext.AddError(ValidationFailure) ValidationContext.AddError(string, string, Severity) ValidationContext.ThrowError(ValidationFailure, int?) ValidationContext.ThrowError(string, int?) ValidationContext.ThrowIfAnyErrors(int?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class CommandHandlerBase<TCommand> : ValidationContext<TCommand> Type Parameters Name Description TCommand the type of the command"
  },
  "api/FastEndpoints.Config.html": {
    "href": "api/FastEndpoints.Config.html",
    "title": "Class Config | FastEndpoints",
    "keywords": "Class Config global configuration settings for FastEndpoints Inheritance object Config Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class Config Properties Binding request binding settings Declaration public BindingOptions Binding { get; } Property Value Type Description BindingOptions Endpoints endpoint discovery & registration settings Declaration public EndpointOptions Endpoints { get; } Property Value Type Description EndpointOptions Errors error response customization settings Declaration public ErrorOptions Errors { get; } Property Value Type Description ErrorOptions Security security related settings Declaration public SecurityOptions Security { get; } Property Value Type Description SecurityOptions Serializer settings for customizing serialization behavior Declaration public SerializerOptions Serializer { get; } Property Value Type Description SerializerOptions Throttle endpoint throttling/ rate limiting settings Declaration public ThrottleOptions Throttle { get; } Property Value Type Description ThrottleOptions Validation endpoint validation settings Declaration public ValidationOptions Validation { get; } Property Value Type Description ValidationOptions Versioning endpoint versioning settings Declaration public VersioningOptions Versioning { get; } Property Value Type Description VersioningOptions"
  },
  "api/FastEndpoints.DontInjectAttribute.html": {
    "href": "api/FastEndpoints.DontInjectAttribute.html",
    "title": "Class DontInjectAttribute | FastEndpoints",
    "keywords": "Class DontInjectAttribute endpoint properties marked with this attribute will disable property injection for that property Inheritance object Attribute DontInjectAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public sealed class DontInjectAttribute : Attribute"
  },
  "api/FastEndpoints.DontRegisterAttribute.html": {
    "href": "api/FastEndpoints.DontRegisterAttribute.html",
    "title": "Class DontRegisterAttribute | FastEndpoints",
    "keywords": "Class DontRegisterAttribute classes marked with this attribute will be skipped during assembly scanning for auto registration Inheritance object Attribute DontRegisterAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public sealed class DontRegisterAttribute : Attribute"
  },
  "api/FastEndpoints.EmptyObject.html": {
    "href": "api/FastEndpoints.EmptyObject.html",
    "title": "Class EmptyObject | FastEndpoints",
    "keywords": "Class EmptyObject Inheritance object EmptyObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public sealed class EmptyObject"
  },
  "api/FastEndpoints.EmptyRequest.html": {
    "href": "api/FastEndpoints.EmptyRequest.html",
    "title": "Struct EmptyRequest | FastEndpoints",
    "keywords": "Struct EmptyRequest a request dto that doesn't have any properties Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public struct EmptyRequest Constructors EmptyRequest() Declaration public EmptyRequest()"
  },
  "api/FastEndpoints.EmptyResponse.html": {
    "href": "api/FastEndpoints.EmptyResponse.html",
    "title": "Struct EmptyResponse | FastEndpoints",
    "keywords": "Struct EmptyResponse a response dto that doesn't have any properties Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public struct EmptyResponse"
  },
  "api/FastEndpoints.Endpoint-1.html": {
    "href": "api/FastEndpoints.Endpoint-1.html",
    "title": "Class Endpoint<TRequest> | FastEndpoints",
    "keywords": "Class Endpoint<TRequest> use this base class for defining endpoints that only use a request dto and don't use a response dto. Inheritance object BaseEndpoint Endpoint<TRequest, object> Endpoint<TRequest> Implements IEndpoint IEventBus IServiceResolverBase Inherited Members Endpoint<TRequest, object>.HandleAsync(TRequest, CancellationToken) Endpoint<TRequest, object>.ExecuteAsync(TRequest, CancellationToken) Endpoint<TRequest, object>.TryResolve<TService>() Endpoint<TRequest, object>.TryResolve(Type) Endpoint<TRequest, object>.Resolve<TService>() Endpoint<TRequest, object>.Resolve(Type) Endpoint<TRequest, object>.CreateScope() Endpoint<TRequest, object>.Route<T>(string, bool) Endpoint<TRequest, object>.Query<T>(string, bool) Endpoint<TRequest, object>.FormFileSectionsAsync(CancellationToken) Endpoint<TRequest, object>.PublishAsync<TEvent>(TEvent, Mode, CancellationToken) Endpoint<TRequest, object>.CreateTokenWith<TService>(string, Action<UserPrivileges>) Endpoint<TRequest, object>.ProcessorState<TState>() Endpoint<TRequest, object>.OnBeforeValidate(TRequest) Endpoint<TRequest, object>.OnBeforeValidateAsync(TRequest, CancellationToken) Endpoint<TRequest, object>.OnAfterValidate(TRequest) Endpoint<TRequest, object>.OnAfterValidateAsync(TRequest, CancellationToken) Endpoint<TRequest, object>.OnBeforeHandle(TRequest) Endpoint<TRequest, object>.OnBeforeHandleAsync(TRequest, CancellationToken) Endpoint<TRequest, object>.OnAfterHandle(TRequest, object) Endpoint<TRequest, object>.OnAfterHandleAsync(TRequest, object, CancellationToken) Endpoint<TRequest, object>.OnValidationFailed() Endpoint<TRequest, object>.OnValidationFailedAsync(CancellationToken) Endpoint<TRequest, object>.User Endpoint<TRequest, object>.Response Endpoint<TRequest, object>.Config Endpoint<TRequest, object>.Env Endpoint<TRequest, object>.Logger Endpoint<TRequest, object>.BaseURL Endpoint<TRequest, object>.HttpMethod Endpoint<TRequest, object>.Form Endpoint<TRequest, object>.Files Endpoint<TRequest, object>.ResponseStarted Endpoint<TRequest, object>.SendAsync(object, int, CancellationToken) Endpoint<TRequest, object>.SendResultAsync(IResult) Endpoint<TRequest, object>.SendInterceptedAsync(object, int, CancellationToken) Endpoint<TRequest, object>.SendCreatedAtAsync<TEndpoint>(object, object, Http?, int?, bool, CancellationToken) Endpoint<TRequest, object>.SendCreatedAtAsync(string, object, object, bool, CancellationToken) Endpoint<TRequest, object>.SendStringAsync(string, int, string, CancellationToken) Endpoint<TRequest, object>.SendOkAsync(object, CancellationToken) Endpoint<TRequest, object>.SendOkAsync(CancellationToken) Endpoint<TRequest, object>.SendErrorsAsync(int, CancellationToken) Endpoint<TRequest, object>.SendNoContentAsync(CancellationToken) Endpoint<TRequest, object>.SendNotFoundAsync(CancellationToken) Endpoint<TRequest, object>.SendUnauthorizedAsync(CancellationToken) Endpoint<TRequest, object>.SendForbiddenAsync(CancellationToken) Endpoint<TRequest, object>.SendRedirectAsync(string, bool, CancellationToken) Endpoint<TRequest, object>.SendHeadersAsync(Action<IHeaderDictionary>, int, CancellationToken) Endpoint<TRequest, object>.SendBytesAsync(byte[], string, string, DateTimeOffset?, bool, CancellationToken) Endpoint<TRequest, object>.SendFileAsync(FileInfo, string, DateTimeOffset?, bool, CancellationToken) Endpoint<TRequest, object>.SendStreamAsync(Stream, string, long?, string, DateTimeOffset?, bool, CancellationToken) Endpoint<TRequest, object>.SendEventStreamAsync<T>(string, IAsyncEnumerable<T>, CancellationToken) Endpoint<TRequest, object>.SendEmptyJsonObject(CancellationToken) Endpoint<TRequest, object>.AccessControl(string, Apply?, params string[]) Endpoint<TRequest, object>.AccessControl(string, params string[]) Endpoint<TRequest, object>.AllowAnonymous(params Http[]) Endpoint<TRequest, object>.AllowAnonymous(string[]) Endpoint<TRequest, object>.AllowFileUploads(bool) Endpoint<TRequest, object>.AllowFormData(bool) Endpoint<TRequest, object>.AuthSchemes(params string[]) Endpoint<TRequest, object>.Claims(params string[]) Endpoint<TRequest, object>.ClaimsAll(params string[]) Endpoint<TRequest, object>.Delete(params string[]) Endpoint<TRequest, object>.Delete(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, object>.Description(Action<RouteHandlerBuilder>, bool) Endpoint<TRequest, object>.DontAutoTag() Endpoint<TRequest, object>.DontCatchExceptions() Endpoint<TRequest, object>.DontThrowIfValidationFails() Endpoint<TRequest, object>.EnableAntiforgery() Endpoint<TRequest, object>.Get(params string[]) Endpoint<TRequest, object>.Get(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, object>.Group<TEndpointGroup>() Endpoint<TRequest, object>.Head(params string[]) Endpoint<TRequest, object>.Head(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, object>.Options(Action<RouteHandlerBuilder>) Endpoint<TRequest, object>.Patch(params string[]) Endpoint<TRequest, object>.Patch(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, object>.Permissions(params string[]) Endpoint<TRequest, object>.PermissionsAll(params string[]) Endpoint<TRequest, object>.Policy(Action<AuthorizationPolicyBuilder>) Endpoint<TRequest, object>.Policies(params string[]) Endpoint<TRequest, object>.Post(params string[]) Endpoint<TRequest, object>.Post(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, object>.PostProcessor<TPostProcessor>() Endpoint<TRequest, object>.PostProcessors(params IPostProcessor<TRequest, object>[]) Endpoint<TRequest, object>.PreProcessor<TPreProcessor>() Endpoint<TRequest, object>.PreProcessors(params IPreProcessor<TRequest>[]) Endpoint<TRequest, object>.Put(params string[]) Endpoint<TRequest, object>.Put(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, object>.RequestBinder(IRequestBinder<TRequest>) Endpoint<TRequest, object>.ResponseCache(int, ResponseCacheLocation, bool, string, string[]) Endpoint<TRequest, object>.ResponseInterceptor(IResponseInterceptor) Endpoint<TRequest, object>.Roles(params string[]) Endpoint<TRequest, object>.RoutePrefixOverride(string) Endpoint<TRequest, object>.Routes(params string[]) Endpoint<TRequest, object>.SerializerContext<TContext>(TContext) Endpoint<TRequest, object>.SerializerContext<TContext>() Endpoint<TRequest, object>.Summary(Action<EndpointSummary>) Endpoint<TRequest, object>.Summary(Action<EndpointSummary<TRequest>>) Endpoint<TRequest, object>.Summary(EndpointSummary) Endpoint<TRequest, object>.Tags(params string[]) Endpoint<TRequest, object>.Throttle(int, double, string) Endpoint<TRequest, object>.Validator<TValidator>() Endpoint<TRequest, object>.Verbs(params Http[]) Endpoint<TRequest, object>.Verbs(params string[]) Endpoint<TRequest, object>.Version(int, int?) Endpoint<TRequest, object>.ValidationFailed Endpoint<TRequest, object>.AddError(ValidationFailure) Endpoint<TRequest, object>.AddError(string, string, Severity) Endpoint<TRequest, object>.AddError(Expression<Func<TRequest, object>>, string, string, Severity) Endpoint<TRequest, object>.ThrowError(ValidationFailure, int?) Endpoint<TRequest, object>.ThrowError(string, int?) Endpoint<TRequest, object>.ThrowError(Expression<Func<TRequest, object>>, string, int?) Endpoint<TRequest, object>.ThrowIfAnyErrors(int?) BaseEndpoint.Definition BaseEndpoint.HttpContext BaseEndpoint.ValidationFailures BaseEndpoint.Configure() BaseEndpoint.Verbs(params string[]) BaseEndpoint.Group<TEndpointGroup>() BaseEndpoint.GetAclHash(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class Endpoint<TRequest> : Endpoint<TRequest, object?>, IEndpoint, IEventBus, IServiceResolverBase where TRequest : notnull Type Parameters Name Description TRequest the type of the request dto Implements IEndpoint IEventBus IServiceResolverBase"
  },
  "api/FastEndpoints.Endpoint-2.html": {
    "href": "api/FastEndpoints.Endpoint-2.html",
    "title": "Class Endpoint<TRequest, TResponse> | FastEndpoints",
    "keywords": "Class Endpoint<TRequest, TResponse> use this base class for defining endpoints that use both request and response dtos. Inheritance object BaseEndpoint Endpoint<TRequest, TResponse> EndpointWithMapper<TRequest, TMapper> EndpointWithMapping<TRequest, TResponse, TEntity> EndpointWithoutRequest EndpointWithoutRequest<TResponse> Endpoint<TRequest> Endpoint<TRequest, TResponse, TMapper> RefreshTokenService<TRequest, TResponse> Implements IEndpoint IEventBus IServiceResolverBase Inherited Members BaseEndpoint.Definition BaseEndpoint.HttpContext BaseEndpoint.ValidationFailures BaseEndpoint.Configure() BaseEndpoint.GetAclHash(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class Endpoint<TRequest, TResponse> : BaseEndpoint, IEndpoint, IEventBus, IServiceResolverBase where TRequest : notnull Type Parameters Name Description TRequest the type of the request dto TResponse the type of the response dto Properties BaseURL the base url of the current request Declaration public string BaseURL { get; } Property Value Type Description string Config gives access to the configuration. if you need to access this property from within the endpoint Configure() method, make sure to pass in the config to .AddFastEndpoints(config: builder.Configuration) Declaration public IConfiguration Config { get; } Property Value Type Description IConfiguration Env gives access to the hosting environment Declaration public IWebHostEnvironment Env { get; } Property Value Type Description IWebHostEnvironment Files the files sent with the request. only populated when content-type is 'multipart/form-data' Declaration public IFormFileCollection Files { get; } Property Value Type Description IFormFileCollection Form the form sent with the request. only populated if content-type is 'application/x-www-form-urlencoded' or 'multipart/form-data' Declaration public IFormCollection Form { get; } Property Value Type Description IFormCollection HttpMethod the http method of the current request Declaration public Http HttpMethod { get; } Property Value Type Description Http Logger the logger for the current endpoint type Declaration public ILogger Logger { get; } Property Value Type Description ILogger Response the response that is sent to the client. Declaration public TResponse Response { get; set; } Property Value Type Description TResponse ResponseStarted get or set whether the response has started. you'd only use this if you're writing to the response stream by yourself. Declaration public bool ResponseStarted { get; set; } Property Value Type Description bool User the current user principal Declaration public ClaimsPrincipal User { get; } Property Value Type Description ClaimsPrincipal ValidationFailed indicates if there are any validation failures for the current request Declaration public bool ValidationFailed { get; } Property Value Type Description bool Methods AccessControl(string, Apply?, params string[]) if the 'FastEndpoints.Generator' package is used, calling this method will generate a static class called '{assembly-name}.Auth.Allow' with a const field with this keyName that has a 3 digit auto generated value (permission code). doesn't do anything without the source generator package installed. Declaration protected void AccessControl(string keyName, Apply? behavior = null, params string[] groupNames) Parameters Type Name Description string keyName the name of the constant field to generate Apply? behavior specify whether to add the generated permission code as a permission requirement for this endpoint. this does the same thing as calling \"Permissions(...)\" method. i.e. if this optional argument is set to ToThisEndpoint, then a user principal must posses this permission code in order to be allowed access to this endpoint. you don't need to explicitly specify it via a Permissions(...) call, when setting the behavior. string[] groupNames optionally specify one or more groups (sets of permissions) this keyName belongs to. for example if you want to generate a const/key called \"Edit_Stock_Item\" and want to assign it to an \"Admin\" group as well as a \"Manager\" group, you'd specify it with this parameter. The generated const/key is accessible via \"Allow.Admin.Edit_Stock_Item\" as well as \"Allow.Manager.Edit_Stock_Item\" AccessControl(string, params string[]) if the 'FastEndpoints.Generator' package is used, calling this method will generate a static class called '{assembly-name}.Auth.Allow' with a const field with this keyName that has a 3 digit auto generated value (permission code). doesn't do anything without the source generator package installed. Declaration protected void AccessControl(string keyName, params string[] groupNames) Parameters Type Name Description string keyName the name of the constant field to generate string[] groupNames optionally specify one or more groups (sets of permissions) this keyName belongs to. for example if you want to generate a const/key called \"Edit_Stock_Item\" and want to assign it to an \"Admin\" group as well as a \"Manager\" group, you'd specify it with this parameter. The generated const/key is accessible via \"Allow.Admin.Edit_Stock_Item\" as well as \"Allow.Manager.Edit_Stock_Item\" AddError(ValidationFailure) add a FluentValidation.Results.ValidationFailure to the current collection of validation failures of the endpoint Declaration public void AddError(ValidationFailure failure) Parameters Type Name Description ValidationFailure failure the validation failure to add AddError(Expression<Func<TRequest, object?>>, string, string?, Severity) adds an error message for the specified property of the request dto Declaration public void AddError(Expression<Func<TRequest, object?>> property, string errorMessage, string? errorCode = null, Severity severity = Severity.Error) Parameters Type Name Description Expression<Func<TRequest, object>> property the property to add the error message for string errorMessage the error message string errorCode the error code associated with the error Severity severity the severity of the error AddError(string, string?, Severity) adds a \"GeneralError\" to the current list of validation failures Declaration public void AddError(string message, string? errorCode = null, Severity severity = Severity.Error) Parameters Type Name Description string message the error message string errorCode the error code associated with the error Severity severity the severity of the error AllowAnonymous(params Http[]) allow unauthenticated requests to this endpoint. optionally specify a set of verbs to allow unauthenticated access with. i.e. if the endpoint is listening to POST, PUT & PATCH and you specify AllowAnonymous(Http.POST), then only PUT & PATCH will require authentication. Declaration protected void AllowAnonymous(params Http[] verbs) Parameters Type Name Description Http[] verbs AllowAnonymous(string[]) allow unauthenticated requests to this endpoint for a specified set of http verbs. i.e. if the endpoint is listening to POST, PUT & PATCH and you specify AllowAnonymous(Http.POST), then only PUT & PATCH will require authentication. Declaration protected void AllowAnonymous(string[] verbs) Parameters Type Name Description string[] verbs AllowFileUploads(bool) enable file uploads with multipart/form-data content type Declaration protected void AllowFileUploads(bool dontAutoBindFormData = false) Parameters Type Name Description bool dontAutoBindFormData set 'true' to disable auto binding of form data which enables uploading and reading of large files without buffering to memory/disk. you can access the multipart sections for reading via the FormFileSectionsAsync() method. AllowFormData(bool) enable form-data submissions Declaration protected void AllowFormData(bool urlEncoded = false) Parameters Type Name Description bool urlEncoded set to true to accept application/x-www-form-urlencoded content instead of multipart/form-data content. AuthSchemes(params string[]) specify which authentication schemes to use for authenticating requests to this endpoint Declaration protected void AuthSchemes(params string[] authSchemeNames) Parameters Type Name Description string[] authSchemeNames the authentication scheme names Claims(params string[]) allows access if the claims principal has ANY of the given claim types Declaration protected void Claims(params string[] claimTypes) Parameters Type Name Description string[] claimTypes the claim types ClaimsAll(params string[]) allows access if the claims principal has ALL of the given claim types Declaration protected void ClaimsAll(params string[] claimTypes) Parameters Type Name Description string[] claimTypes the claim types CreateScope() if you'd like to resolve scoped or transient services from the MS DI container, obtain a service scope from this method and dispose the scope when the work is complete. using var scope = CreateScope(); var scopedService = scope.Resolve<MyService>(); Declaration public IServiceScope CreateScope() Returns Type Description IServiceScope CreateTokenWith<TService>(string, Action<UserPrivileges>) create the access/refresh token pair response with a given refresh-token service. Declaration protected Task<TResponse> CreateTokenWith<TService>(string userId, Action<UserPrivileges> userPrivileges) where TService : IRefreshTokenService<TResponse> Parameters Type Name Description string userId the id of the user for which the tokens will be generated for Action<UserPrivileges> userPrivileges the user priviledges to be embeded in the jwt such as roles/claims/permissions Returns Type Description Task<TResponse> Type Parameters Name Description TService the type of the token service Delete(string, Expression<Func<TRequest, object>>) specify a DELETE route pattern using a replacement expression. Declaration protected void Delete(string routePattern, Expression<Func<TRequest, object>> members) Parameters Type Name Description string routePattern the words prefixed with @ will be replaced by property names of the new expression in the order they are specified. the replacement words do not have to match the request dto property names. /invoice/{@id}/soft-delete Expression<Func<TRequest, object>> members r => new { r.InvoiceID } Delete(params string[]) specify to listen for DELETE requests on one or more routes. Declaration protected void Delete(params string[] routePatterns) Parameters Type Name Description string[] routePatterns Description(Action<RouteHandlerBuilder>, bool) describe openapi metadata for this endpoint. optionaly specify whether or not you want to clear the default Accepts/Produces metadata. EXAMPLE: b => b.Accepts<Request>(\"text/plain\") Declaration protected void Description(Action<RouteHandlerBuilder> builder, bool clearDefaults = false) Parameters Type Name Description Action<RouteHandlerBuilder> builder the route handler builder for this endpoint bool clearDefaults set to true if the defaults should be cleared DontAutoTag() if swagger auto tagging based on path segment is enabled, calling this method will prevent a tag from being added to this endpoint. Declaration protected void DontAutoTag() DontCatchExceptions() use this only if you have your own exception catching middleware. if this method is called in config, an automatic error response will not be sent to the client by the library. all exceptions will be thrown and it would be the responsibility of your exeception catching middleware to handle them. Declaration protected void DontCatchExceptions() DontThrowIfValidationFails() disable auto validation failure responses (400 bad request with error details) for this endpoint. HINT: this only applies to request dto validation. Declaration protected void DontThrowIfValidationFails() EnableAntiforgery() enables antiforgery token verification for this endpoint Declaration protected void EnableAntiforgery() ExecuteAsync(TRequest, CancellationToken) the handler method for the endpoint that returns the response dto. this method is called for each request received. Declaration public virtual Task<TResponse> ExecuteAsync(TRequest req, CancellationToken ct) Parameters Type Name Description TRequest req the request dto CancellationToken ct a cancellation token Returns Type Description Task<TResponse> FormFileSectionsAsync(CancellationToken) gets a stream of nullable FileMultipartSections from the incoming multipart/form-data without buffering the whole file to memory/disk as done with IFormFile Declaration protected IAsyncEnumerable<FileMultipartSection?> FormFileSectionsAsync(CancellationToken cancellation = default) Parameters Type Name Description CancellationToken cancellation optional cancellation token Returns Type Description IAsyncEnumerable<FileMultipartSection> Get(string, Expression<Func<TRequest, object>>) specify a GET route pattern using a replacement expression. Declaration protected void Get(string routePattern, Expression<Func<TRequest, object>> members) Parameters Type Name Description string routePattern the words prefixed with @ will be replaced by property names of the new expression in the order they are specified. the replacement words do not have to match the request dto property names. /invoice/{@id}/print/{@pageNum} Expression<Func<TRequest, object>> members r => new { r.InvoiceID, r.PageNumber } Get(params string[]) specify to listen for GET requests on one or more routes. Declaration protected void Get(params string[] routePatterns) Parameters Type Name Description string[] routePatterns Group<TEndpointGroup>() if this endpoint is part of an endpoint group, specify the type of the Group concrete class where the common configuration for the group is specified. WARNING: this method can only be called after the endpoint route has been specified. Declaration protected override sealed void Group<TEndpointGroup>() where TEndpointGroup : Group, new() Type Parameters Name Description TEndpointGroup the type of your Group concrete class Overrides BaseEndpoint.Group<TEndpointGroup>() Exceptions Type Condition InvalidOperationException thrown if endpoint route hasn't yet been specified HandleAsync(TRequest, CancellationToken) the handler method for the endpoint. this method is called for each request received. Declaration public virtual Task HandleAsync(TRequest req, CancellationToken ct) Parameters Type Name Description TRequest req the request dto CancellationToken ct a cancellation token Returns Type Description Task Head(string, Expression<Func<TRequest, object>>) specify a HEAD route pattern using a replacement expression. Declaration protected void Head(string routePattern, Expression<Func<TRequest, object>> members) Parameters Type Name Description string routePattern the words prefixed with @ will be replaced by property names of the new expression in the order they are specified. the replacement words do not have to match the request dto property names. /invoice/{@id}/print/{@pageNum} Expression<Func<TRequest, object>> members r => new { r.InvoiceID, r.PageNumber } Head(params string[]) specify to listen for HEAD requests on one or more routes. Declaration protected void Head(params string[] routePatterns) Parameters Type Name Description string[] routePatterns OnAfterHandle(TRequest, TResponse) override this method if you'd like to do something after the handler is executed. Declaration public virtual void OnAfterHandle(TRequest req, TResponse res) Parameters Type Name Description TRequest req the request dto TResponse res the response dto that was sent to the client OnAfterHandleAsync(TRequest, TResponse, CancellationToken) override this method if you'd like to do something after the handler is executed. Declaration public virtual Task OnAfterHandleAsync(TRequest req, TResponse res, CancellationToken ct) Parameters Type Name Description TRequest req the request dto TResponse res the response dto that was sent to the client CancellationToken ct a cancellation token Returns Type Description Task OnAfterValidate(TRequest) override this method if you'd like to do something to the request dto after it gets validated. Declaration public virtual void OnAfterValidate(TRequest req) Parameters Type Name Description TRequest req the request dto OnAfterValidateAsync(TRequest, CancellationToken) override this method if you'd like to do something to the request dto after it gets validated. Declaration public virtual Task OnAfterValidateAsync(TRequest req, CancellationToken ct) Parameters Type Name Description TRequest req the request dto CancellationToken ct a cancellation token Returns Type Description Task OnBeforeHandle(TRequest) override this method if you'd like to do something to the request dto before the handler is executed. Declaration public virtual void OnBeforeHandle(TRequest req) Parameters Type Name Description TRequest req the request dto OnBeforeHandleAsync(TRequest, CancellationToken) override this method if you'd like to do something to the request dto before the handler is executed. Declaration public virtual Task OnBeforeHandleAsync(TRequest req, CancellationToken ct) Parameters Type Name Description TRequest req the request dto CancellationToken ct a cancellation token Returns Type Description Task OnBeforeValidate(TRequest) override this method if you'd like to do something to the request dto before it gets validated. Declaration public virtual void OnBeforeValidate(TRequest req) Parameters Type Name Description TRequest req the request dto OnBeforeValidateAsync(TRequest, CancellationToken) override this method if you'd like to do something to the request dto before it gets validated. Declaration public virtual Task OnBeforeValidateAsync(TRequest req, CancellationToken ct) Parameters Type Name Description TRequest req the request dto CancellationToken ct a cancellation token Returns Type Description Task OnValidationFailed() override this method if you'd like to do something when a validation failure occurs. Declaration public virtual void OnValidationFailed() OnValidationFailedAsync(CancellationToken) override this method if you'd like to do something when a validation failure occurs. Declaration public virtual Task OnValidationFailedAsync(CancellationToken ct) Parameters Type Name Description CancellationToken ct a cancellation token Returns Type Description Task Options(Action<RouteHandlerBuilder>) set endpoint configurations options using an endpoint builder action /// Declaration protected void Options(Action<RouteHandlerBuilder> builder) Parameters Type Name Description Action<RouteHandlerBuilder> builder the builder for this endpoint Patch(string, Expression<Func<TRequest, object>>) specify a PATCH route pattern using a replacement expression. Declaration protected void Patch(string routePattern, Expression<Func<TRequest, object>> members) Parameters Type Name Description string routePattern the words prefixed with @ will be replaced by property names of the new expression in the order they are specified. the replacement words do not have to match the request dto property names. /invoice/{@id} Expression<Func<TRequest, object>> members r => new { r.InvoiceID } Patch(params string[]) specify to listen for PATCH requests on one or more routes. Declaration protected void Patch(params string[] routePatterns) Parameters Type Name Description string[] routePatterns Permissions(params string[]) allows access if the claims principal has ANY of the given permissions Declaration protected void Permissions(params string[] permissions) Parameters Type Name Description string[] permissions the permissions PermissionsAll(params string[]) allows access if the claims principal has ALL of the given permissions Declaration protected void PermissionsAll(params string[] permissions) Parameters Type Name Description string[] permissions the permissions Policies(params string[]) specify one or more authorization policy names you have added to the middleware pipeline during app startup/ service configuration that should be applied to this endpoint. Declaration protected void Policies(params string[] policyNames) Parameters Type Name Description string[] policyNames one or more policy names (must have been added to the pipeline on startup) Policy(Action<AuthorizationPolicyBuilder>) specify an action for building an authorization requirement which applies only to this endpoint. Declaration protected void Policy(Action<AuthorizationPolicyBuilder> policy) Parameters Type Name Description Action<AuthorizationPolicyBuilder> policy the policy builder action Post(string, Expression<Func<TRequest, object>>) specify a POST route pattern using a replacement expression. Declaration protected void Post(string routePattern, Expression<Func<TRequest, object>> members) Parameters Type Name Description string routePattern the words prefixed with @ will be replaced by property names of the new expression in the order they are specified. the replacement words do not have to match the request dto property names. /invoice/{@id}/page/{@pageNum} Expression<Func<TRequest, object>> members r => new { r.InvoiceID, r.PageNumber } Post(params string[]) specify to listen for POST requests on one or more routes. Declaration protected void Post(params string[] routePatterns) Parameters Type Name Description string[] routePatterns PostProcessor<TPostProcessor>() configure a post-processor to be executed after the main handler function is done. call this method multiple times to add multiple post-processors. processors are executed in the order they are configured in the endpoint. Declaration protected void PostProcessor<TPostProcessor>() where TPostProcessor : class, IPostProcessor<TRequest, TResponse> Type Parameters Name Description TPostProcessor the post-processor to add PostProcessors(params IPostProcessor<TRequest, TResponse>[]) configure a collection of post-processors to be executed after the main handler function is done. processors are executed in the order they are defined here. Declaration protected void PostProcessors(params IPostProcessor<TRequest, TResponse>[] postProcessors) Parameters Type Name Description IPostProcessor<TRequest, TResponse>[] postProcessors the post processors to be executed PreProcessor<TPreProcessor>() configure a pre-processor to be executed before the main handler function is called. call this method multiple times to add multiple pre-processors. processors are executed in the order they are configured in the endpoint. Declaration protected void PreProcessor<TPreProcessor>() where TPreProcessor : class, IPreProcessor<TRequest> Type Parameters Name Description TPreProcessor the pre-processor to add PreProcessors(params IPreProcessor<TRequest>[]) configure a collection of pre-processors to be executed before the main handler function is called. processors are executed in the order they are defined here. Declaration protected void PreProcessors(params IPreProcessor<TRequest>[] preProcessors) Parameters Type Name Description IPreProcessor<TRequest>[] preProcessors the pre processors to be executed ProcessorState<TState>() retrieve the common processor state for this endpoint. Declaration public TState ProcessorState<TState>() where TState : class, new() Returns Type Description TState Type Parameters Name Description TState the type of the processor state Exceptions Type Condition InvalidOperationException thrown if the requested type of the processor state does not match with what's already stored in the context PublishAsync<TEvent>(TEvent, Mode, CancellationToken) publishes a given event model to all subscribers registered to handle the that type of event. Declaration public Task PublishAsync<TEvent>(TEvent eventModel, Mode waitMode = Mode.WaitForAll, CancellationToken cancellation = default) where TEvent : notnull Parameters Type Name Description TEvent eventModel the notification event model/dto to publish Mode waitMode specify whether to wait for none, any or all of the subscribers to complete their work CancellationToken cancellation an optional cancellation token Returns Type Description Task a Task that matches the wait mode specified. WaitForNone returns an already completed Task (fire and forget). WaitForAny returns a Task that will complete when any of the subscribers complete their work. WaitForAll return a Task that will complete only when all of the subscribers complete their work. Type Parameters Name Description TEvent the type of the event model Put(string, Expression<Func<TRequest, object>>) specify a PUT route pattern using a replacement expression. Declaration protected void Put(string routePattern, Expression<Func<TRequest, object>> members) Parameters Type Name Description string routePattern the words prefixed with @ will be replaced by property names of the new expression in the order they are specified. the replacement words do not have to match the request dto property names. /invoice/{@id}/page/{@pageNum} Expression<Func<TRequest, object>> members r => new { r.InvoiceID, r.PageNumber } Put(params string[]) specify to listen for PUT requests on one or more routes. Declaration protected void Put(params string[] routePatterns) Parameters Type Name Description string[] routePatterns Query<T>(string, bool) get the value of a given query parameter by specifying the resulting type and query parameter name. NOTE: an automatic validation error is sent to the client when value retrieval is not successful. Declaration protected T? Query<T>(string paramName, bool isRequired = true) Parameters Type Name Description string paramName query parameter name bool isRequired set to false for disabling the automatic validation error Returns Type Description T the value if retrieval is successful or null if isRequired is set to false Type Parameters Name Description T type of the result RequestBinder(IRequestBinder<TRequest>) configure custom model binding for this endpoint by supplying an IRequestBinder implementation. by calling this method, you're completely bypassing the built-in model binding and taking things into your own hands for this endpoint. Declaration protected void RequestBinder(IRequestBinder<TRequest> binder) Parameters Type Name Description IRequestBinder<TRequest> binder custom model binder implementation to use for this endpoint Resolve(Type) resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public object Resolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved Resolve<TService>() resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public TService Resolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved ResponseCache(int, ResponseCacheLocation, bool, string?, string[]?) specify response caching settings for this endpoint Declaration protected void ResponseCache(int durationSeconds, ResponseCacheLocation location = ResponseCacheLocation.Any, bool noStore = false, string? varyByHeader = null, string[]? varyByQueryKeys = null) Parameters Type Name Description int durationSeconds the duration in seconds for which the response is cached ResponseCacheLocation location the location where the data from a particular URL must be cached bool noStore specify whether the data should be stored or not string varyByHeader the value for the Vary response header string[] varyByQueryKeys the query keys to vary by ResponseInterceptor(IResponseInterceptor) configure a response interceptor to be called before the SendAsync response is sent to the browser. this will override any globally configured interceptor. if you return a response to the browser, then the rest of the SendAsync method will be skipped. Declaration protected void ResponseInterceptor(IResponseInterceptor responseInterceptor) Parameters Type Name Description IResponseInterceptor responseInterceptor the response interceptor to be executed Roles(params string[]) allows access if the claims principal has ANY of the given roles Declaration protected void Roles(params string[] rolesNames) Parameters Type Name Description string[] rolesNames one or more roles that has access RoutePrefixOverride(string) specify an override route prefix for this endpoint if a global route prefix is enabled. this is ignored if a global route prefix is not configured. global prefix can be ignored by setting string.Empty Declaration protected void RoutePrefixOverride(string routePrefix) Parameters Type Name Description string routePrefix route prefix value Route<T>(string, bool) get the value of a given route parameter by specifying the resulting type and param name. NOTE: an automatic validation error is sent to the client when value retrieval is not successful. Declaration protected T? Route<T>(string paramName, bool isRequired = true) Parameters Type Name Description string paramName route parameter name bool isRequired set to false for disabling the automatic validation error Returns Type Description T the value if retrieval is successful or null if isRequired is set to false Type Parameters Name Description T type of the result Routes(params string[]) specify one or more route patterns this endpoint should be listening for Declaration protected void Routes(params string[] patterns) Parameters Type Name Description string[] patterns SendAsync(TResponse, int, CancellationToken) send the supplied response dto serialized as json to the client. Declaration protected Task SendAsync(TResponse response, int statusCode = 200, CancellationToken cancellation = default) Parameters Type Name Description TResponse response the object to serialize to json int statusCode optional custom http status code CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task SendBytesAsync(byte[], string?, string, DateTimeOffset?, bool, CancellationToken) send a byte array to the client Declaration protected Task SendBytesAsync(byte[] bytes, string? fileName = null, string contentType = \"application/octet-stream\", DateTimeOffset? lastModified = null, bool enableRangeProcessing = false, CancellationToken cancellation = default) Parameters Type Name Description byte[] bytes the bytes to send string fileName string contentType optional content type to set on the http response DateTimeOffset? lastModified optional last modified date-time-offset for the data stream bool enableRangeProcessing optional switch for enabling range processing CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task SendCreatedAtAsync(string, object?, TResponse, bool, CancellationToken) send a 201 created response with a location header containing where the resource can be retrieved from. WARNING: this method is only supported on single verb/route endpoints. it will not produce a `Location` header if used in a multi verb or multi route endpoint. Declaration protected Task SendCreatedAtAsync(string endpointName, object? routeValues, TResponse responseBody, bool generateAbsoluteUrl = false, CancellationToken cancellation = default) Parameters Type Name Description string endpointName the name of the endpoint to use for link generation (openapi route id) object routeValues a route values object with key/value pairs of route information TResponse responseBody the content to be serialized in the response body bool generateAbsoluteUrl set to true for generating a absolute url instead of relative url for the location header CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task SendCreatedAtAsync<TEndpoint>(object?, TResponse, Http?, int?, bool, CancellationToken) send a 201 created response with a location header containing where the resource can be retrieved from. HINT: if pointing to an endpoint with multiple verbs, make sure to specify the 'verb' argument and if pointing to a multi route endpoint, specify the 'routeNumber' argument. WARNING: this overload will not add a location header if you've set a custom endpoint name using .WithName() method. use the other overload that accepts a string endpoint name instead. Declaration protected Task SendCreatedAtAsync<TEndpoint>(object? routeValues, TResponse responseBody, Http? verb = null, int? routeNumber = null, bool generateAbsoluteUrl = false, CancellationToken cancellation = default) where TEndpoint : IEndpoint Parameters Type Name Description object routeValues a route values object with key/value pairs of route information TResponse responseBody the content to be serialized in the response body Http? verb only useful when pointing to a multi verb endpoint int? routeNumber only useful when pointing to a multi route endpoint bool generateAbsoluteUrl set to true for generating a absolute url instead of relative url for the location header CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task Type Parameters Name Description TEndpoint the type of the endpoint where the resource can be retrieved from SendEmptyJsonObject(CancellationToken) send an empty json object in the body Declaration protected Task SendEmptyJsonObject(CancellationToken cancellation = default) Parameters Type Name Description CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task SendErrorsAsync(int, CancellationToken) send a 400 bad request with error details of the current validation failures Declaration protected Task SendErrorsAsync(int statusCode = 400, CancellationToken cancellation = default) Parameters Type Name Description int statusCode the status code for the error response CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task SendEventStreamAsync<T>(string, IAsyncEnumerable<T>, CancellationToken) start a \"server-sent-events\" data stream for the client asynchronously without blocking any threads Declaration protected Task SendEventStreamAsync<T>(string eventName, IAsyncEnumerable<T> eventStream, CancellationToken cancellation = default) Parameters Type Name Description string eventName the name of the event stream IAsyncEnumerable<T> eventStream an IAsyncEnumerable that is the source of the data CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task Type Parameters Name Description T the type of the objects being sent in the event stream SendFileAsync(FileInfo, string, DateTimeOffset?, bool, CancellationToken) send a file to the client Declaration protected Task SendFileAsync(FileInfo fileInfo, string contentType = \"application/octet-stream\", DateTimeOffset? lastModified = null, bool enableRangeProcessing = false, CancellationToken cancellation = default) Parameters Type Name Description FileInfo fileInfo string contentType optional content type to set on the http response DateTimeOffset? lastModified optional last modified date-time-offset for the data stream bool enableRangeProcessing optional switch for enabling range processing CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task SendForbiddenAsync(CancellationToken) send a 403 unauthorized response Declaration protected Task SendForbiddenAsync(CancellationToken cancellation = default) Parameters Type Name Description CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task SendHeadersAsync(Action<IHeaderDictionary>, int, CancellationToken) send headers in response to a HEAD request Declaration protected Task SendHeadersAsync(Action<IHeaderDictionary> headers, int statusCode = 200, CancellationToken cancellation = default) Parameters Type Name Description Action<IHeaderDictionary> headers an action to be performed on the headers dictionary of the response int statusCode optional custom http status code CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task SendInterceptedAsync(object, int, CancellationToken) sends an object serialized as json to the client. if a response interceptor has been defined, then that will be executed before the normal response is sent. Declaration protected Task SendInterceptedAsync(object response, int statusCode = 200, CancellationToken cancellation = default) Parameters Type Name Description object response the object to serialize to json int statusCode optional custom http status code CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task Exceptions Type Condition InvalidOperationException will throw if an interceptor has not been defined against the endpoint or globally SendNoContentAsync(CancellationToken) send a 204 no content response Declaration protected Task SendNoContentAsync(CancellationToken cancellation = default) Parameters Type Name Description CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task SendNotFoundAsync(CancellationToken) send a 404 not found response Declaration protected Task SendNotFoundAsync(CancellationToken cancellation = default) Parameters Type Name Description CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task SendOkAsync(CancellationToken) send an http 200 ok response without any body Declaration protected Task SendOkAsync(CancellationToken cancellation = default) Parameters Type Name Description CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task SendOkAsync(TResponse, CancellationToken) send an http 200 ok response with the supplied response dto serialized as json to the client. Declaration protected Task SendOkAsync(TResponse response, CancellationToken cancellation = default) Parameters Type Name Description TResponse response the object to serialize to json CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task SendRedirectAsync(string, bool, CancellationToken) send a 302/301 redirect response Declaration protected Task SendRedirectAsync(string location, bool isPermanant = false, CancellationToken cancellation = default) Parameters Type Name Description string location the location to redirect to bool isPermanant set to true for a 301 redirect. 302 is the default. CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task SendResultAsync(IResult) execute and send any IResult produced by the Results class in minimal apis. Declaration protected Task SendResultAsync(IResult result) Parameters Type Name Description IResult result the IResult instance to execute such as: Results.Forbid(); Results.Ok(...); Returns Type Description Task SendStreamAsync(Stream, string?, long?, string, DateTimeOffset?, bool, CancellationToken) send the contents of a stream to the client Declaration protected Task SendStreamAsync(Stream stream, string? fileName = null, long? fileLengthBytes = null, string contentType = \"application/octet-stream\", DateTimeOffset? lastModified = null, bool enableRangeProcessing = false, CancellationToken cancellation = default) Parameters Type Name Description Stream stream the stream to read the data from string fileName and optional file name to set in the content-disposition header long? fileLengthBytes optional total size of the file/stream string contentType optional content type to set on the http response DateTimeOffset? lastModified optional last modified date-time-offset for the data stream bool enableRangeProcessing optional switch for enabling range processing CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task SendStringAsync(string, int, string, CancellationToken) send the supplied string content to the client. Declaration protected Task SendStringAsync(string content, int statusCode = 200, string contentType = \"text/plain\", CancellationToken cancellation = default) Parameters Type Name Description string content the string to write to the response body int statusCode optional custom http status code string contentType optional content type header value CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task SendUnauthorizedAsync(CancellationToken) send a 401 unauthorized response Declaration protected Task SendUnauthorizedAsync(CancellationToken cancellation = default) Parameters Type Name Description CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used Returns Type Description Task SerializerContext<TContext>() specify the type of the json serializer context if code generation for request/response dtos is being used. the json serializer context will be instantiated with SerializerOptions from the UseFastEndpoints(...) call. Declaration protected void SerializerContext<TContext>() where TContext : JsonSerializerContext Type Parameters Name Description TContext the type of the json serializer context for this endpoint SerializerContext<TContext>(TContext) specify the json serializer context if code generation for request/response dtos is being used by supplying your own instance. Declaration protected void SerializerContext<TContext>(TContext serializerContext) where TContext : JsonSerializerContext Parameters Type Name Description TContext serializerContext Type Parameters Name Description TContext the type of the json serializer context for this endpoint Summary(EndpointSummary) provide a summary/description for this endpoint to be used in swagger/ openapi Declaration protected void Summary(EndpointSummary endpointSummary) Parameters Type Name Description EndpointSummary endpointSummary an endpoint summary instance Summary(Action<EndpointSummary<TRequest>>) provide a summary/description for this endpoint to be used in swagger/ openapi Declaration protected void Summary(Action<EndpointSummary<TRequest>> endpointSummary) Parameters Type Name Description Action<EndpointSummary<TRequest>> endpointSummary an action that sets values of an endpoint summary object Summary(Action<EndpointSummary>) provide a summary/description for this endpoint to be used in swagger/ openapi Declaration protected void Summary(Action<EndpointSummary> endpointSummary) Parameters Type Name Description Action<EndpointSummary> endpointSummary an action that sets values of an endpoint summary object Tags(params string[]) specify one or more string tags for this endpoint so they can be used in the exclusion filter during registration. HINT: these tags have nothing to do with swagger tags! Declaration protected void Tags(params string[] endpointTags) Parameters Type Name Description string[] endpointTags the tag values to associate with this endpoint Throttle(int, double, string?) rate limit requests to this endpoint based on a request http header sent by the client. Declaration protected void Throttle(int hitLimit, double durationSeconds, string? headerName = null) Parameters Type Name Description int hitLimit how many requests are allowed within the given duration double durationSeconds the frequency in seconds where the accrued hit count should be reset string headerName the name of the request header used to uniquely identify clients. header name can also be configured globally using app.UseFastEndpoints(c=> c.ThrottleOptions...) not specifying a header name will first look for 'X-Forwarded-For' header and if not present, will use HttpContext.Connection.RemoteIpAddress. ThrowError(ValidationFailure, int?) adds a FluentValidation.Results.ValidationFailure to the validation failure collection of the endpoint and send back a 400 bad request with error details immediately interrupting handler execution flow. if there are any vallidation failures, no execution will continue past this call. Declaration public void ThrowError(ValidationFailure failure, int? statusCode = null) Parameters Type Name Description ValidationFailure failure the validation failure to add int? statusCode an optional status code to be used when building the error response ThrowError(Expression<Func<TRequest, object?>>, string, int?) adds an error message for the specified property of the request dto and sends back a 400 bad request with error details immediately interrupting handler execution flow. no execution will continue past this call. Declaration public void ThrowError(Expression<Func<TRequest, object?>> property, string errorMessage, int? statusCode = null) Parameters Type Name Description Expression<Func<TRequest, object>> property the property to add the error message for string errorMessage the error message int? statusCode an optional status code to be used when building the error response ThrowError(string, int?) add a \"GeneralError\" to the validation failure list and send back a 400 bad request with error details immediately interrupting handler execution flow. if there are any vallidation failures, no execution will continue past this call. Declaration public void ThrowError(string message, int? statusCode = null) Parameters Type Name Description string message the error message int? statusCode an optional status code to be used when building the error response ThrowIfAnyErrors(int?) interrupt the flow of handler execution and send a 400 bad request with error details if there are any validation failures in the current request. if there are no validation failures, execution will continue past this call. Declaration public void ThrowIfAnyErrors(int? statusCode = null) Parameters Type Name Description int? statusCode an optional status code to be used when building the error response TryResolve(Type) try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public object? TryResolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object TryResolve<TService>() try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public TService? TryResolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Validator<TValidator>() specify the validator that should be used for this endpoint. TIP: you only need to call this method if you have more than one validator for the same request dto in the solution or if you just want to be explicit about what validator is used by the endpoint. Declaration protected void Validator<TValidator>() where TValidator : IValidator Type Parameters Name Description TValidator the type of the validator Verbs(params Http[]) specify one or more http method verbs this endpoint should be accepting requests for Declaration protected void Verbs(params Http[] methods) Parameters Type Name Description Http[] methods Verbs(params string[]) specify one or more http method verbs this endpoint should be accepting requests for Declaration public override sealed void Verbs(params string[] methods) Parameters Type Name Description string[] methods Overrides BaseEndpoint.Verbs(params string[]) Version(int, int?) specify the version of the endpoint if versioning is enabled Declaration protected void Version(int version, int? deprecateAt = null) Parameters Type Name Description int version the version of this endpoint int? deprecateAt the version group number starting at which this endpoint should not be included in swagger document Implements IEndpoint IEventBus IServiceResolverBase"
  },
  "api/FastEndpoints.Endpoint-3.html": {
    "href": "api/FastEndpoints.Endpoint-3.html",
    "title": "Class Endpoint<TRequest, TResponse, TMapper> | FastEndpoints",
    "keywords": "Class Endpoint<TRequest, TResponse, TMapper> use this base class for defining endpoints that use both request and response dtos as well as require mapping to and from a domain entity using a seperate entity mapper. Inheritance object BaseEndpoint Endpoint<TRequest, TResponse> Endpoint<TRequest, TResponse, TMapper> Implements IEndpoint IEventBus IServiceResolverBase IHasMapper<TMapper> IHasMapper Inherited Members Endpoint<TRequest, TResponse>.HandleAsync(TRequest, CancellationToken) Endpoint<TRequest, TResponse>.ExecuteAsync(TRequest, CancellationToken) Endpoint<TRequest, TResponse>.TryResolve<TService>() Endpoint<TRequest, TResponse>.TryResolve(Type) Endpoint<TRequest, TResponse>.Resolve<TService>() Endpoint<TRequest, TResponse>.Resolve(Type) Endpoint<TRequest, TResponse>.CreateScope() Endpoint<TRequest, TResponse>.Route<T>(string, bool) Endpoint<TRequest, TResponse>.Query<T>(string, bool) Endpoint<TRequest, TResponse>.FormFileSectionsAsync(CancellationToken) Endpoint<TRequest, TResponse>.PublishAsync<TEvent>(TEvent, Mode, CancellationToken) Endpoint<TRequest, TResponse>.CreateTokenWith<TService>(string, Action<UserPrivileges>) Endpoint<TRequest, TResponse>.ProcessorState<TState>() Endpoint<TRequest, TResponse>.OnBeforeValidate(TRequest) Endpoint<TRequest, TResponse>.OnBeforeValidateAsync(TRequest, CancellationToken) Endpoint<TRequest, TResponse>.OnAfterValidate(TRequest) Endpoint<TRequest, TResponse>.OnAfterValidateAsync(TRequest, CancellationToken) Endpoint<TRequest, TResponse>.OnBeforeHandle(TRequest) Endpoint<TRequest, TResponse>.OnBeforeHandleAsync(TRequest, CancellationToken) Endpoint<TRequest, TResponse>.OnAfterHandle(TRequest, TResponse) Endpoint<TRequest, TResponse>.OnAfterHandleAsync(TRequest, TResponse, CancellationToken) Endpoint<TRequest, TResponse>.OnValidationFailed() Endpoint<TRequest, TResponse>.OnValidationFailedAsync(CancellationToken) Endpoint<TRequest, TResponse>.User Endpoint<TRequest, TResponse>.Response Endpoint<TRequest, TResponse>.Config Endpoint<TRequest, TResponse>.Env Endpoint<TRequest, TResponse>.Logger Endpoint<TRequest, TResponse>.BaseURL Endpoint<TRequest, TResponse>.HttpMethod Endpoint<TRequest, TResponse>.Form Endpoint<TRequest, TResponse>.Files Endpoint<TRequest, TResponse>.ResponseStarted Endpoint<TRequest, TResponse>.SendAsync(TResponse, int, CancellationToken) Endpoint<TRequest, TResponse>.SendResultAsync(IResult) Endpoint<TRequest, TResponse>.SendInterceptedAsync(object, int, CancellationToken) Endpoint<TRequest, TResponse>.SendCreatedAtAsync<TEndpoint>(object, TResponse, Http?, int?, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendCreatedAtAsync(string, object, TResponse, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendStringAsync(string, int, string, CancellationToken) Endpoint<TRequest, TResponse>.SendOkAsync(TResponse, CancellationToken) Endpoint<TRequest, TResponse>.SendOkAsync(CancellationToken) Endpoint<TRequest, TResponse>.SendErrorsAsync(int, CancellationToken) Endpoint<TRequest, TResponse>.SendNoContentAsync(CancellationToken) Endpoint<TRequest, TResponse>.SendNotFoundAsync(CancellationToken) Endpoint<TRequest, TResponse>.SendUnauthorizedAsync(CancellationToken) Endpoint<TRequest, TResponse>.SendForbiddenAsync(CancellationToken) Endpoint<TRequest, TResponse>.SendRedirectAsync(string, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendHeadersAsync(Action<IHeaderDictionary>, int, CancellationToken) Endpoint<TRequest, TResponse>.SendBytesAsync(byte[], string, string, DateTimeOffset?, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendFileAsync(FileInfo, string, DateTimeOffset?, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendStreamAsync(Stream, string, long?, string, DateTimeOffset?, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendEventStreamAsync<T>(string, IAsyncEnumerable<T>, CancellationToken) Endpoint<TRequest, TResponse>.SendEmptyJsonObject(CancellationToken) Endpoint<TRequest, TResponse>.AccessControl(string, Apply?, params string[]) Endpoint<TRequest, TResponse>.AccessControl(string, params string[]) Endpoint<TRequest, TResponse>.AllowAnonymous(params Http[]) Endpoint<TRequest, TResponse>.AllowAnonymous(string[]) Endpoint<TRequest, TResponse>.AllowFileUploads(bool) Endpoint<TRequest, TResponse>.AllowFormData(bool) Endpoint<TRequest, TResponse>.AuthSchemes(params string[]) Endpoint<TRequest, TResponse>.Claims(params string[]) Endpoint<TRequest, TResponse>.ClaimsAll(params string[]) Endpoint<TRequest, TResponse>.Delete(params string[]) Endpoint<TRequest, TResponse>.Delete(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.Description(Action<RouteHandlerBuilder>, bool) Endpoint<TRequest, TResponse>.DontAutoTag() Endpoint<TRequest, TResponse>.DontCatchExceptions() Endpoint<TRequest, TResponse>.DontThrowIfValidationFails() Endpoint<TRequest, TResponse>.EnableAntiforgery() Endpoint<TRequest, TResponse>.Get(params string[]) Endpoint<TRequest, TResponse>.Get(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.Group<TEndpointGroup>() Endpoint<TRequest, TResponse>.Head(params string[]) Endpoint<TRequest, TResponse>.Head(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.Options(Action<RouteHandlerBuilder>) Endpoint<TRequest, TResponse>.Patch(params string[]) Endpoint<TRequest, TResponse>.Patch(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.Permissions(params string[]) Endpoint<TRequest, TResponse>.PermissionsAll(params string[]) Endpoint<TRequest, TResponse>.Policy(Action<AuthorizationPolicyBuilder>) Endpoint<TRequest, TResponse>.Policies(params string[]) Endpoint<TRequest, TResponse>.Post(params string[]) Endpoint<TRequest, TResponse>.Post(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.PostProcessor<TPostProcessor>() Endpoint<TRequest, TResponse>.PostProcessors(params IPostProcessor<TRequest, TResponse>[]) Endpoint<TRequest, TResponse>.PreProcessor<TPreProcessor>() Endpoint<TRequest, TResponse>.PreProcessors(params IPreProcessor<TRequest>[]) Endpoint<TRequest, TResponse>.Put(params string[]) Endpoint<TRequest, TResponse>.Put(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.RequestBinder(IRequestBinder<TRequest>) Endpoint<TRequest, TResponse>.ResponseCache(int, ResponseCacheLocation, bool, string, string[]) Endpoint<TRequest, TResponse>.ResponseInterceptor(IResponseInterceptor) Endpoint<TRequest, TResponse>.Roles(params string[]) Endpoint<TRequest, TResponse>.RoutePrefixOverride(string) Endpoint<TRequest, TResponse>.Routes(params string[]) Endpoint<TRequest, TResponse>.SerializerContext<TContext>(TContext) Endpoint<TRequest, TResponse>.SerializerContext<TContext>() Endpoint<TRequest, TResponse>.Summary(Action<EndpointSummary>) Endpoint<TRequest, TResponse>.Summary(Action<EndpointSummary<TRequest>>) Endpoint<TRequest, TResponse>.Summary(EndpointSummary) Endpoint<TRequest, TResponse>.Tags(params string[]) Endpoint<TRequest, TResponse>.Throttle(int, double, string) Endpoint<TRequest, TResponse>.Validator<TValidator>() Endpoint<TRequest, TResponse>.Verbs(params Http[]) Endpoint<TRequest, TResponse>.Verbs(params string[]) Endpoint<TRequest, TResponse>.Version(int, int?) Endpoint<TRequest, TResponse>.ValidationFailed Endpoint<TRequest, TResponse>.AddError(ValidationFailure) Endpoint<TRequest, TResponse>.AddError(string, string, Severity) Endpoint<TRequest, TResponse>.AddError(Expression<Func<TRequest, object>>, string, string, Severity) Endpoint<TRequest, TResponse>.ThrowError(ValidationFailure, int?) Endpoint<TRequest, TResponse>.ThrowError(string, int?) Endpoint<TRequest, TResponse>.ThrowError(Expression<Func<TRequest, object>>, string, int?) Endpoint<TRequest, TResponse>.ThrowIfAnyErrors(int?) BaseEndpoint.Definition BaseEndpoint.HttpContext BaseEndpoint.ValidationFailures BaseEndpoint.Configure() BaseEndpoint.Verbs(params string[]) BaseEndpoint.Group<TEndpointGroup>() BaseEndpoint.GetAclHash(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class Endpoint<TRequest, TResponse, TMapper> : Endpoint<TRequest, TResponse>, IEndpoint, IEventBus, IServiceResolverBase, IHasMapper<TMapper>, IHasMapper where TRequest : notnull where TResponse : notnull where TMapper : IMapper Type Parameters Name Description TRequest the type of the request dto TResponse the type of the response dto TMapper the type of the entity mapper Properties Map the entity mapper for the endpoint HINT: entity mappers are singletons for performance reasons. do not maintain state in the mappers. Declaration public TMapper Map { get; set; } Property Value Type Description TMapper Methods SendMappedAsync<TEntity>(TEntity, int, CancellationToken) send a response by mapping the supplied entity using this endpoint's mapper's ASYNC mapping method. Declaration protected Task SendMappedAsync<TEntity>(TEntity entity, int statusCode = 200, CancellationToken ct = default) Parameters Type Name Description TEntity entity the entity instance to map to the response int statusCode the status code to send CancellationToken ct optional cancellation token Returns Type Description Task Type Parameters Name Description TEntity the type of the entity supplied SendMapped<TEntity>(TEntity, int, CancellationToken) send a response by mapping the supplied entity using this endpoint's mapper's SYNC mapping method. Declaration protected Task SendMapped<TEntity>(TEntity entity, int statusCode = 200, CancellationToken ct = default) Parameters Type Name Description TEntity entity the entity instance to map to the response int statusCode the status code to send CancellationToken ct optional cancellation token Returns Type Description Task Type Parameters Name Description TEntity the type of the entity supplied Implements IEndpoint IEventBus IServiceResolverBase IHasMapper<TMapper> IHasMapper"
  },
  "api/FastEndpoints.EndpointDefinition.html": {
    "href": "api/FastEndpoints.EndpointDefinition.html",
    "title": "Class EndpointDefinition | FastEndpoints",
    "keywords": "Class EndpointDefinition represents the configuration settings of an endpoint Inheritance object EndpointDefinition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class EndpointDefinition Constructors EndpointDefinition(Type, Type, Type) Declaration public EndpointDefinition(Type endpointType, Type requestDtoType, Type responseDtoType) Parameters Type Name Description Type endpointType Type requestDtoType Type responseDtoType Properties AllowAnyClaim Declaration public bool AllowAnyClaim { get; } Property Value Type Description bool AllowAnyPermission Declaration public bool AllowAnyPermission { get; } Property Value Type Description bool AllowedClaimTypes Declaration public List<string>? AllowedClaimTypes { get; } Property Value Type Description List<string> AllowedPermissions Declaration public List<string>? AllowedPermissions { get; } Property Value Type Description List<string> AllowedRoles Declaration public List<string>? AllowedRoles { get; } Property Value Type Description List<string> AnonymousVerbs Declaration public string[]? AnonymousVerbs { get; } Property Value Type Description string[] AntiforgeryEnabled Declaration public bool AntiforgeryEnabled { get; } Property Value Type Description bool AuthSchemeNames Declaration public List<string>? AuthSchemeNames { get; } Property Value Type Description List<string> DoNotCatchExceptions Declaration public bool DoNotCatchExceptions { get; } Property Value Type Description bool DontAutoTagEndpoints Declaration public bool DontAutoTagEndpoints { get; } Property Value Type Description bool DontBindFormData Declaration public bool DontBindFormData { get; } Property Value Type Description bool EndpointAttributes Declaration public object[]? EndpointAttributes { get; } Property Value Type Description object[] EndpointSummary Declaration public EndpointSummary? EndpointSummary { get; } Property Value Type Description EndpointSummary EndpointTags Declaration public List<string>? EndpointTags { get; } Property Value Type Description List<string> EndpointType Declaration public Type EndpointType { get; init; } Property Value Type Description Type FormDataContentType Declaration public string? FormDataContentType { get; } Property Value Type Description string MapperType Declaration public Type? MapperType { get; } Property Value Type Description Type OverriddenRoutePrefix Declaration public string? OverriddenRoutePrefix { get; } Property Value Type Description string PolicyBuilder Declaration public Action<AuthorizationPolicyBuilder>? PolicyBuilder { get; } Property Value Type Description Action<AuthorizationPolicyBuilder> PreBuiltUserPolicies Declaration public List<string>? PreBuiltUserPolicies { get; } Property Value Type Description List<string> ReqDtoType Declaration public Type ReqDtoType { get; init; } Property Value Type Description Type ResDtoType Declaration public Type ResDtoType { get; init; } Property Value Type Description Type Routes Declaration public string[]? Routes { get; } Property Value Type Description string[] SecurityPolicyName Declaration public string SecurityPolicyName { get; } Property Value Type Description string ThrowIfValidationFails Declaration public bool ThrowIfValidationFails { get; } Property Value Type Description bool ValidatorType Declaration public Type? ValidatorType { get; } Property Value Type Description Type Verbs Declaration public string[]? Verbs { get; } Property Value Type Description string[] Version Declaration public EpVersion Version { get; } Property Value Type Description EpVersion Methods AllowAnonymous(params Http[]) allow unauthenticated requests to this endpoint. optionally specify a set of verbs to allow unauthenticated access with. i.e. if the endpoint is listening to POST, PUT & PATCH and you specify AllowAnonymous(Http.POST), then only PUT & PATCH will require authentication. Declaration public void AllowAnonymous(params Http[] verbs) Parameters Type Name Description Http[] verbs AllowAnonymous(string[]) allow unauthenticated requests to this endpoint for a specified set of http verbs. Declaration public void AllowAnonymous(string[] verbs) Parameters Type Name Description string[] verbs AllowFileUploads(bool) enable file uploads with multipart/form-data content type Declaration public void AllowFileUploads(bool dontAutoBindFormData = false) Parameters Type Name Description bool dontAutoBindFormData set 'true' to disable auto binding of form data which enables uploading and reading of large files without buffering to memory/disk. you can access the multipart sections for reading via the FormFileSectionsAsync() method. AllowFormData(bool) enable form-data submissions Declaration public void AllowFormData(bool urlEncoded = false) Parameters Type Name Description bool urlEncoded set to true to accept application/x-www-form-urlencoded content instead of multipart/form-data content. AuthSchemes(params string[]) specify which authentication schemes to use for authenticating requests to this endpoint HINT: these auth schemes will be applied in addition to endpoint level auth schemes if there's any Declaration public void AuthSchemes(params string[] authSchemeNames) Parameters Type Name Description string[] authSchemeNames the authentication scheme names Claims(params string[]) allows access if the claims principal has ANY of the given claim types HINT: these claims will be applied in addition to endpoint level claims if there's any Declaration public void Claims(params string[] claimTypes) Parameters Type Name Description string[] claimTypes the claim types ClaimsAll(params string[]) allows access if the claims principal has ALL of the given claim types HINT: these claims will be applied in addition to endpoint level claims if there's any Declaration public void ClaimsAll(params string[] claimTypes) Parameters Type Name Description string[] claimTypes the claim types Description(Action<RouteHandlerBuilder>, bool) describe openapi metadata for this endpoint. optionally specify whether or not you want to clear the default Accepts/Produces metadata. EXAMPLE: b => b.Accepts<Request>(\"text/plain\") Declaration public void Description(Action<RouteHandlerBuilder> builder, bool clearDefaults = false) Parameters Type Name Description Action<RouteHandlerBuilder> builder the route handler builder for this endpoint bool clearDefaults set to true if the defaults should be cleared DontAutoTag() if swagger auto tagging based on path segment is enabled, calling this method will prevent a tag from being added to this endpoint. Declaration public void DontAutoTag() DontCatchExceptions() use this only if you have your own exception catching middleware. if this method is called in config, an automatic error response will not be sent to the client by the library. all exceptions will be thrown and it would be your exception catching middleware to handle them. Declaration public void DontCatchExceptions() DontThrowIfValidationFails() disable auto validation failure responses (400 bad request with error details) for this endpoint. HINT: this only applies to request dto validation. Declaration public void DontThrowIfValidationFails() EnableAntiforgery() enable antiforgery token verification for an endpoint Declaration public void EnableAntiforgery() EndpointVersion(int, int?) specify the version of the endpoint if versioning is enabled Declaration public void EndpointVersion(int version, int? deprecateAt = null) Parameters Type Name Description int version the version of this endpoint int? deprecateAt the version group number starting at which this endpoint should not be included in swagger document Options(Action<RouteHandlerBuilder>) set endpoint configurations options using an endpoint builder action /// Declaration public void Options(Action<RouteHandlerBuilder> builder) Parameters Type Name Description Action<RouteHandlerBuilder> builder the builder for this endpoint Permissions(params string[]) allows access if the claims principal has ANY of the given permissions HINT: these permissions will be applied in addition to endpoint level permissions if there's any Declaration public void Permissions(params string[] permissions) Parameters Type Name Description string[] permissions the permissions PermissionsAll(params string[]) allows access if the claims principal has ALL of the given permissions HINT: these permissions will be applied in addition to endpoint level permissions if there's any Declaration public void PermissionsAll(params string[] permissions) Parameters Type Name Description string[] permissions the permissions Policies(params string[]) specify one or more authorization policy names you have added to the middleware pipeline during app startup/ service configuration that should be applied to this endpoint. HINT: these policies will be applied in addition to endpoint level policies if there's any Declaration public void Policies(params string[] policyNames) Parameters Type Name Description string[] policyNames one or more policy names (must have been added to the pipeline on startup) Policy(Action<AuthorizationPolicyBuilder>) specify an action for building an authorization requirement which should be added to all endpoints globally. HINT: these global level requirements will be combined with the requirements specified at the endpoint level if there's any. Declaration public void Policy(Action<AuthorizationPolicyBuilder> policy) Parameters Type Name Description Action<AuthorizationPolicyBuilder> policy th policy builder action PostProcessor<TPostProcessor>(Order) adds global post-processor to an endpoint definition which are to be executed in addition to the ones configured at the endpoint level. Declaration public void PostProcessor<TPostProcessor>(Order order) where TPostProcessor : class, IGlobalPostProcessor Parameters Type Name Description Order order set to Before if the global post-processors should be executed before endpoint post-processors. After will execute global processors after endpoint level processors Type Parameters Name Description TPostProcessor the post-processor to add PostProcessors(Order, params IGlobalPostProcessor[]) adds global post-processors to an endpoint definition which are to be executed in addition to the ones configured at the endpoint level. Declaration public void PostProcessors(Order order, params IGlobalPostProcessor[] postProcessors) Parameters Type Name Description Order order set to Before if the global post-processors should be executed before endpoint post-processors. After will execute global processors after endpoint level processors IGlobalPostProcessor[] postProcessors the post-processors to add PreProcessor<TPreProcessor>(Order) adds global pre-processor to an endpoint definition which are to be executed in addition to the ones configured at the endpoint level. Declaration public void PreProcessor<TPreProcessor>(Order order) where TPreProcessor : class, IGlobalPreProcessor Parameters Type Name Description Order order set to Before if the global pre-processors should be executed before endpoint pre-processors. After will execute global processors after endpoint level processors Type Parameters Name Description TPreProcessor the pre-processor to add PreProcessors(Order, params IGlobalPreProcessor[]) adds global pre-processors to an endpoint definition which are to be executed in addition to the ones configured at the endpoint level. Declaration public void PreProcessors(Order order, params IGlobalPreProcessor[] preProcessors) Parameters Type Name Description Order order set to Before if the global pre-processors should be executed before endpoint pre-processors. After will execute global processors after endpoint level processors IGlobalPreProcessor[] preProcessors the pre-processors to add ResponseCache(int, ResponseCacheLocation, bool, string?, string[]?) specify response caching settings for this endpoint Declaration public void ResponseCache(int durationSeconds, ResponseCacheLocation location = ResponseCacheLocation.Any, bool noStore = false, string? varyByHeader = null, string[]? varyByQueryKeys = null) Parameters Type Name Description int durationSeconds the duration in seconds for which the response is cached ResponseCacheLocation location the location where the data from a particular URL must be cached bool noStore specify whether the data should be stored or not string varyByHeader the value for the Vary response header string[] varyByQueryKeys the query keys to vary by ResponseInterceptor(IResponseInterceptor) configure a response interceptor to be called before any SendAsync() methods are called. if the interceptor sends a response to the client, the SendAsync() will be ignored. Declaration public void ResponseInterceptor(IResponseInterceptor responseInterceptor) Parameters Type Name Description IResponseInterceptor responseInterceptor the response interceptor to be configured for the endpoint Roles(params string[]) allows access if the claims principal has ANY of the given roles HINT: these roles will be applied in addition to endpoint level roles if there's any Declaration public void Roles(params string[] rolesNames) Parameters Type Name Description string[] rolesNames one or more roles that has access RoutePrefixOverride(string) specify an override route prefix for this endpoint if a global route prefix is enabled. this is ignored if a global route prefix is not configured. global prefix can be ignored by setting string.Empty WARNING: setting a route prefix override globally makes the endpoint level override ineffective. i.e. RoutePrefixOverride() method call on endpoint level will be ignored. Declaration public void RoutePrefixOverride(string routePrefix) Parameters Type Name Description string routePrefix route prefix value Summary(EndpointSummary) provide a summary/description for this endpoint to be used in swagger/ openapi Declaration public void Summary(EndpointSummary endpointSummary) Parameters Type Name Description EndpointSummary endpointSummary an endpoint summary instance Summary(Action<EndpointSummary>) provide a summary/description for this endpoint to be used in swagger/ openapi Declaration public void Summary(Action<EndpointSummary> endpointSummary) Parameters Type Name Description Action<EndpointSummary> endpointSummary an action that sets values of an endpoint summary object Summary<TRequest>(Action<EndpointSummary<TRequest>>) provide a summary/description for this endpoint to be used in swagger/ openapi Declaration public void Summary<TRequest>(Action<EndpointSummary<TRequest>> endpointSummary) where TRequest : notnull Parameters Type Name Description Action<EndpointSummary<TRequest>> endpointSummary an action that sets values of an endpoint summary object Type Parameters Name Description TRequest Tags(params string[]) specify one or more string tags for this endpoint so they can be used in the exclusion filter during registration. HINT: these tags will be applied in addition to endpoint level tags if there's any TIP: these tags have nothing to do with swagger tags! Declaration public void Tags(params string[] endpointTags) Parameters Type Name Description string[] endpointTags the tag values to associate with this endpoint Throttle(int, double, string?) rate limit requests to this endpoint based on a request http header sent by the client. Declaration public void Throttle(int hitLimit, double durationSeconds, string? headerName = null) Parameters Type Name Description int hitLimit how many requests are allowed within the given duration double durationSeconds the frequency in seconds where the accrued hit count should be reset string headerName the name of the request header used to uniquely identify clients. header name can also be configured globally using app.UseFastEndpoints(c=> c.Throttle...) not specifying a header name will first look for 'X-Forwarded-For' header and if not present, will use HttpContext.Connection.RemoteIpAddress. Validator<TValidator>() validator that should be used for this endpoint Declaration public void Validator<TValidator>() where TValidator : IValidator Type Parameters Name Description TValidator the type of the validator"
  },
  "api/FastEndpoints.EndpointDiscoveryOptions.html": {
    "href": "api/FastEndpoints.EndpointDiscoveryOptions.html",
    "title": "Class EndpointDiscoveryOptions | FastEndpoints",
    "keywords": "Class EndpointDiscoveryOptions defines how endpoint discovery and registration should be done at startup Inheritance object EndpointDiscoveryOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class EndpointDiscoveryOptions Properties Assemblies an optional collection of assemblies to discover endpoints from in addition to the auto discovered ones. if DisableAutoDiscovery is set to true, this must be provided. NOTE: not applicable when using FastEndpoints.Generator package Declaration public IEnumerable<Assembly>? Assemblies { set; } Property Value Type Description IEnumerable<Assembly> AssemblyFilter an optional predicate to filter out the final collection of assemblies before scanning for endpoints. NOTE: not applicable when using FastEndpoints.Generator package Declaration public Func<Assembly, bool>? AssemblyFilter { set; } Property Value Type Description Func<Assembly, bool> DisableAutoDiscovery set to true if only the provided Assemblies should be scanned for endpoints. if Assemblies is null and this is set to true, an exception will be thrown. NOTE: not applicable when using FastEndpoints.Generator package Declaration public bool DisableAutoDiscovery { set; } Property Value Type Description bool Filter a function to filter out types from auto discovery. the function you set here will be executed for each discovered type during startup. return 'false' from the function if you want to exclude a type from discovery. return 'true' to include. alternatively you can annotate the type/class with the DontRegisterAttribute to skip auto registration for that type. Declaration public Func<Type, bool>? Filter { set; } Property Value Type Description Func<Type, bool> IncludeAbstractValidators by default only validators inheriting Validator<TRequest> are auto registered. if you'd like to also include validators inheriting FluentValidation.AbstractValidator<T>, set this to true. Declaration public bool IncludeAbstractValidators { set; } Property Value Type Description bool SourceGeneratorDiscoveredTypes when using the FastEndpoints.Generator package, do .AddRange(<AssemblyName>.DiscoveredTypes.All) on this property. doing so will use the types discovered during source generation instead of reflection based type discovery. call .AddRange() multiple times to register types from multiple referenced assemblies/projects. Declaration public List<Type> SourceGeneratorDiscoveredTypes { get; } Property Value Type Description List<Type>"
  },
  "api/FastEndpoints.EndpointFactory.html": {
    "href": "api/FastEndpoints.EndpointFactory.html",
    "title": "Class EndpointFactory | FastEndpoints",
    "keywords": "Class EndpointFactory the default endpoint factory. it creates an instance of the endpoint and injects both constructor and property dependencies. Inheritance object EndpointFactory Implements IEndpointFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class EndpointFactory : IEndpointFactory Methods Create(EndpointDefinition, HttpContext) this method is called per each request. Declaration public BaseEndpoint Create(EndpointDefinition definition, HttpContext ctx) Parameters Type Name Description EndpointDefinition definition the endpoint definition HttpContext ctx the http context for the current request Returns Type Description BaseEndpoint Implements IEndpointFactory"
  },
  "api/FastEndpoints.EndpointOptions.html": {
    "href": "api/FastEndpoints.EndpointOptions.html",
    "title": "Class EndpointOptions | FastEndpoints",
    "keywords": "Class EndpointOptions endpoint registration options Inheritance object EndpointOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class EndpointOptions Properties Configurator a configuration action to be performed on each endpoint definition during startup. some of the same methods you use inside Configure() method are available to be called on the EndpointDefinition parameter. this can be used to apply a set of common configuration settings globally to all endpoints. i.e. apply globally applicable settings here and specify only the settings applicable to individual endpoints from within each endpoints' Configure() method. app.UseFastEndpoints(c => c.Configurator = ep => { ep.AllowAnonymous(); ep.Description(b => b.Produces<ErrorResponse>(400)); }); Declaration public Action<EndpointDefinition>? Configurator { set; } Property Value Type Description Action<EndpointDefinition> Filter a function to filter out endpoints from auto registration. the function you set here will be executed for each endpoint during startup. you can inspect the EndpointSettings to check what the current endpoint is, if needed. return 'false' from the function if you want to exclude an endpoint from registration. return 'true' to include. this function will executed for each endpoint that has been discovered during startup. Declaration public Func<EndpointDefinition, bool>? Filter { set; } Property Value Type Description Func<EndpointDefinition, bool> RoutePrefix prefix for all routes (example 'api'). Declaration public string? RoutePrefix { set; } Property Value Type Description string ShortNames set to true if you'd like the endpoint names/ swagger operation ids to be just the endpoint class names instead of the full names including namespace. Declaration public bool ShortNames { set; } Property Value Type Description bool"
  },
  "api/FastEndpoints.EndpointSummary-1.html": {
    "href": "api/FastEndpoints.EndpointSummary-1.html",
    "title": "Class EndpointSummary<TRequest> | FastEndpoints",
    "keywords": "Class EndpointSummary<TRequest> a class used for providing a textual description about an endpoint for swagger Inheritance object EndpointSummary EndpointSummary<TRequest> Summary<TEndpoint, TRequest> Inherited Members EndpointSummary.this[int] EndpointSummary.Summary EndpointSummary.Description EndpointSummary.RequestExamples EndpointSummary.Params EndpointSummary.Responses EndpointSummary.ResponseExamples EndpointSummary.ResponseHeaders EndpointSummary.ResponseParam<TResponse>(int, Expression<Func<TResponse, object>>, string) EndpointSummary.ResponseParam<TResponse>(Expression<Func<TResponse, object>>, string) EndpointSummary.Response<TResponse>(int, string, string, TResponse) EndpointSummary.Response(int, string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public class EndpointSummary<TRequest> : EndpointSummary where TRequest : notnull Type Parameters Name Description TRequest the type of the request dto Properties ExampleRequest Declaration public TRequest? ExampleRequest { get; set; } Property Value Type Description TRequest Methods RequestParam(Expression<Func<TRequest, object?>>, string) add a description for a request param for a given property of the request dto Declaration public void RequestParam(Expression<Func<TRequest, object?>> property, string description) Parameters Type Name Description Expression<Func<TRequest, object>> property a member expression for specifying which property the description is for string description the description text"
  },
  "api/FastEndpoints.EndpointSummary.html": {
    "href": "api/FastEndpoints.EndpointSummary.html",
    "title": "Class EndpointSummary | FastEndpoints",
    "keywords": "Class EndpointSummary a class used for providing a textual description about an endpoint for swagger Inheritance object EndpointSummary EndpointSummary<TRequest> Summary<TEndpoint> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public class EndpointSummary Properties Description the long description of the endpoint Declaration public string Description { get; set; } Property Value Type Description string ExampleRequest an example request object to be used in swagger/ openapi. multiple examples can be specified by setting this property multiple times or by adding to the RequestExamples collection. Declaration public object? ExampleRequest { get; set; } Property Value Type Description object this[int] indexer for the response descriptions Declaration public string this[int statusCode] { get; set; } Parameters Type Name Description int statusCode the status code of the response you want to access Property Value Type Description string the text description Params the descriptions for endpoint parameters. you can add descriptions for route/query params and request dto properties. what you specify here will take precedence over xml comments of dto classes (if they are also specified). Declaration public Dictionary<string, string> Params { get; set; } Property Value Type Description Dictionary<string, string> RequestExamples specify multiple request examples by adding to this collection. Declaration public ICollection<object> RequestExamples { get; } Property Value Type Description ICollection<object> ResponseExamples the response examples for each status code Declaration public Dictionary<int, object> ResponseExamples { get; set; } Property Value Type Description Dictionary<int, object> ResponseHeaders Declaration public List<ResponseHeader> ResponseHeaders { get; set; } Property Value Type Description List<ResponseHeader> Responses the descriptions of the different responses/ status codes an endpoint can return Declaration public Dictionary<int, string> Responses { get; set; } Property Value Type Description Dictionary<int, string> Summary the short summary of the endpoint Declaration public string Summary { get; set; } Property Value Type Description string Methods Response(int, string?, string?) add a response description that doesn't have a response dto to the swagger document NOTE: if you use the this method, the default 200 response is automatically removed, and you'd have to specify the 200 response yourself if it applies to your endpoint. Declaration public void Response(int statusCode = 200, string? description = null, string? contentType = null) Parameters Type Name Description int statusCode http status code string description the description of the response string contentType the media/content type of the response ResponseParam<TResponse>(int, Expression<Func<TResponse, object?>>, string) add a description for a given property of a given response dto Declaration public void ResponseParam<TResponse>(int statusCode, Expression<Func<TResponse, object?>> property, string description) Parameters Type Name Description int statusCode the status code of the response you want to add the descriptions for Expression<Func<TResponse, object>> property a member expression for specifying which property the description is for string description the description text Type Parameters Name Description TResponse ResponseParam<TResponse>(Expression<Func<TResponse, object?>>, string) add a description for a given property of the 200 response dto Declaration public void ResponseParam<TResponse>(Expression<Func<TResponse, object?>> property, string description) Parameters Type Name Description Expression<Func<TResponse, object>> property a member expression for specifying which property the description is for string description the description text Type Parameters Name Description TResponse Response<TResponse>(int, string?, string, TResponse?) add a response description to the swagger document NOTE: if you use the this method, the default 200 response is automatically removed, and you'd have to specify the 200 response yourself if it applies to your endpoint. Declaration public void Response<TResponse>(int statusCode = 200, string? description = null, string contentType = \"application/json\", TResponse? example = default) Parameters Type Name Description int statusCode http status code string description the description of the response string contentType the media/content type of the response TResponse example and example response dto instance Type Parameters Name Description TResponse the type of the response dto"
  },
  "api/FastEndpoints.EndpointWithMapper-2.html": {
    "href": "api/FastEndpoints.EndpointWithMapper-2.html",
    "title": "Class EndpointWithMapper<TRequest, TMapper> | FastEndpoints",
    "keywords": "Class EndpointWithMapper<TRequest, TMapper> use this base class for defining endpoints that only use a request dto and don't use a response dto but uses a request mapper. Inheritance object BaseEndpoint Endpoint<TRequest, object> EndpointWithMapper<TRequest, TMapper> Implements IEndpoint IEventBus IServiceResolverBase IHasMapper<TMapper> IHasMapper Inherited Members Endpoint<TRequest, object>.HandleAsync(TRequest, CancellationToken) Endpoint<TRequest, object>.ExecuteAsync(TRequest, CancellationToken) Endpoint<TRequest, object>.TryResolve<TService>() Endpoint<TRequest, object>.TryResolve(Type) Endpoint<TRequest, object>.Resolve<TService>() Endpoint<TRequest, object>.Resolve(Type) Endpoint<TRequest, object>.CreateScope() Endpoint<TRequest, object>.Route<T>(string, bool) Endpoint<TRequest, object>.Query<T>(string, bool) Endpoint<TRequest, object>.FormFileSectionsAsync(CancellationToken) Endpoint<TRequest, object>.PublishAsync<TEvent>(TEvent, Mode, CancellationToken) Endpoint<TRequest, object>.CreateTokenWith<TService>(string, Action<UserPrivileges>) Endpoint<TRequest, object>.ProcessorState<TState>() Endpoint<TRequest, object>.OnBeforeValidate(TRequest) Endpoint<TRequest, object>.OnBeforeValidateAsync(TRequest, CancellationToken) Endpoint<TRequest, object>.OnAfterValidate(TRequest) Endpoint<TRequest, object>.OnAfterValidateAsync(TRequest, CancellationToken) Endpoint<TRequest, object>.OnBeforeHandle(TRequest) Endpoint<TRequest, object>.OnBeforeHandleAsync(TRequest, CancellationToken) Endpoint<TRequest, object>.OnAfterHandle(TRequest, object) Endpoint<TRequest, object>.OnAfterHandleAsync(TRequest, object, CancellationToken) Endpoint<TRequest, object>.OnValidationFailed() Endpoint<TRequest, object>.OnValidationFailedAsync(CancellationToken) Endpoint<TRequest, object>.User Endpoint<TRequest, object>.Response Endpoint<TRequest, object>.Config Endpoint<TRequest, object>.Env Endpoint<TRequest, object>.Logger Endpoint<TRequest, object>.BaseURL Endpoint<TRequest, object>.HttpMethod Endpoint<TRequest, object>.Form Endpoint<TRequest, object>.Files Endpoint<TRequest, object>.ResponseStarted Endpoint<TRequest, object>.SendAsync(object, int, CancellationToken) Endpoint<TRequest, object>.SendResultAsync(IResult) Endpoint<TRequest, object>.SendInterceptedAsync(object, int, CancellationToken) Endpoint<TRequest, object>.SendCreatedAtAsync<TEndpoint>(object, object, Http?, int?, bool, CancellationToken) Endpoint<TRequest, object>.SendCreatedAtAsync(string, object, object, bool, CancellationToken) Endpoint<TRequest, object>.SendStringAsync(string, int, string, CancellationToken) Endpoint<TRequest, object>.SendOkAsync(object, CancellationToken) Endpoint<TRequest, object>.SendOkAsync(CancellationToken) Endpoint<TRequest, object>.SendErrorsAsync(int, CancellationToken) Endpoint<TRequest, object>.SendNoContentAsync(CancellationToken) Endpoint<TRequest, object>.SendNotFoundAsync(CancellationToken) Endpoint<TRequest, object>.SendUnauthorizedAsync(CancellationToken) Endpoint<TRequest, object>.SendForbiddenAsync(CancellationToken) Endpoint<TRequest, object>.SendRedirectAsync(string, bool, CancellationToken) Endpoint<TRequest, object>.SendHeadersAsync(Action<IHeaderDictionary>, int, CancellationToken) Endpoint<TRequest, object>.SendBytesAsync(byte[], string, string, DateTimeOffset?, bool, CancellationToken) Endpoint<TRequest, object>.SendFileAsync(FileInfo, string, DateTimeOffset?, bool, CancellationToken) Endpoint<TRequest, object>.SendStreamAsync(Stream, string, long?, string, DateTimeOffset?, bool, CancellationToken) Endpoint<TRequest, object>.SendEventStreamAsync<T>(string, IAsyncEnumerable<T>, CancellationToken) Endpoint<TRequest, object>.SendEmptyJsonObject(CancellationToken) Endpoint<TRequest, object>.AccessControl(string, Apply?, params string[]) Endpoint<TRequest, object>.AccessControl(string, params string[]) Endpoint<TRequest, object>.AllowAnonymous(params Http[]) Endpoint<TRequest, object>.AllowAnonymous(string[]) Endpoint<TRequest, object>.AllowFileUploads(bool) Endpoint<TRequest, object>.AllowFormData(bool) Endpoint<TRequest, object>.AuthSchemes(params string[]) Endpoint<TRequest, object>.Claims(params string[]) Endpoint<TRequest, object>.ClaimsAll(params string[]) Endpoint<TRequest, object>.Delete(params string[]) Endpoint<TRequest, object>.Delete(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, object>.Description(Action<RouteHandlerBuilder>, bool) Endpoint<TRequest, object>.DontAutoTag() Endpoint<TRequest, object>.DontCatchExceptions() Endpoint<TRequest, object>.DontThrowIfValidationFails() Endpoint<TRequest, object>.EnableAntiforgery() Endpoint<TRequest, object>.Get(params string[]) Endpoint<TRequest, object>.Get(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, object>.Group<TEndpointGroup>() Endpoint<TRequest, object>.Head(params string[]) Endpoint<TRequest, object>.Head(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, object>.Options(Action<RouteHandlerBuilder>) Endpoint<TRequest, object>.Patch(params string[]) Endpoint<TRequest, object>.Patch(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, object>.Permissions(params string[]) Endpoint<TRequest, object>.PermissionsAll(params string[]) Endpoint<TRequest, object>.Policy(Action<AuthorizationPolicyBuilder>) Endpoint<TRequest, object>.Policies(params string[]) Endpoint<TRequest, object>.Post(params string[]) Endpoint<TRequest, object>.Post(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, object>.PostProcessor<TPostProcessor>() Endpoint<TRequest, object>.PostProcessors(params IPostProcessor<TRequest, object>[]) Endpoint<TRequest, object>.PreProcessor<TPreProcessor>() Endpoint<TRequest, object>.PreProcessors(params IPreProcessor<TRequest>[]) Endpoint<TRequest, object>.Put(params string[]) Endpoint<TRequest, object>.Put(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, object>.RequestBinder(IRequestBinder<TRequest>) Endpoint<TRequest, object>.ResponseCache(int, ResponseCacheLocation, bool, string, string[]) Endpoint<TRequest, object>.ResponseInterceptor(IResponseInterceptor) Endpoint<TRequest, object>.Roles(params string[]) Endpoint<TRequest, object>.RoutePrefixOverride(string) Endpoint<TRequest, object>.Routes(params string[]) Endpoint<TRequest, object>.SerializerContext<TContext>(TContext) Endpoint<TRequest, object>.SerializerContext<TContext>() Endpoint<TRequest, object>.Summary(Action<EndpointSummary>) Endpoint<TRequest, object>.Summary(Action<EndpointSummary<TRequest>>) Endpoint<TRequest, object>.Summary(EndpointSummary) Endpoint<TRequest, object>.Tags(params string[]) Endpoint<TRequest, object>.Throttle(int, double, string) Endpoint<TRequest, object>.Validator<TValidator>() Endpoint<TRequest, object>.Verbs(params Http[]) Endpoint<TRequest, object>.Verbs(params string[]) Endpoint<TRequest, object>.Version(int, int?) Endpoint<TRequest, object>.ValidationFailed Endpoint<TRequest, object>.AddError(ValidationFailure) Endpoint<TRequest, object>.AddError(string, string, Severity) Endpoint<TRequest, object>.AddError(Expression<Func<TRequest, object>>, string, string, Severity) Endpoint<TRequest, object>.ThrowError(ValidationFailure, int?) Endpoint<TRequest, object>.ThrowError(string, int?) Endpoint<TRequest, object>.ThrowError(Expression<Func<TRequest, object>>, string, int?) Endpoint<TRequest, object>.ThrowIfAnyErrors(int?) BaseEndpoint.Definition BaseEndpoint.HttpContext BaseEndpoint.ValidationFailures BaseEndpoint.Configure() BaseEndpoint.Verbs(params string[]) BaseEndpoint.Group<TEndpointGroup>() BaseEndpoint.GetAclHash(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class EndpointWithMapper<TRequest, TMapper> : Endpoint<TRequest, object?>, IEndpoint, IEventBus, IServiceResolverBase, IHasMapper<TMapper>, IHasMapper where TRequest : notnull where TMapper : IRequestMapper Type Parameters Name Description TRequest the type of the request dto TMapper the type of the entity mapper Properties Map the entity mapper for the endpoint HINT: entity mappers are singletons for performance reasons. do not maintain state in the mappers. Declaration public TMapper Map { get; set; } Property Value Type Description TMapper Implements IEndpoint IEventBus IServiceResolverBase IHasMapper<TMapper> IHasMapper"
  },
  "api/FastEndpoints.EndpointWithMapping-3.html": {
    "href": "api/FastEndpoints.EndpointWithMapping-3.html",
    "title": "Class EndpointWithMapping<TRequest, TResponse, TEntity> | FastEndpoints",
    "keywords": "Class EndpointWithMapping<TRequest, TResponse, TEntity> use this base class for defining endpoints that use both request and response dtos as well as require mapping to and from a domain entity. Inheritance object BaseEndpoint Endpoint<TRequest, TResponse> EndpointWithMapping<TRequest, TResponse, TEntity> Implements IEndpoint IEventBus IServiceResolverBase Inherited Members Endpoint<TRequest, TResponse>.HandleAsync(TRequest, CancellationToken) Endpoint<TRequest, TResponse>.ExecuteAsync(TRequest, CancellationToken) Endpoint<TRequest, TResponse>.TryResolve<TService>() Endpoint<TRequest, TResponse>.TryResolve(Type) Endpoint<TRequest, TResponse>.Resolve<TService>() Endpoint<TRequest, TResponse>.Resolve(Type) Endpoint<TRequest, TResponse>.CreateScope() Endpoint<TRequest, TResponse>.Route<T>(string, bool) Endpoint<TRequest, TResponse>.Query<T>(string, bool) Endpoint<TRequest, TResponse>.FormFileSectionsAsync(CancellationToken) Endpoint<TRequest, TResponse>.PublishAsync<TEvent>(TEvent, Mode, CancellationToken) Endpoint<TRequest, TResponse>.CreateTokenWith<TService>(string, Action<UserPrivileges>) Endpoint<TRequest, TResponse>.ProcessorState<TState>() Endpoint<TRequest, TResponse>.OnBeforeValidate(TRequest) Endpoint<TRequest, TResponse>.OnBeforeValidateAsync(TRequest, CancellationToken) Endpoint<TRequest, TResponse>.OnAfterValidate(TRequest) Endpoint<TRequest, TResponse>.OnAfterValidateAsync(TRequest, CancellationToken) Endpoint<TRequest, TResponse>.OnBeforeHandle(TRequest) Endpoint<TRequest, TResponse>.OnBeforeHandleAsync(TRequest, CancellationToken) Endpoint<TRequest, TResponse>.OnAfterHandle(TRequest, TResponse) Endpoint<TRequest, TResponse>.OnAfterHandleAsync(TRequest, TResponse, CancellationToken) Endpoint<TRequest, TResponse>.OnValidationFailed() Endpoint<TRequest, TResponse>.OnValidationFailedAsync(CancellationToken) Endpoint<TRequest, TResponse>.User Endpoint<TRequest, TResponse>.Response Endpoint<TRequest, TResponse>.Config Endpoint<TRequest, TResponse>.Env Endpoint<TRequest, TResponse>.Logger Endpoint<TRequest, TResponse>.BaseURL Endpoint<TRequest, TResponse>.HttpMethod Endpoint<TRequest, TResponse>.Form Endpoint<TRequest, TResponse>.Files Endpoint<TRequest, TResponse>.ResponseStarted Endpoint<TRequest, TResponse>.SendAsync(TResponse, int, CancellationToken) Endpoint<TRequest, TResponse>.SendResultAsync(IResult) Endpoint<TRequest, TResponse>.SendInterceptedAsync(object, int, CancellationToken) Endpoint<TRequest, TResponse>.SendCreatedAtAsync<TEndpoint>(object, TResponse, Http?, int?, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendCreatedAtAsync(string, object, TResponse, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendStringAsync(string, int, string, CancellationToken) Endpoint<TRequest, TResponse>.SendOkAsync(TResponse, CancellationToken) Endpoint<TRequest, TResponse>.SendOkAsync(CancellationToken) Endpoint<TRequest, TResponse>.SendErrorsAsync(int, CancellationToken) Endpoint<TRequest, TResponse>.SendNoContentAsync(CancellationToken) Endpoint<TRequest, TResponse>.SendNotFoundAsync(CancellationToken) Endpoint<TRequest, TResponse>.SendUnauthorizedAsync(CancellationToken) Endpoint<TRequest, TResponse>.SendForbiddenAsync(CancellationToken) Endpoint<TRequest, TResponse>.SendRedirectAsync(string, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendHeadersAsync(Action<IHeaderDictionary>, int, CancellationToken) Endpoint<TRequest, TResponse>.SendBytesAsync(byte[], string, string, DateTimeOffset?, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendFileAsync(FileInfo, string, DateTimeOffset?, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendStreamAsync(Stream, string, long?, string, DateTimeOffset?, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendEventStreamAsync<T>(string, IAsyncEnumerable<T>, CancellationToken) Endpoint<TRequest, TResponse>.SendEmptyJsonObject(CancellationToken) Endpoint<TRequest, TResponse>.AccessControl(string, Apply?, params string[]) Endpoint<TRequest, TResponse>.AccessControl(string, params string[]) Endpoint<TRequest, TResponse>.AllowAnonymous(params Http[]) Endpoint<TRequest, TResponse>.AllowAnonymous(string[]) Endpoint<TRequest, TResponse>.AllowFileUploads(bool) Endpoint<TRequest, TResponse>.AllowFormData(bool) Endpoint<TRequest, TResponse>.AuthSchemes(params string[]) Endpoint<TRequest, TResponse>.Claims(params string[]) Endpoint<TRequest, TResponse>.ClaimsAll(params string[]) Endpoint<TRequest, TResponse>.Delete(params string[]) Endpoint<TRequest, TResponse>.Delete(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.Description(Action<RouteHandlerBuilder>, bool) Endpoint<TRequest, TResponse>.DontAutoTag() Endpoint<TRequest, TResponse>.DontCatchExceptions() Endpoint<TRequest, TResponse>.DontThrowIfValidationFails() Endpoint<TRequest, TResponse>.EnableAntiforgery() Endpoint<TRequest, TResponse>.Get(params string[]) Endpoint<TRequest, TResponse>.Get(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.Group<TEndpointGroup>() Endpoint<TRequest, TResponse>.Head(params string[]) Endpoint<TRequest, TResponse>.Head(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.Options(Action<RouteHandlerBuilder>) Endpoint<TRequest, TResponse>.Patch(params string[]) Endpoint<TRequest, TResponse>.Patch(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.Permissions(params string[]) Endpoint<TRequest, TResponse>.PermissionsAll(params string[]) Endpoint<TRequest, TResponse>.Policy(Action<AuthorizationPolicyBuilder>) Endpoint<TRequest, TResponse>.Policies(params string[]) Endpoint<TRequest, TResponse>.Post(params string[]) Endpoint<TRequest, TResponse>.Post(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.PostProcessor<TPostProcessor>() Endpoint<TRequest, TResponse>.PostProcessors(params IPostProcessor<TRequest, TResponse>[]) Endpoint<TRequest, TResponse>.PreProcessor<TPreProcessor>() Endpoint<TRequest, TResponse>.PreProcessors(params IPreProcessor<TRequest>[]) Endpoint<TRequest, TResponse>.Put(params string[]) Endpoint<TRequest, TResponse>.Put(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.RequestBinder(IRequestBinder<TRequest>) Endpoint<TRequest, TResponse>.ResponseCache(int, ResponseCacheLocation, bool, string, string[]) Endpoint<TRequest, TResponse>.ResponseInterceptor(IResponseInterceptor) Endpoint<TRequest, TResponse>.Roles(params string[]) Endpoint<TRequest, TResponse>.RoutePrefixOverride(string) Endpoint<TRequest, TResponse>.Routes(params string[]) Endpoint<TRequest, TResponse>.SerializerContext<TContext>(TContext) Endpoint<TRequest, TResponse>.SerializerContext<TContext>() Endpoint<TRequest, TResponse>.Summary(Action<EndpointSummary>) Endpoint<TRequest, TResponse>.Summary(Action<EndpointSummary<TRequest>>) Endpoint<TRequest, TResponse>.Summary(EndpointSummary) Endpoint<TRequest, TResponse>.Tags(params string[]) Endpoint<TRequest, TResponse>.Throttle(int, double, string) Endpoint<TRequest, TResponse>.Validator<TValidator>() Endpoint<TRequest, TResponse>.Verbs(params Http[]) Endpoint<TRequest, TResponse>.Verbs(params string[]) Endpoint<TRequest, TResponse>.Version(int, int?) Endpoint<TRequest, TResponse>.ValidationFailed Endpoint<TRequest, TResponse>.AddError(ValidationFailure) Endpoint<TRequest, TResponse>.AddError(string, string, Severity) Endpoint<TRequest, TResponse>.AddError(Expression<Func<TRequest, object>>, string, string, Severity) Endpoint<TRequest, TResponse>.ThrowError(ValidationFailure, int?) Endpoint<TRequest, TResponse>.ThrowError(string, int?) Endpoint<TRequest, TResponse>.ThrowError(Expression<Func<TRequest, object>>, string, int?) Endpoint<TRequest, TResponse>.ThrowIfAnyErrors(int?) BaseEndpoint.Definition BaseEndpoint.HttpContext BaseEndpoint.ValidationFailures BaseEndpoint.Configure() BaseEndpoint.Verbs(params string[]) BaseEndpoint.Group<TEndpointGroup>() BaseEndpoint.GetAclHash(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class EndpointWithMapping<TRequest, TResponse, TEntity> : Endpoint<TRequest, TResponse>, IEndpoint, IEventBus, IServiceResolverBase where TRequest : notnull Type Parameters Name Description TRequest the type of the request dto TResponse the type of the response dto TEntity the type of domain entity that will be mapped to/from Methods MapFromEntity(TEntity) override this method and place the logic for mapping a domain entity to a response dto Declaration public virtual TResponse MapFromEntity(TEntity e) Parameters Type Name Description TEntity e the domain entity to map from Returns Type Description TResponse MapFromEntityAsync(TEntity, CancellationToken) override this method and place the logic for mapping a domain entity to a response dto Declaration public virtual Task<TResponse> MapFromEntityAsync(TEntity e, CancellationToken ct = default) Parameters Type Name Description TEntity e the domain entity to map from CancellationToken ct a cancellation token Returns Type Description Task<TResponse> MapToEntity(TRequest) override this method and place the logic for mapping the request dto to the desired domain entity Declaration public virtual TEntity MapToEntity(TRequest r) Parameters Type Name Description TRequest r the request dto Returns Type Description TEntity MapToEntityAsync(TRequest, CancellationToken) override this method and place the logic for mapping the request dto to the desired domain entity Declaration public virtual Task<TEntity> MapToEntityAsync(TRequest r, CancellationToken ct = default) Parameters Type Name Description TRequest r the request dto to map from CancellationToken ct a cancellation token Returns Type Description Task<TEntity> Implements IEndpoint IEventBus IServiceResolverBase"
  },
  "api/FastEndpoints.EndpointWithoutRequest-1.html": {
    "href": "api/FastEndpoints.EndpointWithoutRequest-1.html",
    "title": "Class EndpointWithoutRequest<TResponse> | FastEndpoints",
    "keywords": "Class EndpointWithoutRequest<TResponse> use this base class for defining endpoints that doesn't need a request dto but return a response dto. Inheritance object BaseEndpoint Endpoint<EmptyRequest, TResponse> EndpointWithoutRequest<TResponse> EndpointWithoutRequest<TResponse, TMapper> Implements IEndpoint IEventBus IServiceResolverBase Inherited Members Endpoint<EmptyRequest, TResponse>.HandleAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, TResponse>.ExecuteAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, TResponse>.TryResolve<TService>() Endpoint<EmptyRequest, TResponse>.TryResolve(Type) Endpoint<EmptyRequest, TResponse>.Resolve<TService>() Endpoint<EmptyRequest, TResponse>.Resolve(Type) Endpoint<EmptyRequest, TResponse>.CreateScope() Endpoint<EmptyRequest, TResponse>.Route<T>(string, bool) Endpoint<EmptyRequest, TResponse>.Query<T>(string, bool) Endpoint<EmptyRequest, TResponse>.FormFileSectionsAsync(CancellationToken) Endpoint<EmptyRequest, TResponse>.PublishAsync<TEvent>(TEvent, Mode, CancellationToken) Endpoint<EmptyRequest, TResponse>.CreateTokenWith<TService>(string, Action<UserPrivileges>) Endpoint<EmptyRequest, TResponse>.ProcessorState<TState>() Endpoint<EmptyRequest, TResponse>.OnBeforeValidate(EmptyRequest) Endpoint<EmptyRequest, TResponse>.OnBeforeValidateAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, TResponse>.OnAfterValidate(EmptyRequest) Endpoint<EmptyRequest, TResponse>.OnAfterValidateAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, TResponse>.OnBeforeHandle(EmptyRequest) Endpoint<EmptyRequest, TResponse>.OnBeforeHandleAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, TResponse>.OnAfterHandle(EmptyRequest, TResponse) Endpoint<EmptyRequest, TResponse>.OnAfterHandleAsync(EmptyRequest, TResponse, CancellationToken) Endpoint<EmptyRequest, TResponse>.OnValidationFailed() Endpoint<EmptyRequest, TResponse>.OnValidationFailedAsync(CancellationToken) Endpoint<EmptyRequest, TResponse>.User Endpoint<EmptyRequest, TResponse>.Response Endpoint<EmptyRequest, TResponse>.Config Endpoint<EmptyRequest, TResponse>.Env Endpoint<EmptyRequest, TResponse>.Logger Endpoint<EmptyRequest, TResponse>.BaseURL Endpoint<EmptyRequest, TResponse>.HttpMethod Endpoint<EmptyRequest, TResponse>.Form Endpoint<EmptyRequest, TResponse>.Files Endpoint<EmptyRequest, TResponse>.ResponseStarted Endpoint<EmptyRequest, TResponse>.SendAsync(TResponse, int, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendResultAsync(IResult) Endpoint<EmptyRequest, TResponse>.SendInterceptedAsync(object, int, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendCreatedAtAsync<TEndpoint>(object, TResponse, Http?, int?, bool, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendCreatedAtAsync(string, object, TResponse, bool, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendStringAsync(string, int, string, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendOkAsync(TResponse, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendOkAsync(CancellationToken) Endpoint<EmptyRequest, TResponse>.SendErrorsAsync(int, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendNoContentAsync(CancellationToken) Endpoint<EmptyRequest, TResponse>.SendNotFoundAsync(CancellationToken) Endpoint<EmptyRequest, TResponse>.SendUnauthorizedAsync(CancellationToken) Endpoint<EmptyRequest, TResponse>.SendForbiddenAsync(CancellationToken) Endpoint<EmptyRequest, TResponse>.SendRedirectAsync(string, bool, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendHeadersAsync(Action<IHeaderDictionary>, int, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendBytesAsync(byte[], string, string, DateTimeOffset?, bool, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendFileAsync(FileInfo, string, DateTimeOffset?, bool, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendStreamAsync(Stream, string, long?, string, DateTimeOffset?, bool, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendEventStreamAsync<T>(string, IAsyncEnumerable<T>, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendEmptyJsonObject(CancellationToken) Endpoint<EmptyRequest, TResponse>.AccessControl(string, Apply?, params string[]) Endpoint<EmptyRequest, TResponse>.AccessControl(string, params string[]) Endpoint<EmptyRequest, TResponse>.AllowAnonymous(params Http[]) Endpoint<EmptyRequest, TResponse>.AllowAnonymous(string[]) Endpoint<EmptyRequest, TResponse>.AllowFileUploads(bool) Endpoint<EmptyRequest, TResponse>.AllowFormData(bool) Endpoint<EmptyRequest, TResponse>.AuthSchemes(params string[]) Endpoint<EmptyRequest, TResponse>.Claims(params string[]) Endpoint<EmptyRequest, TResponse>.ClaimsAll(params string[]) Endpoint<EmptyRequest, TResponse>.Delete(params string[]) Endpoint<EmptyRequest, TResponse>.Delete(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, TResponse>.Description(Action<RouteHandlerBuilder>, bool) Endpoint<EmptyRequest, TResponse>.DontAutoTag() Endpoint<EmptyRequest, TResponse>.DontCatchExceptions() Endpoint<EmptyRequest, TResponse>.DontThrowIfValidationFails() Endpoint<EmptyRequest, TResponse>.EnableAntiforgery() Endpoint<EmptyRequest, TResponse>.Get(params string[]) Endpoint<EmptyRequest, TResponse>.Get(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, TResponse>.Group<TEndpointGroup>() Endpoint<EmptyRequest, TResponse>.Head(params string[]) Endpoint<EmptyRequest, TResponse>.Head(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, TResponse>.Options(Action<RouteHandlerBuilder>) Endpoint<EmptyRequest, TResponse>.Patch(params string[]) Endpoint<EmptyRequest, TResponse>.Patch(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, TResponse>.Permissions(params string[]) Endpoint<EmptyRequest, TResponse>.PermissionsAll(params string[]) Endpoint<EmptyRequest, TResponse>.Policy(Action<AuthorizationPolicyBuilder>) Endpoint<EmptyRequest, TResponse>.Policies(params string[]) Endpoint<EmptyRequest, TResponse>.Post(params string[]) Endpoint<EmptyRequest, TResponse>.Post(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, TResponse>.PostProcessor<TPostProcessor>() Endpoint<EmptyRequest, TResponse>.PostProcessors(params IPostProcessor<EmptyRequest, TResponse>[]) Endpoint<EmptyRequest, TResponse>.PreProcessor<TPreProcessor>() Endpoint<EmptyRequest, TResponse>.PreProcessors(params IPreProcessor<EmptyRequest>[]) Endpoint<EmptyRequest, TResponse>.Put(params string[]) Endpoint<EmptyRequest, TResponse>.Put(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, TResponse>.RequestBinder(IRequestBinder<EmptyRequest>) Endpoint<EmptyRequest, TResponse>.ResponseCache(int, ResponseCacheLocation, bool, string, string[]) Endpoint<EmptyRequest, TResponse>.ResponseInterceptor(IResponseInterceptor) Endpoint<EmptyRequest, TResponse>.Roles(params string[]) Endpoint<EmptyRequest, TResponse>.RoutePrefixOverride(string) Endpoint<EmptyRequest, TResponse>.Routes(params string[]) Endpoint<EmptyRequest, TResponse>.SerializerContext<TContext>(TContext) Endpoint<EmptyRequest, TResponse>.SerializerContext<TContext>() Endpoint<EmptyRequest, TResponse>.Summary(Action<EndpointSummary>) Endpoint<EmptyRequest, TResponse>.Summary(Action<EndpointSummary<EmptyRequest>>) Endpoint<EmptyRequest, TResponse>.Summary(EndpointSummary) Endpoint<EmptyRequest, TResponse>.Tags(params string[]) Endpoint<EmptyRequest, TResponse>.Throttle(int, double, string) Endpoint<EmptyRequest, TResponse>.Validator<TValidator>() Endpoint<EmptyRequest, TResponse>.Verbs(params Http[]) Endpoint<EmptyRequest, TResponse>.Verbs(params string[]) Endpoint<EmptyRequest, TResponse>.Version(int, int?) Endpoint<EmptyRequest, TResponse>.ValidationFailed Endpoint<EmptyRequest, TResponse>.AddError(ValidationFailure) Endpoint<EmptyRequest, TResponse>.AddError(string, string, Severity) Endpoint<EmptyRequest, TResponse>.AddError(Expression<Func<EmptyRequest, object>>, string, string, Severity) Endpoint<EmptyRequest, TResponse>.ThrowError(ValidationFailure, int?) Endpoint<EmptyRequest, TResponse>.ThrowError(string, int?) Endpoint<EmptyRequest, TResponse>.ThrowError(Expression<Func<EmptyRequest, object>>, string, int?) Endpoint<EmptyRequest, TResponse>.ThrowIfAnyErrors(int?) BaseEndpoint.Definition BaseEndpoint.HttpContext BaseEndpoint.ValidationFailures BaseEndpoint.Configure() BaseEndpoint.Verbs(params string[]) BaseEndpoint.Group<TEndpointGroup>() BaseEndpoint.GetAclHash(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class EndpointWithoutRequest<TResponse> : Endpoint<EmptyRequest, TResponse>, IEndpoint, IEventBus, IServiceResolverBase Type Parameters Name Description TResponse the type of the response dto Methods ExecuteAsync(EmptyRequest, CancellationToken) override the ExecuteAsync(CancellationToken ct) method instead of using this method! Declaration public override sealed Task<TResponse> ExecuteAsync(EmptyRequest _, CancellationToken ct) Parameters Type Name Description EmptyRequest _ CancellationToken ct Returns Type Description Task<TResponse> Overrides Endpoint<EmptyRequest, TResponse>.ExecuteAsync(EmptyRequest, CancellationToken) ExecuteAsync(CancellationToken) the handler method for the endpoint that returns the response dto. this method is called for each request received. Declaration public virtual Task<TResponse> ExecuteAsync(CancellationToken ct) Parameters Type Name Description CancellationToken ct a cancellation token Returns Type Description Task<TResponse> HandleAsync(EmptyRequest, CancellationToken) override the HandleAsync(CancellationToken ct) method instead of using this method! Declaration public override sealed Task HandleAsync(EmptyRequest _, CancellationToken ct) Parameters Type Name Description EmptyRequest _ CancellationToken ct Returns Type Description Task Overrides Endpoint<EmptyRequest, TResponse>.HandleAsync(EmptyRequest, CancellationToken) HandleAsync(CancellationToken) the handler method for the endpoint. this method is called for each request received. Declaration public virtual Task HandleAsync(CancellationToken ct) Parameters Type Name Description CancellationToken ct a cancellation token Returns Type Description Task Implements IEndpoint IEventBus IServiceResolverBase"
  },
  "api/FastEndpoints.EndpointWithoutRequest-2.html": {
    "href": "api/FastEndpoints.EndpointWithoutRequest-2.html",
    "title": "Class EndpointWithoutRequest<TResponse, TMapper> | FastEndpoints",
    "keywords": "Class EndpointWithoutRequest<TResponse, TMapper> use this base class for defining endpoints that doesn't need a request dto but return a response dto and uses a response mapper. Inheritance object BaseEndpoint Endpoint<EmptyRequest, TResponse> EndpointWithoutRequest<TResponse> EndpointWithoutRequest<TResponse, TMapper> Implements IEndpoint IEventBus IServiceResolverBase IHasMapper<TMapper> IHasMapper Inherited Members EndpointWithoutRequest<TResponse>.HandleAsync(CancellationToken) EndpointWithoutRequest<TResponse>.HandleAsync(EmptyRequest, CancellationToken) EndpointWithoutRequest<TResponse>.ExecuteAsync(CancellationToken) EndpointWithoutRequest<TResponse>.ExecuteAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, TResponse>.HandleAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, TResponse>.ExecuteAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, TResponse>.TryResolve<TService>() Endpoint<EmptyRequest, TResponse>.TryResolve(Type) Endpoint<EmptyRequest, TResponse>.Resolve<TService>() Endpoint<EmptyRequest, TResponse>.Resolve(Type) Endpoint<EmptyRequest, TResponse>.CreateScope() Endpoint<EmptyRequest, TResponse>.Route<T>(string, bool) Endpoint<EmptyRequest, TResponse>.Query<T>(string, bool) Endpoint<EmptyRequest, TResponse>.FormFileSectionsAsync(CancellationToken) Endpoint<EmptyRequest, TResponse>.PublishAsync<TEvent>(TEvent, Mode, CancellationToken) Endpoint<EmptyRequest, TResponse>.CreateTokenWith<TService>(string, Action<UserPrivileges>) Endpoint<EmptyRequest, TResponse>.ProcessorState<TState>() Endpoint<EmptyRequest, TResponse>.OnBeforeValidate(EmptyRequest) Endpoint<EmptyRequest, TResponse>.OnBeforeValidateAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, TResponse>.OnAfterValidate(EmptyRequest) Endpoint<EmptyRequest, TResponse>.OnAfterValidateAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, TResponse>.OnBeforeHandle(EmptyRequest) Endpoint<EmptyRequest, TResponse>.OnBeforeHandleAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, TResponse>.OnAfterHandle(EmptyRequest, TResponse) Endpoint<EmptyRequest, TResponse>.OnAfterHandleAsync(EmptyRequest, TResponse, CancellationToken) Endpoint<EmptyRequest, TResponse>.OnValidationFailed() Endpoint<EmptyRequest, TResponse>.OnValidationFailedAsync(CancellationToken) Endpoint<EmptyRequest, TResponse>.User Endpoint<EmptyRequest, TResponse>.Response Endpoint<EmptyRequest, TResponse>.Config Endpoint<EmptyRequest, TResponse>.Env Endpoint<EmptyRequest, TResponse>.Logger Endpoint<EmptyRequest, TResponse>.BaseURL Endpoint<EmptyRequest, TResponse>.HttpMethod Endpoint<EmptyRequest, TResponse>.Form Endpoint<EmptyRequest, TResponse>.Files Endpoint<EmptyRequest, TResponse>.ResponseStarted Endpoint<EmptyRequest, TResponse>.SendAsync(TResponse, int, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendResultAsync(IResult) Endpoint<EmptyRequest, TResponse>.SendInterceptedAsync(object, int, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendCreatedAtAsync<TEndpoint>(object, TResponse, Http?, int?, bool, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendCreatedAtAsync(string, object, TResponse, bool, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendStringAsync(string, int, string, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendOkAsync(TResponse, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendOkAsync(CancellationToken) Endpoint<EmptyRequest, TResponse>.SendErrorsAsync(int, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendNoContentAsync(CancellationToken) Endpoint<EmptyRequest, TResponse>.SendNotFoundAsync(CancellationToken) Endpoint<EmptyRequest, TResponse>.SendUnauthorizedAsync(CancellationToken) Endpoint<EmptyRequest, TResponse>.SendForbiddenAsync(CancellationToken) Endpoint<EmptyRequest, TResponse>.SendRedirectAsync(string, bool, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendHeadersAsync(Action<IHeaderDictionary>, int, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendBytesAsync(byte[], string, string, DateTimeOffset?, bool, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendFileAsync(FileInfo, string, DateTimeOffset?, bool, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendStreamAsync(Stream, string, long?, string, DateTimeOffset?, bool, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendEventStreamAsync<T>(string, IAsyncEnumerable<T>, CancellationToken) Endpoint<EmptyRequest, TResponse>.SendEmptyJsonObject(CancellationToken) Endpoint<EmptyRequest, TResponse>.AccessControl(string, Apply?, params string[]) Endpoint<EmptyRequest, TResponse>.AccessControl(string, params string[]) Endpoint<EmptyRequest, TResponse>.AllowAnonymous(params Http[]) Endpoint<EmptyRequest, TResponse>.AllowAnonymous(string[]) Endpoint<EmptyRequest, TResponse>.AllowFileUploads(bool) Endpoint<EmptyRequest, TResponse>.AllowFormData(bool) Endpoint<EmptyRequest, TResponse>.AuthSchemes(params string[]) Endpoint<EmptyRequest, TResponse>.Claims(params string[]) Endpoint<EmptyRequest, TResponse>.ClaimsAll(params string[]) Endpoint<EmptyRequest, TResponse>.Delete(params string[]) Endpoint<EmptyRequest, TResponse>.Delete(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, TResponse>.Description(Action<RouteHandlerBuilder>, bool) Endpoint<EmptyRequest, TResponse>.DontAutoTag() Endpoint<EmptyRequest, TResponse>.DontCatchExceptions() Endpoint<EmptyRequest, TResponse>.DontThrowIfValidationFails() Endpoint<EmptyRequest, TResponse>.EnableAntiforgery() Endpoint<EmptyRequest, TResponse>.Get(params string[]) Endpoint<EmptyRequest, TResponse>.Get(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, TResponse>.Group<TEndpointGroup>() Endpoint<EmptyRequest, TResponse>.Head(params string[]) Endpoint<EmptyRequest, TResponse>.Head(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, TResponse>.Options(Action<RouteHandlerBuilder>) Endpoint<EmptyRequest, TResponse>.Patch(params string[]) Endpoint<EmptyRequest, TResponse>.Patch(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, TResponse>.Permissions(params string[]) Endpoint<EmptyRequest, TResponse>.PermissionsAll(params string[]) Endpoint<EmptyRequest, TResponse>.Policy(Action<AuthorizationPolicyBuilder>) Endpoint<EmptyRequest, TResponse>.Policies(params string[]) Endpoint<EmptyRequest, TResponse>.Post(params string[]) Endpoint<EmptyRequest, TResponse>.Post(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, TResponse>.PostProcessor<TPostProcessor>() Endpoint<EmptyRequest, TResponse>.PostProcessors(params IPostProcessor<EmptyRequest, TResponse>[]) Endpoint<EmptyRequest, TResponse>.PreProcessor<TPreProcessor>() Endpoint<EmptyRequest, TResponse>.PreProcessors(params IPreProcessor<EmptyRequest>[]) Endpoint<EmptyRequest, TResponse>.Put(params string[]) Endpoint<EmptyRequest, TResponse>.Put(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, TResponse>.RequestBinder(IRequestBinder<EmptyRequest>) Endpoint<EmptyRequest, TResponse>.ResponseCache(int, ResponseCacheLocation, bool, string, string[]) Endpoint<EmptyRequest, TResponse>.ResponseInterceptor(IResponseInterceptor) Endpoint<EmptyRequest, TResponse>.Roles(params string[]) Endpoint<EmptyRequest, TResponse>.RoutePrefixOverride(string) Endpoint<EmptyRequest, TResponse>.Routes(params string[]) Endpoint<EmptyRequest, TResponse>.SerializerContext<TContext>(TContext) Endpoint<EmptyRequest, TResponse>.SerializerContext<TContext>() Endpoint<EmptyRequest, TResponse>.Summary(Action<EndpointSummary>) Endpoint<EmptyRequest, TResponse>.Summary(Action<EndpointSummary<EmptyRequest>>) Endpoint<EmptyRequest, TResponse>.Summary(EndpointSummary) Endpoint<EmptyRequest, TResponse>.Tags(params string[]) Endpoint<EmptyRequest, TResponse>.Throttle(int, double, string) Endpoint<EmptyRequest, TResponse>.Validator<TValidator>() Endpoint<EmptyRequest, TResponse>.Verbs(params Http[]) Endpoint<EmptyRequest, TResponse>.Verbs(params string[]) Endpoint<EmptyRequest, TResponse>.Version(int, int?) Endpoint<EmptyRequest, TResponse>.ValidationFailed Endpoint<EmptyRequest, TResponse>.AddError(ValidationFailure) Endpoint<EmptyRequest, TResponse>.AddError(string, string, Severity) Endpoint<EmptyRequest, TResponse>.AddError(Expression<Func<EmptyRequest, object>>, string, string, Severity) Endpoint<EmptyRequest, TResponse>.ThrowError(ValidationFailure, int?) Endpoint<EmptyRequest, TResponse>.ThrowError(string, int?) Endpoint<EmptyRequest, TResponse>.ThrowError(Expression<Func<EmptyRequest, object>>, string, int?) Endpoint<EmptyRequest, TResponse>.ThrowIfAnyErrors(int?) BaseEndpoint.Definition BaseEndpoint.HttpContext BaseEndpoint.ValidationFailures BaseEndpoint.Configure() BaseEndpoint.Verbs(params string[]) BaseEndpoint.Group<TEndpointGroup>() BaseEndpoint.GetAclHash(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class EndpointWithoutRequest<TResponse, TMapper> : EndpointWithoutRequest<TResponse>, IEndpoint, IEventBus, IServiceResolverBase, IHasMapper<TMapper>, IHasMapper where TResponse : notnull where TMapper : IResponseMapper Type Parameters Name Description TResponse the type of the response dto TMapper the type of the entity mapper Properties Map the entity mapper for the endpoint HINT: entity mappers are singletons for performance reasons. do not maintain state in the mappers. Declaration public TMapper Map { get; set; } Property Value Type Description TMapper Methods SendMappedAsync<TEntity>(TEntity, int, CancellationToken) send a response by mapping the supplied entity using this endpoint's mapper's ASYNC mapping method. Declaration protected Task SendMappedAsync<TEntity>(TEntity entity, int statusCode = 200, CancellationToken ct = default) Parameters Type Name Description TEntity entity the entity instance to map to the response int statusCode the status code to send CancellationToken ct optional cancellation token Returns Type Description Task Type Parameters Name Description TEntity the type of the entity supplied SendMapped<TEntity>(TEntity, int, CancellationToken) send a response by mapping the supplied entity using this endpoint's mapper's SYNC mapping method. Declaration protected Task SendMapped<TEntity>(TEntity entity, int statusCode = 200, CancellationToken ct = default) Parameters Type Name Description TEntity entity the entity instance to map to the response int statusCode the status code to send CancellationToken ct optional cancellation token Returns Type Description Task Type Parameters Name Description TEntity the type of the entity supplied Implements IEndpoint IEventBus IServiceResolverBase IHasMapper<TMapper> IHasMapper"
  },
  "api/FastEndpoints.EndpointWithoutRequest.html": {
    "href": "api/FastEndpoints.EndpointWithoutRequest.html",
    "title": "Class EndpointWithoutRequest | FastEndpoints",
    "keywords": "Class EndpointWithoutRequest use this base class for defining endpoints that doesn't need a request dto. usually used for routes that doesn't have any parameters. Inheritance object BaseEndpoint Endpoint<EmptyRequest, object> EndpointWithoutRequest Implements IEndpoint IEventBus IServiceResolverBase Inherited Members Endpoint<EmptyRequest, object>.HandleAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, object>.ExecuteAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, object>.TryResolve<TService>() Endpoint<EmptyRequest, object>.TryResolve(Type) Endpoint<EmptyRequest, object>.Resolve<TService>() Endpoint<EmptyRequest, object>.Resolve(Type) Endpoint<EmptyRequest, object>.CreateScope() Endpoint<EmptyRequest, object>.Route<T>(string, bool) Endpoint<EmptyRequest, object>.Query<T>(string, bool) Endpoint<EmptyRequest, object>.FormFileSectionsAsync(CancellationToken) Endpoint<EmptyRequest, object>.PublishAsync<TEvent>(TEvent, Mode, CancellationToken) Endpoint<EmptyRequest, object>.CreateTokenWith<TService>(string, Action<UserPrivileges>) Endpoint<EmptyRequest, object>.ProcessorState<TState>() Endpoint<EmptyRequest, object>.OnBeforeValidate(EmptyRequest) Endpoint<EmptyRequest, object>.OnBeforeValidateAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, object>.OnAfterValidate(EmptyRequest) Endpoint<EmptyRequest, object>.OnAfterValidateAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, object>.OnBeforeHandle(EmptyRequest) Endpoint<EmptyRequest, object>.OnBeforeHandleAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, object>.OnAfterHandle(EmptyRequest, object) Endpoint<EmptyRequest, object>.OnAfterHandleAsync(EmptyRequest, object, CancellationToken) Endpoint<EmptyRequest, object>.OnValidationFailed() Endpoint<EmptyRequest, object>.OnValidationFailedAsync(CancellationToken) Endpoint<EmptyRequest, object>.User Endpoint<EmptyRequest, object>.Response Endpoint<EmptyRequest, object>.Config Endpoint<EmptyRequest, object>.Env Endpoint<EmptyRequest, object>.Logger Endpoint<EmptyRequest, object>.BaseURL Endpoint<EmptyRequest, object>.HttpMethod Endpoint<EmptyRequest, object>.Form Endpoint<EmptyRequest, object>.Files Endpoint<EmptyRequest, object>.ResponseStarted Endpoint<EmptyRequest, object>.SendAsync(object, int, CancellationToken) Endpoint<EmptyRequest, object>.SendResultAsync(IResult) Endpoint<EmptyRequest, object>.SendInterceptedAsync(object, int, CancellationToken) Endpoint<EmptyRequest, object>.SendCreatedAtAsync<TEndpoint>(object, object, Http?, int?, bool, CancellationToken) Endpoint<EmptyRequest, object>.SendCreatedAtAsync(string, object, object, bool, CancellationToken) Endpoint<EmptyRequest, object>.SendStringAsync(string, int, string, CancellationToken) Endpoint<EmptyRequest, object>.SendOkAsync(object, CancellationToken) Endpoint<EmptyRequest, object>.SendOkAsync(CancellationToken) Endpoint<EmptyRequest, object>.SendErrorsAsync(int, CancellationToken) Endpoint<EmptyRequest, object>.SendNoContentAsync(CancellationToken) Endpoint<EmptyRequest, object>.SendNotFoundAsync(CancellationToken) Endpoint<EmptyRequest, object>.SendUnauthorizedAsync(CancellationToken) Endpoint<EmptyRequest, object>.SendForbiddenAsync(CancellationToken) Endpoint<EmptyRequest, object>.SendRedirectAsync(string, bool, CancellationToken) Endpoint<EmptyRequest, object>.SendHeadersAsync(Action<IHeaderDictionary>, int, CancellationToken) Endpoint<EmptyRequest, object>.SendBytesAsync(byte[], string, string, DateTimeOffset?, bool, CancellationToken) Endpoint<EmptyRequest, object>.SendFileAsync(FileInfo, string, DateTimeOffset?, bool, CancellationToken) Endpoint<EmptyRequest, object>.SendStreamAsync(Stream, string, long?, string, DateTimeOffset?, bool, CancellationToken) Endpoint<EmptyRequest, object>.SendEventStreamAsync<T>(string, IAsyncEnumerable<T>, CancellationToken) Endpoint<EmptyRequest, object>.SendEmptyJsonObject(CancellationToken) Endpoint<EmptyRequest, object>.AccessControl(string, Apply?, params string[]) Endpoint<EmptyRequest, object>.AccessControl(string, params string[]) Endpoint<EmptyRequest, object>.AllowAnonymous(params Http[]) Endpoint<EmptyRequest, object>.AllowAnonymous(string[]) Endpoint<EmptyRequest, object>.AllowFileUploads(bool) Endpoint<EmptyRequest, object>.AllowFormData(bool) Endpoint<EmptyRequest, object>.AuthSchemes(params string[]) Endpoint<EmptyRequest, object>.Claims(params string[]) Endpoint<EmptyRequest, object>.ClaimsAll(params string[]) Endpoint<EmptyRequest, object>.Delete(params string[]) Endpoint<EmptyRequest, object>.Delete(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, object>.Description(Action<RouteHandlerBuilder>, bool) Endpoint<EmptyRequest, object>.DontAutoTag() Endpoint<EmptyRequest, object>.DontCatchExceptions() Endpoint<EmptyRequest, object>.DontThrowIfValidationFails() Endpoint<EmptyRequest, object>.EnableAntiforgery() Endpoint<EmptyRequest, object>.Get(params string[]) Endpoint<EmptyRequest, object>.Get(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, object>.Group<TEndpointGroup>() Endpoint<EmptyRequest, object>.Head(params string[]) Endpoint<EmptyRequest, object>.Head(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, object>.Options(Action<RouteHandlerBuilder>) Endpoint<EmptyRequest, object>.Patch(params string[]) Endpoint<EmptyRequest, object>.Patch(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, object>.Permissions(params string[]) Endpoint<EmptyRequest, object>.PermissionsAll(params string[]) Endpoint<EmptyRequest, object>.Policy(Action<AuthorizationPolicyBuilder>) Endpoint<EmptyRequest, object>.Policies(params string[]) Endpoint<EmptyRequest, object>.Post(params string[]) Endpoint<EmptyRequest, object>.Post(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, object>.PostProcessor<TPostProcessor>() Endpoint<EmptyRequest, object>.PostProcessors(params IPostProcessor<EmptyRequest, object>[]) Endpoint<EmptyRequest, object>.PreProcessor<TPreProcessor>() Endpoint<EmptyRequest, object>.PreProcessors(params IPreProcessor<EmptyRequest>[]) Endpoint<EmptyRequest, object>.Put(params string[]) Endpoint<EmptyRequest, object>.Put(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, object>.RequestBinder(IRequestBinder<EmptyRequest>) Endpoint<EmptyRequest, object>.ResponseCache(int, ResponseCacheLocation, bool, string, string[]) Endpoint<EmptyRequest, object>.ResponseInterceptor(IResponseInterceptor) Endpoint<EmptyRequest, object>.Roles(params string[]) Endpoint<EmptyRequest, object>.RoutePrefixOverride(string) Endpoint<EmptyRequest, object>.Routes(params string[]) Endpoint<EmptyRequest, object>.SerializerContext<TContext>(TContext) Endpoint<EmptyRequest, object>.SerializerContext<TContext>() Endpoint<EmptyRequest, object>.Summary(Action<EndpointSummary>) Endpoint<EmptyRequest, object>.Summary(Action<EndpointSummary<EmptyRequest>>) Endpoint<EmptyRequest, object>.Summary(EndpointSummary) Endpoint<EmptyRequest, object>.Tags(params string[]) Endpoint<EmptyRequest, object>.Throttle(int, double, string) Endpoint<EmptyRequest, object>.Validator<TValidator>() Endpoint<EmptyRequest, object>.Verbs(params Http[]) Endpoint<EmptyRequest, object>.Verbs(params string[]) Endpoint<EmptyRequest, object>.Version(int, int?) Endpoint<EmptyRequest, object>.ValidationFailed Endpoint<EmptyRequest, object>.AddError(ValidationFailure) Endpoint<EmptyRequest, object>.AddError(string, string, Severity) Endpoint<EmptyRequest, object>.AddError(Expression<Func<EmptyRequest, object>>, string, string, Severity) Endpoint<EmptyRequest, object>.ThrowError(ValidationFailure, int?) Endpoint<EmptyRequest, object>.ThrowError(string, int?) Endpoint<EmptyRequest, object>.ThrowError(Expression<Func<EmptyRequest, object>>, string, int?) Endpoint<EmptyRequest, object>.ThrowIfAnyErrors(int?) BaseEndpoint.Definition BaseEndpoint.HttpContext BaseEndpoint.ValidationFailures BaseEndpoint.Configure() BaseEndpoint.Verbs(params string[]) BaseEndpoint.Group<TEndpointGroup>() BaseEndpoint.GetAclHash(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class EndpointWithoutRequest : Endpoint<EmptyRequest, object?>, IEndpoint, IEventBus, IServiceResolverBase Methods ExecuteAsync(EmptyRequest, CancellationToken) override the ExecuteAsync(CancellationToken ct) method instead of using this method! Declaration public override sealed Task<object?> ExecuteAsync(EmptyRequest _, CancellationToken ct) Parameters Type Name Description EmptyRequest _ CancellationToken ct Returns Type Description Task<object> Overrides Endpoint<EmptyRequest, object>.ExecuteAsync(EmptyRequest, CancellationToken) ExecuteAsync(CancellationToken) the handler method for the endpoint. this method is called for each request received. Declaration public virtual Task<object?> ExecuteAsync(CancellationToken ct) Parameters Type Name Description CancellationToken ct a cancellation token Returns Type Description Task<object> HandleAsync(EmptyRequest, CancellationToken) override the HandleAsync(CancellationToken ct) method instead of using this method! Declaration public override sealed Task HandleAsync(EmptyRequest _, CancellationToken ct) Parameters Type Name Description EmptyRequest _ CancellationToken ct Returns Type Description Task Overrides Endpoint<EmptyRequest, object>.HandleAsync(EmptyRequest, CancellationToken) HandleAsync(CancellationToken) the handler method for the endpoint. this method is called for each request received. Declaration public virtual Task HandleAsync(CancellationToken ct) Parameters Type Name Description CancellationToken ct a cancellation token Returns Type Description Task Implements IEndpoint IEventBus IServiceResolverBase"
  },
  "api/FastEndpoints.EpVersion.html": {
    "href": "api/FastEndpoints.EpVersion.html",
    "title": "Class EpVersion | FastEndpoints",
    "keywords": "Class EpVersion represents an endpoint version Inheritance object EpVersion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class EpVersion Properties Current Declaration public int Current { get; } Property Value Type Description int DeprecatedAt Declaration public int DeprecatedAt { get; } Property Value Type Description int"
  },
  "api/FastEndpoints.ErrorOptions.html": {
    "href": "api/FastEndpoints.ErrorOptions.html",
    "title": "Class ErrorOptions | FastEndpoints",
    "keywords": "Class ErrorOptions error response customization settings Inheritance object ErrorOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class ErrorOptions Properties GeneralErrorsField the general errors field name. this is the field name used for general errors when AddError() method is called without specifying a request dto property. Declaration public string GeneralErrorsField { set; } Property Value Type Description string ProducesMetadataType if this property is not null, a IProducesResponseTypeMetadata will automatically be added to endpoints that has a Validator<TRequest> associated with it. if you're specifying your own ResponseBuilder, don't forget to set this property to the correct type of the error response dto that your error response builder will be returning. TIP: set this to null if you'd like to disable the auto adding of produces 400 metadata to endpoints even if they have validators associated with them. Declaration public Type? ProducesMetadataType { set; } Property Value Type Description Type ResponseBuilder a function for transforming validation errors to an error response dto. set it to any func that returns an object that can be serialized to json. this function will be run everytime an error response needs to be sent to the client. the arguments for the func will be a list of validation failures, the http context and an http status code. HINT: if changing the default, make sure to also set ProducesMetadataType to the correct type of the error response dto. Declaration public Func<List<ValidationFailure>, HttpContext, int, object> ResponseBuilder { set; } Property Value Type Description Func<List<ValidationFailure>, HttpContext, int, object> StatusCode this http status code will be used for all automatically sent validation failure responses. defaults to 400. Declaration public int StatusCode { set; } Property Value Type Description int Methods UseProblemDetails() change the default error response builder to ProblemDetails instead of ErrorResponse Declaration public void UseProblemDetails()"
  },
  "api/FastEndpoints.ErrorResponse.html": {
    "href": "api/FastEndpoints.ErrorResponse.html",
    "title": "Class ErrorResponse | FastEndpoints",
    "keywords": "Class ErrorResponse the dto used to send an error response to the client Inheritance object ErrorResponse Implements IResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class ErrorResponse : IResult Constructors ErrorResponse() instantiate a new error response without any errors Declaration public ErrorResponse() ErrorResponse(List<ValidationFailure>, int) instantiate an error response with the given collection validation failures Declaration public ErrorResponse(List<ValidationFailure> failures, int statusCode = 400) Parameters Type Name Description List<ValidationFailure> failures validation failures to initialize the DTO with int statusCode Properties Errors the collection of errors for the current context Declaration public Dictionary<string, List<string>> Errors { get; set; } Property Value Type Description Dictionary<string, List<string>> Message the message for the error response Declaration public string Message { get; set; } Property Value Type Description string StatusCode the http status code sent to the client. default is 400. Declaration public int StatusCode { get; set; } Property Value Type Description int Methods ExecuteAsync(HttpContext) Write an HTTP response reflecting the result. Declaration public Task ExecuteAsync(HttpContext httpContext) Parameters Type Name Description HttpContext httpContext The HttpContext for the current request. Returns Type Description Task A task that represents the asynchronous execute operation. Implements IResult"
  },
  "api/FastEndpoints.EventBase.html": {
    "href": "api/FastEndpoints.EventBase.html",
    "title": "Class EventBase | FastEndpoints",
    "keywords": "Class EventBase base class for the event bus Inheritance object EventBase EventBus<TEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class EventBase"
  },
  "api/FastEndpoints.EventBus-1.html": {
    "href": "api/FastEndpoints.EventBus-1.html",
    "title": "Class EventBus<TEvent> | FastEndpoints",
    "keywords": "Class EventBus<TEvent> event notification bus which uses an in-process pub/sub messaging system Inheritance object EventBase EventBus<TEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class EventBus<TEvent> : EventBase where TEvent : notnull Type Parameters Name Description TEvent the type of notification event dto Constructors EventBus(IEnumerable<IEventHandler<TEvent>>?) instantiates an event bus for the given event dto type. Declaration public EventBus(IEnumerable<IEventHandler<TEvent>>? eventHandlers = null) Parameters Type Name Description IEnumerable<IEventHandler<TEvent>> eventHandlers a collection of concrete event handler implementations that should receive notifications from this event bus Methods PublishAsync(TEvent, Mode, CancellationToken) publish the given model/dto to all the subscribers of the event notification Declaration public Task PublishAsync(TEvent eventModel, Mode waitMode = Mode.WaitForAll, CancellationToken cancellation = default) Parameters Type Name Description TEvent eventModel the notification event model/dto to publish Mode waitMode specify whether to wait for none, any or all of the subscribers to complete their work CancellationToken cancellation an optional cancellation token Returns Type Description Task a Task that matches the wait mode specified. WaitForNone returns an already completed Task (fire and forget). WaitForAny returns a Task that will complete when any of the subscribers complete their work. WaitForAll return a Task that will complete only when all of the subscribers complete their work."
  },
  "api/FastEndpoints.EventExtensions.html": {
    "href": "api/FastEndpoints.EventExtensions.html",
    "title": "Class EventExtensions | FastEndpoints",
    "keywords": "Class EventExtensions Inheritance object EventExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public static class EventExtensions Methods Broadcast<TEvent>(TEvent, CancellationToken) broadcast/publish an event to all remote subscribers. this method should only be called when the server is running in EventPublisher Declaration public static void Broadcast<TEvent>(this TEvent @event, CancellationToken ct = default) where TEvent : class, IEvent Parameters Type Name Description TEvent event CancellationToken ct Type Parameters Name Description TEvent the type of the event being broadcasted PublishAsync(IEvent, Mode, CancellationToken) publish the event to all subscribers registered to handle this type of event. Declaration public static Task PublishAsync(this IEvent eventModel, Mode waitMode = Mode.WaitForAll, CancellationToken cancellation = default) Parameters Type Name Description IEvent eventModel the notification event model/dto to publish Mode waitMode specify whether to wait for none, any or all of the subscribers to complete their work CancellationToken cancellation an optional cancellation token Returns Type Description Task a Task that matches the wait mode specified. WaitForNone returns an already completed Task (fire and forget). WaitForAny returns a Task that will complete when any of the subscribers complete their work. WaitForAll return a Task that will complete only when all of the subscribers complete their work. PublishAsync<TEvent>(TEvent, Mode, CancellationToken) publish the event to all subscribers registered to handle this type of event. Declaration public static Task PublishAsync<TEvent>(this TEvent eventModel, Mode waitMode = Mode.WaitForAll, CancellationToken cancellation = default) where TEvent : IEvent Parameters Type Name Description TEvent eventModel the notification event model/dto to publish Mode waitMode specify whether to wait for none, any or all of the subscribers to complete their work CancellationToken cancellation an optional cancellation token Returns Type Description Task a Task that matches the wait mode specified. WaitForNone returns an already completed Task (fire and forget). WaitForAny returns a Task that will complete when any of the subscribers complete their work. WaitForAll return a Task that will complete only when all of the subscribers complete their work. Type Parameters Name Description TEvent the type of the event model"
  },
  "api/FastEndpoints.EventHubExceptionReceiver.html": {
    "href": "api/FastEndpoints.EventHubExceptionReceiver.html",
    "title": "Class EventHubExceptionReceiver | FastEndpoints",
    "keywords": "Class EventHubExceptionReceiver inherit this class and override it's methods in order to receive event hub exceptions. Inheritance object EventHubExceptionReceiver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public abstract class EventHubExceptionReceiver Methods OnGetNextEventRecordError<TEvent>(string, int, Exception, CancellationToken) this method is triggered when the storage provider has trouble retrieving the next event record. Declaration public virtual Task OnGetNextEventRecordError<TEvent>(string subscriberID, int attemptCount, Exception exception, CancellationToken ct) where TEvent : class, IEvent Parameters Type Name Description string subscriberID the unique ID of the subscriber int attemptCount the number of times the record was attempted to be retrieved Exception exception the actual exception that was thrown by the operation CancellationToken ct cancellation token Returns Type Description Task Type Parameters Name Description TEvent the type of the event OnInMemoryQueueOverflow<TEvent>(IEventStorageRecord, CancellationToken) this method is triggered when the default in-memory storage provider's internal queue for the given event type has been stagnant and in an overflow state. Declaration public virtual Task OnInMemoryQueueOverflow<TEvent>(IEventStorageRecord record, CancellationToken ct) where TEvent : class, IEvent Parameters Type Name Description IEventStorageRecord record the event storage record that was supposed to be added to the queue CancellationToken ct cancellation token Returns Type Description Task Type Parameters Name Description TEvent the type of the event OnMarkEventAsCompleteError<TEvent>(IEventStorageRecord, int, Exception, CancellationToken) this method is triggered when the storage provider has trouble marking an event record as complete. Declaration public virtual Task OnMarkEventAsCompleteError<TEvent>(IEventStorageRecord record, int attemptCount, Exception exception, CancellationToken ct) where TEvent : class, IEvent Parameters Type Name Description IEventStorageRecord record the event storage record that was supposed to be marked complete int attemptCount the number of times the record was attempted to be marked complete Exception exception the actual exception that was thrown by the operation CancellationToken ct cancellation token Returns Type Description Task Type Parameters Name Description TEvent the type of the event OnStoreEventRecordError<TEvent>(IEventStorageRecord, int, Exception, CancellationToken) this method is triggered when the storage provider has trouble persisting an event record. Declaration public virtual Task OnStoreEventRecordError<TEvent>(IEventStorageRecord record, int attemptCount, Exception exception, CancellationToken ct) where TEvent : class, IEvent Parameters Type Name Description IEventStorageRecord record the event storage record that was supposed to be persisted int attemptCount the number of times the record was attempted to be persisted Exception exception the actual exception that was thrown by the operation CancellationToken ct cancellation token Returns Type Description Task Type Parameters Name Description TEvent the type of the event"
  },
  "api/FastEndpoints.EventHubExceptionReceiverExtensions.html": {
    "href": "api/FastEndpoints.EventHubExceptionReceiverExtensions.html",
    "title": "Class EventHubExceptionReceiverExtensions | FastEndpoints",
    "keywords": "Class EventHubExceptionReceiverExtensions Inheritance object EventHubExceptionReceiverExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public static class EventHubExceptionReceiverExtensions Methods AddEventHubExceptionReceiver<TReceiver>(IServiceCollection) register a custom exception receiver for receiving event hub exceptions. Declaration public static IServiceCollection AddEventHubExceptionReceiver<TReceiver>(this IServiceCollection services) where TReceiver : EventHubExceptionReceiver Parameters Type Name Description IServiceCollection services Returns Type Description IServiceCollection Type Parameters Name Description TReceiver the implementation type of the receiver"
  },
  "api/FastEndpoints.ExceptionHandlerExtensions.html": {
    "href": "api/FastEndpoints.ExceptionHandlerExtensions.html",
    "title": "Class ExceptionHandlerExtensions | FastEndpoints",
    "keywords": "Class ExceptionHandlerExtensions extensions for global exception handling Inheritance object ExceptionHandlerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public static class ExceptionHandlerExtensions Methods UseDefaultExceptionHandler(IApplicationBuilder, ILogger?, bool, bool) registers the default global exception handler which will log the exceptions on the server and return a user-friendly json response to the client when unhandled exceptions occur. TIP: when using this exception handler, you may want to turn off the asp.net core exception middleware logging to avoid duplication like so: \"Logging\": { \"LogLevel\": { \"Default\": \"Warning\", \"Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware\": \"None\" } } Declaration public static IApplicationBuilder UseDefaultExceptionHandler(this IApplicationBuilder app, ILogger? logger = null, bool logStructuredException = false, bool useGenericReason = false) Parameters Type Name Description IApplicationBuilder app ILogger logger an optional logger instance bool logStructuredException set to true if you'd like to log the error in a structured manner bool useGenericReason set to true if you don't want to expose the actual exception reason in the json response sent to the client Returns Type Description IApplicationBuilder"
  },
  "api/FastEndpoints.Factory.html": {
    "href": "api/FastEndpoints.Factory.html",
    "title": "Class Factory | FastEndpoints",
    "keywords": "Class Factory a factory for instantiating endpoints/event/mappers/validators/etc. for testing purposes Inheritance object Factory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public static class Factory Methods AddServicesForUnitTesting(IServiceCollection) adds the minimum required set of services for unit testing FE endpoints Declaration public static IServiceCollection AddServicesForUnitTesting(this IServiceCollection services) Parameters Type Name Description IServiceCollection services Returns Type Description IServiceCollection AddTestServices(HttpContext, Action<IServiceCollection>) register fake/mock/test services for the http context. typically only used with unit tests with the Factory.Create()\" method/> Declaration public static void AddTestServices(this HttpContext ctx, Action<IServiceCollection> s) Parameters Type Name Description HttpContext ctx Action<IServiceCollection> s an action for adding services to the IServiceCollection Exceptions Type Condition InvalidOperationException thrown if the RequestServices is not empty CreateEvent<TEvent>(IEnumerable<IEventHandler<TEvent>>, Action<IServiceCollection>?) get an instance of an event suitable for unit testing. Declaration public static TEvent CreateEvent<TEvent>(IEnumerable<IEventHandler<TEvent>> handlers, Action<IServiceCollection>? s = null) where TEvent : class, IEvent Parameters Type Name Description IEnumerable<IEventHandler<TEvent>> handlers the fake/mock event handlers to register for this event Action<IServiceCollection> s an optional action for adding services to the IServiceCollection Returns Type Description TEvent Type Parameters Name Description TEvent the type of the event CreateMapper<TMapper>(Action<IServiceCollection>) get an instance of a mapper that uses Resolve<T>() methods to obtain services registered in the DI container. Declaration public static TMapper CreateMapper<TMapper>(Action<IServiceCollection> s) where TMapper : class, IMapper Parameters Type Name Description Action<IServiceCollection> s an action for adding services to the IServiceCollection Returns Type Description TMapper Type Parameters Name Description TMapper the type of the mapper CreateValidator<TValidator>(Action<IServiceCollection>) get an instance of a validator that uses Resolve<T>() methods to obtain services registered in the DI container. Declaration public static TValidator CreateValidator<TValidator>(Action<IServiceCollection> s) where TValidator : class, IValidator Parameters Type Name Description Action<IServiceCollection> s an action for adding services to the IServiceCollection Returns Type Description TValidator Type Parameters Name Description TValidator the type of the validator Create<TEndpoint>(DefaultHttpContext, params object?[]) get an instance of an endpoint suitable for unit testing Declaration public static TEndpoint Create<TEndpoint>(DefaultHttpContext httpContext, params object?[] ctorDependencies) where TEndpoint : class, IEndpoint Parameters Type Name Description DefaultHttpContext httpContext a default http context object object[] ctorDependencies the dependencies of the endpoint if it has any constructor injected dependencies Returns Type Description TEndpoint Type Parameters Name Description TEndpoint the type of the endpoint to create an instance of Create<TEndpoint>(Action<DefaultHttpContext>, params object?[]) get an instance of an endpoint suitable for unit testing Declaration public static TEndpoint Create<TEndpoint>(Action<DefaultHttpContext> httpContext, params object?[] ctorDependencies) where TEndpoint : class, IEndpoint Parameters Type Name Description Action<DefaultHttpContext> httpContext an action for configuring the default http context object object[] ctorDependencies the dependencies of the endpoint if it has any constructor injected arguments Returns Type Description TEndpoint Type Parameters Name Description TEndpoint the type of the endpoint to create an instance of Create<TEndpoint>(params object?[]) get an instance of an endpoint suitable for unit testing Declaration public static TEndpoint Create<TEndpoint>(params object?[] ctorDependencies) where TEndpoint : class, IEndpoint Parameters Type Name Description object[] ctorDependencies the dependencies of the endpoint if it has any constructor injected dependencies Returns Type Description TEndpoint Type Parameters Name Description TEndpoint the type of the endpoint to create an instance of RegisterTestServices(Action<IServiceCollection>) register fake/mock/test services for the current test execution context. Declaration public static void RegisterTestServices(Action<IServiceCollection> s) Parameters Type Name Description Action<IServiceCollection> s an action for adding services to the IServiceCollection"
  },
  "api/FastEndpoints.FromAttribute.html": {
    "href": "api/FastEndpoints.FromAttribute.html",
    "title": "Class FromAttribute | FastEndpoints",
    "keywords": "Class FromAttribute properties decorated with this attribute will have their values auto bound from the relevant claim of the current user principal. this is a shorter alias for the [FromClaim] attribute. Inheritance object Attribute FromClaimAttribute FromAttribute Inherited Members FromClaimAttribute.ClaimType FromClaimAttribute.IsRequired FromClaimAttribute.RemoveFromSchema Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public sealed class FromAttribute : FromClaimAttribute Constructors FromAttribute(string, bool) properties decorated with this attribute will have their values auto bound from the relevant claim of the current user principal. this is a shorter alias for the [FromClaim] attribute. Declaration public FromAttribute(string claimType, bool isRequired = true) Parameters Type Name Description string claimType the claim type to auto bind bool isRequired set to true if a validation error should be thrown when the current user principal doesn't have the specified claim"
  },
  "api/FastEndpoints.FromBodyAttribute.html": {
    "href": "api/FastEndpoints.FromBodyAttribute.html",
    "title": "Class FromBodyAttribute | FastEndpoints",
    "keywords": "Class FromBodyAttribute properties decorated with this attribute will have their values auto bound from the incoming request's json body. HINT: no other binding sources will be used for binding that property. Inheritance object Attribute FromBodyAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public sealed class FromBodyAttribute : Attribute"
  },
  "api/FastEndpoints.FromClaimAttribute.html": {
    "href": "api/FastEndpoints.FromClaimAttribute.html",
    "title": "Class FromClaimAttribute | FastEndpoints",
    "keywords": "Class FromClaimAttribute properties decorated with this attribute will have their values auto bound from the relevant claim of the current user principal Inheritance object Attribute FromClaimAttribute FromAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class FromClaimAttribute : Attribute Constructors FromClaimAttribute(bool, bool) properties decorated with this attribute will have their values auto bound from the relevant claim of the current user principal Declaration public FromClaimAttribute(bool isRequired, bool removeFromSchema = false) Parameters Type Name Description bool isRequired set to false if a validation error shouldn't be thrown when the current user principal doesn't have a claim type matching the property name being bound to. bool removeFromSchema set to true if your header is not required but shouldn't be added to schema model. FromClaimAttribute(string?, bool, bool) properties decorated with this attribute will have their values auto bound from the relevant claim of the current user principal Declaration public FromClaimAttribute(string? claimType = null, bool isRequired = true, bool removeFromSchema = false) Parameters Type Name Description string claimType optionally specify the claim type to bind from. if not specified, the claim type of the user principal must match the name of the property being bound to. bool isRequired set to false if a validation error shouldn't be thrown when the current user principal doesn't have the specified claim type bool removeFromSchema set to true if your header is not required but shouldn't be added to schema model. Properties ClaimType the claim type to auto bind Declaration public string? ClaimType { get; set; } Property Value Type Description string IsRequired set to true if a validation error should be thrown when the current user principal doesn't have the specified claim Declaration public bool IsRequired { get; set; } Property Value Type Description bool RemoveFromSchema set to true if your header is not required but shouldn't be added to schema model Declaration public bool RemoveFromSchema { get; set; } Property Value Type Description bool"
  },
  "api/FastEndpoints.FromHeaderAttribute.html": {
    "href": "api/FastEndpoints.FromHeaderAttribute.html",
    "title": "Class FromHeaderAttribute | FastEndpoints",
    "keywords": "Class FromHeaderAttribute properties decorated with this attribute will have their values auto bound from the relevant http header of the current request. Inheritance object Attribute FromHeaderAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public sealed class FromHeaderAttribute : Attribute Constructors FromHeaderAttribute(bool, bool) properties decorated with this attribute will have their values auto bound from the relevant http header of the current request. Declaration public FromHeaderAttribute(bool isRequired, bool removeFromSchema = false) Parameters Type Name Description bool isRequired set to false if a validation error shouldn't be thrown when the current user request doesn't have a header matching the property name being bound to. bool removeFromSchema set to true if your header is not required but shouldn't be added to schema model. FromHeaderAttribute(string?, bool, bool) properties decorated with this attribute will have their values auto bound from the relevant http header of the current request. Declaration public FromHeaderAttribute(string? headerName = null, bool isRequired = true, bool removeFromSchema = false) Parameters Type Name Description string headerName optionally specify the header name to bind from. if not specified, the header name must match the name of the property being bound to. bool isRequired set to false if a validation error shouldn't be thrown when the current request doesn't have the specified header. bool removeFromSchema set to true if your header is not required but shouldn't be added to schema model. Properties HeaderName the header name to auto bind from Declaration public string? HeaderName { get; set; } Property Value Type Description string IsRequired set to true if a validation error should be thrown when the current request doesn't have the specified header Declaration public bool IsRequired { get; set; } Property Value Type Description bool RemoveFromSchema set to true if your header is not required but shouldn't be added to schema model Declaration public bool RemoveFromSchema { get; set; } Property Value Type Description bool"
  },
  "api/FastEndpoints.FromQueryParamsAttribute.html": {
    "href": "api/FastEndpoints.FromQueryParamsAttribute.html",
    "title": "Class FromQueryParamsAttribute | FastEndpoints",
    "keywords": "Class FromQueryParamsAttribute properties decorated with this attribute will be bound by obtaining the values from query string parameters with matching names. WARNING: valid only on complex types with at least one public property. only one dto property can be decorated with this attribute. Inheritance object Attribute QueryParamAttribute FromQueryParamsAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)] public sealed class FromQueryParamsAttribute : QueryParamAttribute"
  },
  "api/FastEndpoints.Generator.AccessControlGenerator.html": {
    "href": "api/FastEndpoints.Generator.AccessControlGenerator.html",
    "title": "Class AccessControlGenerator | FastEndpoints",
    "keywords": "Class AccessControlGenerator Inheritance object AccessControlGenerator Implements IIncrementalGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Generator Assembly: FastEndpoints.Generator.dll Syntax [Generator(\"C#\", new string[] { })] public class AccessControlGenerator : IIncrementalGenerator Methods Initialize(IncrementalGeneratorInitializationContext) Called to initialize the generator and register generation steps via callbacks on the context Declaration public void Initialize(IncrementalGeneratorInitializationContext ctx) Parameters Type Name Description IncrementalGeneratorInitializationContext ctx Implements IIncrementalGenerator"
  },
  "api/FastEndpoints.Generator.DiscoveredTypesGenerator.html": {
    "href": "api/FastEndpoints.Generator.DiscoveredTypesGenerator.html",
    "title": "Class DiscoveredTypesGenerator | FastEndpoints",
    "keywords": "Class DiscoveredTypesGenerator Inheritance object DiscoveredTypesGenerator Implements IIncrementalGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Generator Assembly: FastEndpoints.Generator.dll Syntax [Generator(\"C#\", new string[] { })] public class DiscoveredTypesGenerator : IIncrementalGenerator Methods Initialize(IncrementalGeneratorInitializationContext) Called to initialize the generator and register generation steps via callbacks on the context Declaration public void Initialize(IncrementalGeneratorInitializationContext ctx) Parameters Type Name Description IncrementalGeneratorInitializationContext ctx Implements IIncrementalGenerator"
  },
  "api/FastEndpoints.Generator.EndpointsDiscoveryGenerator.html": {
    "href": "api/FastEndpoints.Generator.EndpointsDiscoveryGenerator.html",
    "title": "Class EndpointsDiscoveryGenerator | FastEndpoints",
    "keywords": "Class EndpointsDiscoveryGenerator Inheritance Object EndpointsDiscoveryGenerator Implements IIncrementalGenerator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace: FastEndpoints.Generator Assembly: FastEndpoints.Generator.dll Syntax [Generator(\"C#\", new string[]{})] public class EndpointsDiscoveryGenerator : IIncrementalGenerator Methods Initialize(IncrementalGeneratorInitializationContext) Declaration public void Initialize(IncrementalGeneratorInitializationContext context) Parameters Type Name Description IncrementalGeneratorInitializationContext context Implements IIncrementalGenerator"
  },
  "api/FastEndpoints.Generator.ServiceRegistrationGenerator.html": {
    "href": "api/FastEndpoints.Generator.ServiceRegistrationGenerator.html",
    "title": "Class ServiceRegistrationGenerator | FastEndpoints",
    "keywords": "Class ServiceRegistrationGenerator Inheritance object ServiceRegistrationGenerator Implements IIncrementalGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Generator Assembly: FastEndpoints.Generator.dll Syntax [Generator(\"C#\", new string[] { })] public class ServiceRegistrationGenerator : IIncrementalGenerator Methods Initialize(IncrementalGeneratorInitializationContext) Called to initialize the generator and register generation steps via callbacks on the context Declaration public void Initialize(IncrementalGeneratorInitializationContext ctx) Parameters Type Name Description IncrementalGeneratorInitializationContext ctx Implements IIncrementalGenerator"
  },
  "api/FastEndpoints.Generator.html": {
    "href": "api/FastEndpoints.Generator.html",
    "title": "Namespace FastEndpoints.Generator | FastEndpoints",
    "keywords": "Namespace FastEndpoints.Generator Classes AccessControlGenerator DiscoveredTypesGenerator ServiceRegistrationGenerator"
  },
  "api/FastEndpoints.GlobalPostProcessor-1.html": {
    "href": "api/FastEndpoints.GlobalPostProcessor-1.html",
    "title": "Class GlobalPostProcessor<TState> | FastEndpoints",
    "keywords": "Class GlobalPostProcessor<TState> inherit this class to create a global post-processor with access to the common processor state of the endpoint Inheritance object GlobalPostProcessor<TState> Implements IGlobalPostProcessor IPostProcessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class GlobalPostProcessor<TState> : IGlobalPostProcessor, IPostProcessor where TState : class, new() Type Parameters Name Description TState type of the common processor state Methods PostProcessAsync(IPostProcessorContext, TState, CancellationToken) implement this method to define the post-processing logic using the provided context and state. Declaration public abstract Task PostProcessAsync(IPostProcessorContext context, TState state, CancellationToken ct) Parameters Type Name Description IPostProcessorContext context the context object encapsulating all necessary information for post-processing. TState state the common processor state object, derived from the HttpContext or newly instantiated. CancellationToken ct cancellation token. Returns Type Description Task a Task representing the asynchronous operation. Implements IGlobalPostProcessor IPostProcessor"
  },
  "api/FastEndpoints.GlobalPreProcessor-1.html": {
    "href": "api/FastEndpoints.GlobalPreProcessor-1.html",
    "title": "Class GlobalPreProcessor<TState> | FastEndpoints",
    "keywords": "Class GlobalPreProcessor<TState> inherit this class to create a global pre-processor with access to the common processor state of the endpoint Inheritance object GlobalPreProcessor<TState> Implements IGlobalPreProcessor IPreProcessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class GlobalPreProcessor<TState> : IGlobalPreProcessor, IPreProcessor where TState : class, new() Type Parameters Name Description TState type of the common processor state Methods PreProcessAsync(IPreProcessorContext, TState, CancellationToken) this method is called with the given arguments when the pre-processor executes. Declaration public abstract Task PreProcessAsync(IPreProcessorContext context, TState state, CancellationToken ct) Parameters Type Name Description IPreProcessorContext context the context object encapsulating all necessary information for pre-processing. TState state the common processor state object CancellationToken ct cancellation token Returns Type Description Task Implements IGlobalPreProcessor IPreProcessor"
  },
  "api/FastEndpoints.Group.html": {
    "href": "api/FastEndpoints.Group.html",
    "title": "Class Group | FastEndpoints",
    "keywords": "Class Group common configuration for a group of endpoints can be specified by implementing this abstract class and calling Configure(string, Action<EndpointDefinition>) in the constructor. Inheritance object Group SubGroup<TParent> Implements IServiceResolverBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class Group : IServiceResolverBase Methods Configure(string, Action<EndpointDefinition>) call this method in the constructor in order to configure the endpoint group. Declaration protected virtual void Configure(string routePrefix, Action<EndpointDefinition> ep) Parameters Type Name Description string routePrefix the route prefix for the group Action<EndpointDefinition> ep the configuration action to be performed on the EndpointDefinition CreateScope() if you'd like to resolve scoped or transient services from the MS DI container, obtain a service scope from this method and dispose the scope when the work is complete. using var scope = CreateScope(); var scopedService = scope.Resolve<MyService>(); Declaration public IServiceScope CreateScope() Returns Type Description IServiceScope Resolve(Type) resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public object Resolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved Resolve<TService>() resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public TService Resolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved TryResolve(Type) try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public object? TryResolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object TryResolve<TService>() try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public TService? TryResolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Implements IServiceResolverBase"
  },
  "api/FastEndpoints.HandlerOptions-2.html": {
    "href": "api/FastEndpoints.HandlerOptions-2.html",
    "title": "Class HandlerOptions<TStorageRecord, TStorageProvider> | FastEndpoints",
    "keywords": "Class HandlerOptions<TStorageRecord, TStorageProvider> handler registration options Inheritance object HandlerOptions<TStorageRecord, TStorageProvider> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public class HandlerOptions<TStorageRecord, TStorageProvider> where TStorageRecord : class, IEventStorageRecord, new() where TStorageProvider : class, IEventHubStorageProvider<TStorageRecord> Type Parameters Name Description TStorageRecord TStorageProvider Methods RegisterClientStream<T, THandler, TResult>() registers a \"client stream\" command handler this server is hosting. Declaration public GrpcServiceEndpointConventionBuilder RegisterClientStream<T, THandler, TResult>() where T : class where THandler : class, IClientStreamCommandHandler<T, TResult> where TResult : class Returns Type Description GrpcServiceEndpointConventionBuilder Type Parameters Name Description T the type of the incoming item stream THandler the type of the handler for the incoming stream TResult the type of the result that will be returned from the handler when the stream ends RegisterEventHub<TEvent>(HubMode) registers an \"event hub\" that broadcasts events of the given type to all remote subscribers in an asynchronous manner Declaration public GrpcServiceEndpointConventionBuilder RegisterEventHub<TEvent>(HubMode mode = HubMode.EventPublisher) where TEvent : class, IEvent Parameters Type Name Description HubMode mode the operation mode of this event hub Returns Type Description GrpcServiceEndpointConventionBuilder Type Parameters Name Description TEvent the type of event this hub deals with RegisterServerStream<TCommand, THandler, TResult>() registers a \"server stream\" command handler this server is hosting. Declaration public GrpcServiceEndpointConventionBuilder RegisterServerStream<TCommand, THandler, TResult>() where TCommand : class, IServerStreamCommand<TResult> where THandler : class, IServerStreamCommandHandler<TCommand, TResult> where TResult : class Returns Type Description GrpcServiceEndpointConventionBuilder Type Parameters Name Description TCommand the type of the incoming command THandler the type of the handler for the incoming command TResult the type of the result stream that will be returned from the handler Register<TCommand, THandler>() registers a \"void\" command handler this server is hosting. Declaration public GrpcServiceEndpointConventionBuilder Register<TCommand, THandler>() where TCommand : class, ICommand where THandler : class, ICommandHandler<TCommand> Returns Type Description GrpcServiceEndpointConventionBuilder Type Parameters Name Description TCommand the type of the incoming command THandler the type of the handler for the incoming command Register<TCommand, THandler, TResult>() registers a \"unary\" command handler this server is hosting. Declaration public GrpcServiceEndpointConventionBuilder Register<TCommand, THandler, TResult>() where TCommand : class, ICommand<TResult> where THandler : class, ICommandHandler<TCommand, TResult> where TResult : class Returns Type Description GrpcServiceEndpointConventionBuilder Type Parameters Name Description TCommand the type of the incoming command THandler the type of the handler for the incoming command TResult the type of the result that will be returned from the handler"
  },
  "api/FastEndpoints.HandlerServerExtensions.html": {
    "href": "api/FastEndpoints.HandlerServerExtensions.html",
    "title": "Class HandlerServerExtensions | FastEndpoints",
    "keywords": "Class HandlerServerExtensions handler server extensions Inheritance object HandlerServerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public static class HandlerServerExtensions Methods AddHandlerServer(WebApplicationBuilder, Action<GrpcServiceOptions>?) configure the handler server which will host a collection of command handlers and event hubs. this should only be called once per application. IMPORTANT: specify which handlers/hubs this server will be hosting via MapHandlers<TStorageRecord, TStorageProvider>(IEndpointRouteBuilder, Action<HandlerOptions<TStorageRecord, TStorageProvider>>) method. Declaration public static IGrpcServerBuilder AddHandlerServer(this WebApplicationBuilder bld, Action<GrpcServiceOptions>? o = null) Parameters Type Name Description WebApplicationBuilder bld Action<GrpcServiceOptions> o optional grpc service settings Returns Type Description IGrpcServerBuilder AddHandlerServer(IServiceCollection, Action<GrpcServiceOptions>?) configure the handler server which will host a collection of command handlers. this should only be called once per application. IMPORTANT: specify which handlers this server will be hosting via MapHandlers<TStorageRecord, TStorageProvider>(IEndpointRouteBuilder, Action<HandlerOptions<TStorageRecord, TStorageProvider>>) method. Declaration public static IGrpcServerBuilder AddHandlerServer(this IServiceCollection sc, Action<GrpcServiceOptions>? o = null) Parameters Type Name Description IServiceCollection sc Action<GrpcServiceOptions> o optional grpc service settings Returns Type Description IGrpcServerBuilder MapHandlers(IEndpointRouteBuilder, Action<HandlerOptions<InMemoryEventStorageRecord, InMemoryEventHubStorage>>) specify which handlers/event hubs this server will be hosting. the in-memory storage provider will be used. Declaration public static IEndpointRouteBuilder MapHandlers(this IEndpointRouteBuilder b, Action<HandlerOptions<InMemoryEventStorageRecord, InMemoryEventHubStorage>> h) Parameters Type Name Description IEndpointRouteBuilder b Action<HandlerOptions<InMemoryEventStorageRecord, InMemoryEventHubStorage>> h handler options Returns Type Description IEndpointRouteBuilder MapHandlers<TStorageRecord, TStorageProvider>(IEndpointRouteBuilder, Action<HandlerOptions<TStorageRecord, TStorageProvider>>) specify which handlers/event hubs this server will be hosting together with a custom storage provider Declaration public static IEndpointRouteBuilder MapHandlers<TStorageRecord, TStorageProvider>(this IEndpointRouteBuilder b, Action<HandlerOptions<TStorageRecord, TStorageProvider>> h) where TStorageRecord : class, IEventStorageRecord, new() where TStorageProvider : class, IEventHubStorageProvider<TStorageRecord> Parameters Type Name Description IEndpointRouteBuilder b Action<HandlerOptions<TStorageRecord, TStorageProvider>> h handler options Returns Type Description IEndpointRouteBuilder Type Parameters Name Description TStorageRecord the type of the event storage record TStorageProvider the type of the event storage provider"
  },
  "api/FastEndpoints.HasPermissionAttribute.html": {
    "href": "api/FastEndpoints.HasPermissionAttribute.html",
    "title": "Class HasPermissionAttribute | FastEndpoints",
    "keywords": "Class HasPermissionAttribute boolean properties decorated with this attribute will have their values set to true if the current principal has the specified permission. Inheritance object Attribute HasPermissionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public sealed class HasPermissionAttribute : Attribute Constructors HasPermissionAttribute(string, bool, bool) boolean properties decorated with this attribute will have their values set to true if the current principal has the specified permission. Declaration public HasPermissionAttribute(string permission, bool isRequired = true, bool removeFromSchema = false) Parameters Type Name Description string permission the permission to check for bool isRequired set to false if a validation error shouldn't be thrown when the current principal doesn't have the specified permission. bool removeFromSchema set to true if your header is not required but shouldn't be added to body model. Properties IsRequired set to true if a validation error should be thrown when the current user principal doesn't have the specified permission Declaration public bool IsRequired { get; set; } Property Value Type Description bool Permission the permission to check for Declaration public string Permission { get; set; } Property Value Type Description string RemoveFromSchema set to true if your header is not required but shouldn't be added to model Declaration public bool RemoveFromSchema { get; set; } Property Value Type Description bool"
  },
  "api/FastEndpoints.HideFromDocsAttribute.html": {
    "href": "api/FastEndpoints.HideFromDocsAttribute.html",
    "title": "Class HideFromDocsAttribute | FastEndpoints",
    "keywords": "Class HideFromDocsAttribute attribute used to mark classes that should be hidden from public api Inheritance object Attribute HideFromDocsAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.All, AllowMultiple = false)] public sealed class HideFromDocsAttribute : Attribute"
  },
  "api/FastEndpoints.Http.html": {
    "href": "api/FastEndpoints.Http.html",
    "title": "Enum Http | FastEndpoints",
    "keywords": "Enum Http enum for specifying a http verb Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax public enum Http Fields Name Description DELETE remove a record GET retrieve a record HEAD retrieve only headers PATCH partially update a record POST create a record PUT replace a record"
  },
  "api/FastEndpoints.HttpAttribute.html": {
    "href": "api/FastEndpoints.HttpAttribute.html",
    "title": "Class HttpAttribute | FastEndpoints",
    "keywords": "Class HttpAttribute base http attribute class Inheritance object Attribute HttpAttribute HttpDeleteAttribute HttpGetAttribute HttpPatchAttribute HttpPostAttribute HttpPutAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = false)] public abstract class HttpAttribute : Attribute Constructors HttpAttribute(Http, string) constructor Declaration protected HttpAttribute(Http verb, string route) Parameters Type Name Description Http verb verb string route route HttpAttribute(Http, params string[]) constructor Declaration protected HttpAttribute(Http verb, params string[] routes) Parameters Type Name Description Http verb verb string[] routes routes"
  },
  "api/FastEndpoints.HttpClientExtensions.html": {
    "href": "api/FastEndpoints.HttpClientExtensions.html",
    "title": "Class HttpClientExtensions | FastEndpoints",
    "keywords": "Class HttpClientExtensions a set of extensions to the httpclient in order to facilitate route-less integration testing Inheritance object HttpClientExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public static class HttpClientExtensions Methods DELETEAsync<TEndpoint, TResponse>(HttpClient) make a DELETE request to an endpoint using auto route discovery without a request dto and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO. Declaration public static Task<TestResult<TResponse>> DELETEAsync<TEndpoint, TResponse>(this HttpClient client) where TEndpoint : IEndpoint Parameters Type Name Description HttpClient client Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TResponse the type of the response dto DELETEAsync<TRequest, TResponse>(HttpClient, string, TRequest) make a DELETE request using a request dto and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO. Declaration public static Task<TestResult<TResponse>> DELETEAsync<TRequest, TResponse>(this HttpClient client, string requestUri, TRequest request) Parameters Type Name Description HttpClient client string requestUri the route url to post to TRequest request the request dto Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TRequest type of the request dto TResponse type of the response dto DELETEAsync<TEndpoint, TRequest>(HttpClient, TRequest) make a DELETE request to an endpoint using auto route discovery using a request dto that does not send back a response dto. Declaration public static Task<HttpResponseMessage> DELETEAsync<TEndpoint, TRequest>(this HttpClient client, TRequest request) where TEndpoint : IEndpoint Parameters Type Name Description HttpClient client TRequest request the request dto Returns Type Description Task<HttpResponseMessage> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto DELETEAsync<TEndpoint, TRequest, TResponse>(HttpClient, TRequest) make a DELETE request to an endpoint using auto route discovery using a request dto and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO. Declaration public static Task<TestResult<TResponse>> DELETEAsync<TEndpoint, TRequest, TResponse>(this HttpClient client, TRequest request) where TEndpoint : IEndpoint Parameters Type Name Description HttpClient client TRequest request the request dto Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto TResponse the type of the response dto GETAsync<TEndpoint, TResponse>(HttpClient) make a GET request to an endpoint using auto route discovery without a request dto and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO. Declaration public static Task<TestResult<TResponse>> GETAsync<TEndpoint, TResponse>(this HttpClient client) where TEndpoint : IEndpoint Parameters Type Name Description HttpClient client Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TResponse the type of the response dto GETAsync<TRequest, TResponse>(HttpClient, string, TRequest) make a GET request using a request dto and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO. Declaration public static Task<TestResult<TResponse>> GETAsync<TRequest, TResponse>(this HttpClient client, string requestUri, TRequest request) Parameters Type Name Description HttpClient client string requestUri the route url to post to TRequest request the request dto Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TRequest type of the request dto TResponse type of the response dto GETAsync<TEndpoint, TRequest>(HttpClient, TRequest) make a GET request to an endpoint using auto route discovery using a request dto that does not send back a response dto. Declaration public static Task<HttpResponseMessage> GETAsync<TEndpoint, TRequest>(this HttpClient client, TRequest request) where TEndpoint : IEndpoint Parameters Type Name Description HttpClient client TRequest request the request dto Returns Type Description Task<HttpResponseMessage> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto GETAsync<TEndpoint, TRequest, TResponse>(HttpClient, TRequest) make a GET request to an endpoint using auto route discovery using a request dto and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO. Declaration public static Task<TestResult<TResponse>> GETAsync<TEndpoint, TRequest, TResponse>(this HttpClient client, TRequest request) where TEndpoint : IEndpoint Parameters Type Name Description HttpClient client TRequest request the request dto Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto TResponse the type of the response dto PATCHAsync<TEndpoint, TResponse>(HttpClient) make a PATCH request to an endpoint using auto route discovery without a request dto and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO. Declaration public static Task<TestResult<TResponse>> PATCHAsync<TEndpoint, TResponse>(this HttpClient client) where TEndpoint : IEndpoint Parameters Type Name Description HttpClient client Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TResponse the type of the response dto PATCHAsync<TRequest, TResponse>(HttpClient, string, TRequest, bool?) make a PATCH request using a request dto and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO. Declaration public static Task<TestResult<TResponse>> PATCHAsync<TRequest, TResponse>(this HttpClient client, string requestUri, TRequest request, bool? sendAsFormData = null) Parameters Type Name Description HttpClient client string requestUri the route url to PATCH to TRequest request the request dto bool? sendAsFormData when set to true, the request dto will be automatically converted to a MultipartFormDataContent Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TRequest type of the request dto TResponse type of the response dto PATCHAsync<TEndpoint, TRequest>(HttpClient, TRequest, bool?) make a PATCH request to an endpoint using auto route discovery using a request dto that does not send back a response dto. Declaration public static Task<HttpResponseMessage> PATCHAsync<TEndpoint, TRequest>(this HttpClient client, TRequest request, bool? sendAsFormData = null) where TEndpoint : IEndpoint Parameters Type Name Description HttpClient client TRequest request the request dto bool? sendAsFormData when set to true, the request dto will be automatically converted to a MultipartFormDataContent Returns Type Description Task<HttpResponseMessage> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto PATCHAsync<TEndpoint, TRequest, TResponse>(HttpClient, TRequest, bool?) make a PATCH request to an endpoint using auto route discovery using a request dto and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO. Declaration public static Task<TestResult<TResponse>> PATCHAsync<TEndpoint, TRequest, TResponse>(this HttpClient client, TRequest request, bool? sendAsFormData = null) where TEndpoint : IEndpoint Parameters Type Name Description HttpClient client TRequest request the request dto bool? sendAsFormData when set to true, the request dto will be automatically converted to a MultipartFormDataContent Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto TResponse the type of the response dto POSTAsync<TEndpoint, TResponse>(HttpClient) make a POST request to an endpoint using auto route discovery without a request dto and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO. Declaration public static Task<TestResult<TResponse>> POSTAsync<TEndpoint, TResponse>(this HttpClient client) where TEndpoint : IEndpoint Parameters Type Name Description HttpClient client Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TResponse the type of the response dto POSTAsync<TRequest, TResponse>(HttpClient, string, TRequest, bool?) make a POST request using a request dto and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO/>. Declaration public static Task<TestResult<TResponse>> POSTAsync<TRequest, TResponse>(this HttpClient client, string requestUri, TRequest request, bool? sendAsFormData = null) Parameters Type Name Description HttpClient client string requestUri the route url to post to TRequest request the request dto bool? sendAsFormData when set to true, the request dto will be automatically converted to a MultipartFormDataContent Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TRequest type of the request dto TResponse type of the response dto POSTAsync<TEndpoint, TRequest>(HttpClient, TRequest, bool?) make a POST request to an endpoint using auto route discovery using a request dto that does not send back a response dto. Declaration public static Task<HttpResponseMessage> POSTAsync<TEndpoint, TRequest>(this HttpClient client, TRequest request, bool? sendAsFormData = null) where TEndpoint : IEndpoint Parameters Type Name Description HttpClient client TRequest request the request dto bool? sendAsFormData when set to true, the request dto will be automatically converted to a MultipartFormDataContent Returns Type Description Task<HttpResponseMessage> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto POSTAsync<TEndpoint, TRequest, TResponse>(HttpClient, TRequest, bool?) make a POST request to an endpoint using auto route discovery using a request dto and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO. Declaration public static Task<TestResult<TResponse>> POSTAsync<TEndpoint, TRequest, TResponse>(this HttpClient client, TRequest request, bool? sendAsFormData = null) where TEndpoint : IEndpoint Parameters Type Name Description HttpClient client TRequest request the request dto bool? sendAsFormData when set to true, the request dto will be automatically converted to a MultipartFormDataContent Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto TResponse the type of the response dto PUTAsync<TEndpoint, TResponse>(HttpClient) make a PUT request to an endpoint using auto route discovery without a request dto and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO. Declaration public static Task<TestResult<TResponse>> PUTAsync<TEndpoint, TResponse>(this HttpClient client) where TEndpoint : IEndpoint Parameters Type Name Description HttpClient client Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TResponse the type of the response dto PUTAsync<TRequest, TResponse>(HttpClient, string, TRequest, bool?) make a PUT request using a request dto and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO. Declaration public static Task<TestResult<TResponse>> PUTAsync<TRequest, TResponse>(this HttpClient client, string requestUri, TRequest request, bool? sendAsFormData = null) Parameters Type Name Description HttpClient client string requestUri the route url to post to TRequest request the request dto bool? sendAsFormData when set to true, the request dto will be automatically converted to a MultipartFormDataContent Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TRequest type of the request dto TResponse type of the response dto PUTAsync<TEndpoint, TRequest>(HttpClient, TRequest, bool?) make a PUT request to an endpoint using auto route discovery using a request dto that does not send back a response dto. Declaration public static Task<HttpResponseMessage> PUTAsync<TEndpoint, TRequest>(this HttpClient client, TRequest request, bool? sendAsFormData = null) where TEndpoint : IEndpoint Parameters Type Name Description HttpClient client TRequest request the request dto bool? sendAsFormData when set to true, the request dto will be automatically converted to a MultipartFormDataContent Returns Type Description Task<HttpResponseMessage> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto PUTAsync<TEndpoint, TRequest, TResponse>(HttpClient, TRequest, bool?) make a PUT request to an endpoint using auto route discovery using a request dto and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO. Declaration public static Task<TestResult<TResponse>> PUTAsync<TEndpoint, TRequest, TResponse>(this HttpClient client, TRequest request, bool? sendAsFormData = null) where TEndpoint : IEndpoint Parameters Type Name Description HttpClient client TRequest request the request dto bool? sendAsFormData when set to true, the request dto will be automatically converted to a MultipartFormDataContent Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TEndpoint the type of the endpoint TRequest the type of the request dto TResponse the type of the response dto SENDAsync<TRequest, TResponse>(HttpClient, HttpMethod, string, TRequest, bool?) send a request DTO to a given endpoint URL and get back a TestResult<TResponse> containing the HttpResponseMessage as well as the TResponse DTO Declaration public static Task<TestResult<TResponse>> SENDAsync<TRequest, TResponse>(this HttpClient client, HttpMethod method, string requestUri, TRequest request, bool? sendAsFormData = null) Parameters Type Name Description HttpClient client HttpMethod method the http method to use string requestUri the route url of the endpoint TRequest request the request dto bool? sendAsFormData when set to true, the request dto will be automatically converted to a MultipartFormDataContent Returns Type Description Task<TestResult<TResponse>> Type Parameters Name Description TRequest type of the request dto TResponse type of the response dto"
  },
  "api/FastEndpoints.HttpContextExtensions.html": {
    "href": "api/FastEndpoints.HttpContextExtensions.html",
    "title": "Class HttpContextExtensions | FastEndpoints",
    "keywords": "Class HttpContextExtensions Inheritance object HttpContextExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public static class HttpContextExtensions Methods MarkResponseStart(HttpContext) marks the current response as started so that ResponseStarted(HttpContext) can return the correct result. Declaration public static void MarkResponseStart(this HttpContext ctx) Parameters Type Name Description HttpContext ctx ProcessorState<TState>(HttpContext) retrieve the common processor state for the current http context. Declaration public static TState ProcessorState<TState>(this HttpContext ctx) where TState : class, new() Parameters Type Name Description HttpContext ctx Returns Type Description TState Type Parameters Name Description TState the type of the processor state Exceptions Type Condition InvalidOperationException thrown if the requested type of the processor state does not match with what's already stored in the context Resolve(HttpContext, Type) resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public static object Resolve(this HttpContext _, Type typeOfService) Parameters Type Name Description HttpContext _ Type typeOfService the type of the service to resolve Returns Type Description object Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved Resolve<TService>(HttpContext) resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public static TService Resolve<TService>(this HttpContext _) where TService : class Parameters Type Name Description HttpContext _ Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved ResponseStarted(HttpContext) check if the current response has already started or not. Declaration public static bool ResponseStarted(this HttpContext ctx) Parameters Type Name Description HttpContext ctx Returns Type Description bool TryResolve(HttpContext, Type) try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public static object? TryResolve(this HttpContext _, Type typeOfService) Parameters Type Name Description HttpContext _ Type typeOfService the type of the service to resolve Returns Type Description object TryResolve<TService>(HttpContext) try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public static TService? TryResolve<TService>(this HttpContext _) where TService : class Parameters Type Name Description HttpContext _ Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve"
  },
  "api/FastEndpoints.HttpDeleteAttribute.html": {
    "href": "api/FastEndpoints.HttpDeleteAttribute.html",
    "title": "Class HttpDeleteAttribute | FastEndpoints",
    "keywords": "Class HttpDeleteAttribute use this attribute to specify a DELETE route for an endpoint Inheritance object Attribute HttpAttribute HttpDeleteAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public sealed class HttpDeleteAttribute : HttpAttribute Constructors HttpDeleteAttribute(params string[]) use this attribute to specify a DELETE route for an endpoint Declaration public HttpDeleteAttribute(params string[] routes) Parameters Type Name Description string[] routes the routes for the endpoint"
  },
  "api/FastEndpoints.HttpGetAttribute.html": {
    "href": "api/FastEndpoints.HttpGetAttribute.html",
    "title": "Class HttpGetAttribute | FastEndpoints",
    "keywords": "Class HttpGetAttribute use this attribute to specify a GET route for an endpoint Inheritance object Attribute HttpAttribute HttpGetAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public sealed class HttpGetAttribute : HttpAttribute Constructors HttpGetAttribute(params string[]) use this attribute to specify a GET route for an endpoint Declaration public HttpGetAttribute(params string[] routes) Parameters Type Name Description string[] routes the routes for the endpoint"
  },
  "api/FastEndpoints.HttpPatchAttribute.html": {
    "href": "api/FastEndpoints.HttpPatchAttribute.html",
    "title": "Class HttpPatchAttribute | FastEndpoints",
    "keywords": "Class HttpPatchAttribute use this attribute to specify a PATCH route for an endpoint Inheritance object Attribute HttpAttribute HttpPatchAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public sealed class HttpPatchAttribute : HttpAttribute Constructors HttpPatchAttribute(params string[]) use this attribute to specify a PATCH route for an endpoint Declaration public HttpPatchAttribute(params string[] routes) Parameters Type Name Description string[] routes the routes for the endpoint"
  },
  "api/FastEndpoints.HttpPostAttribute.html": {
    "href": "api/FastEndpoints.HttpPostAttribute.html",
    "title": "Class HttpPostAttribute | FastEndpoints",
    "keywords": "Class HttpPostAttribute use this attribute to specify a POST route for an endpoint Inheritance object Attribute HttpAttribute HttpPostAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public sealed class HttpPostAttribute : HttpAttribute Constructors HttpPostAttribute(params string[]) use this attribute to specify a POST route for an endpoint Declaration public HttpPostAttribute(params string[] routes) Parameters Type Name Description string[] routes the routes for the endpoint"
  },
  "api/FastEndpoints.HttpPutAttribute.html": {
    "href": "api/FastEndpoints.HttpPutAttribute.html",
    "title": "Class HttpPutAttribute | FastEndpoints",
    "keywords": "Class HttpPutAttribute use this attribute to specify a PUT route for an endpoint Inheritance object Attribute HttpAttribute HttpPutAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public sealed class HttpPutAttribute : HttpAttribute Constructors HttpPutAttribute(params string[]) use this attribute to specify a PUT route for an endpoint Declaration public HttpPutAttribute(params string[] routes) Parameters Type Name Description string[] routes the routes for the endpoint"
  },
  "api/FastEndpoints.HttpResponseExtensions.html": {
    "href": "api/FastEndpoints.HttpResponseExtensions.html",
    "title": "Class HttpResponseExtensions | FastEndpoints",
    "keywords": "Class HttpResponseExtensions Inheritance object HttpResponseExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public static class HttpResponseExtensions Methods SendAsync<TResponse>(HttpResponse, TResponse, int, JsonSerializerContext?, CancellationToken) send the supplied response dto serialized as json to the client. Declaration public static Task SendAsync<TResponse>(this HttpResponse rsp, TResponse response, int statusCode = 200, JsonSerializerContext? jsonSerializerContext = null, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp TResponse response the object to serialize to json int statusCode optional custom http status code JsonSerializerContext jsonSerializerContext json serializer context if code generation is used CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task Type Parameters Name Description TResponse SendBytesAsync(HttpResponse, byte[], string?, string, DateTimeOffset?, bool, CancellationToken) send a byte array to the client Declaration public static Task SendBytesAsync(this HttpResponse rsp, byte[] bytes, string? fileName = null, string contentType = \"application/octet-stream\", DateTimeOffset? lastModified = null, bool enableRangeProcessing = false, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp byte[] bytes the bytes to send string fileName string contentType optional content type to set on the http response DateTimeOffset? lastModified optional last modified date-time-offset for the data stream bool enableRangeProcessing optional switch for enabling range processing CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task SendCreatedAtAsync(HttpResponse, string, object?, object?, JsonSerializerContext?, bool, CancellationToken) send a 201 created response with a location header containing where the resource can be retrieved from. WARNING: this method is only supported on single verb/route endpoints. it will not produce a `Location` header if used in a multi verb or multi route endpoint. Declaration public static Task SendCreatedAtAsync(this HttpResponse rsp, string endpointName, object? routeValues, object? responseBody, JsonSerializerContext? jsonSerializerContext = null, bool generateAbsoluteUrl = false, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp string endpointName the name of the endpoint to use for link generation (openapi route id) object routeValues a route values object with key/value pairs of route information object responseBody the content to be serialized in the response body JsonSerializerContext jsonSerializerContext json serializer context if code generation is used bool generateAbsoluteUrl set to true for generating a absolute url instead of relative url for the location header CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task SendCreatedAtAsync<TEndpoint>(HttpResponse, object?, object?, Http?, int?, JsonSerializerContext?, bool, CancellationToken) send a 201 created response with a location header containing where the resource can be retrieved from. HINT: if pointing to an endpoint with multiple verbs, make sure to specify the 'verb' argument and if pointing to a multi route endpoint, specify the 'routeNumber' argument. WARNING: this overload will not add a location header if you've set a custom endpoint name using .WithName() method. use the other overload that accepts a string endpoint name instead. Declaration public static Task SendCreatedAtAsync<TEndpoint>(this HttpResponse rsp, object? routeValues, object? responseBody, Http? verb = null, int? routeNumber = null, JsonSerializerContext? jsonSerializerContext = null, bool generateAbsoluteUrl = false, CancellationToken cancellation = default) where TEndpoint : IEndpoint Parameters Type Name Description HttpResponse rsp object routeValues a route values object with key/value pairs of route information object responseBody the content to be serialized in the response body Http? verb only useful when pointing to a multi verb endpoint int? routeNumber only useful when pointing to a multi route endpoint JsonSerializerContext jsonSerializerContext json serializer context if code generation is used bool generateAbsoluteUrl set to true for generating a absolute url instead of relative url for the location header CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task Type Parameters Name Description TEndpoint the type of the endpoint where the resource can be retrieved from SendEmptyJsonObject(HttpResponse, JsonSerializerContext?, CancellationToken) send an empty json object in the body Declaration public static Task SendEmptyJsonObject(this HttpResponse rsp, JsonSerializerContext? jsonSerializerContext = null, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp JsonSerializerContext jsonSerializerContext json serializer context if code generation is used CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task SendErrorsAsync(HttpResponse, List<ValidationFailure>, int, JsonSerializerContext?, CancellationToken) send a 400 bad request with error details of the current validation failures Declaration public static Task SendErrorsAsync(this HttpResponse rsp, List<ValidationFailure> failures, int statusCode = 400, JsonSerializerContext? jsonSerializerContext = null, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp List<ValidationFailure> failures the collection of failures int statusCode the http status code for the error response JsonSerializerContext jsonSerializerContext json serializer context if code generation is used CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task SendEventStreamAsync<T>(HttpResponse, string, IAsyncEnumerable<T>, CancellationToken) start a \"server-sent-events\" data stream for the client asynchronously without blocking any threads Declaration public static Task SendEventStreamAsync<T>(this HttpResponse rsp, string eventName, IAsyncEnumerable<T> eventStream, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp string eventName the name of the event stream IAsyncEnumerable<T> eventStream an IAsyncEnumerable that is the source of the data CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task Type Parameters Name Description T the type of the objects being sent in the event stream SendFileAsync(HttpResponse, FileInfo, string, DateTimeOffset?, bool, CancellationToken) send a file to the client Declaration public static Task SendFileAsync(this HttpResponse rsp, FileInfo fileInfo, string contentType = \"application/octet-stream\", DateTimeOffset? lastModified = null, bool enableRangeProcessing = false, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp FileInfo fileInfo string contentType optional content type to set on the http response DateTimeOffset? lastModified optional last modified date-time-offset for the data stream bool enableRangeProcessing optional switch for enabling range processing CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task SendForbiddenAsync(HttpResponse, CancellationToken) send a 403 unauthorized response Declaration public static Task SendForbiddenAsync(this HttpResponse rsp, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task SendHeadersAsync(HttpResponse, Action<IHeaderDictionary>, int, CancellationToken) send headers in response to a HEAD request Declaration public static Task SendHeadersAsync(this HttpResponse rsp, Action<IHeaderDictionary> headers, int statusCode = 200, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp Action<IHeaderDictionary> headers an action to be performed on the headers dictionary of the response int statusCode optional custom http status code CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task SendNoContentAsync(HttpResponse, CancellationToken) send a 204 no content response Declaration public static Task SendNoContentAsync(this HttpResponse rsp, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task SendNotFoundAsync(HttpResponse, CancellationToken) send a 404 not found response Declaration public static Task SendNotFoundAsync(this HttpResponse rsp, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task SendOkAsync(HttpResponse, CancellationToken) send an http 200 ok response without any body Declaration public static Task SendOkAsync(this HttpResponse rsp, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task SendOkAsync<TResponse>(HttpResponse, TResponse, JsonSerializerContext?, CancellationToken) send an http 200 ok response with the supplied response dto serialized as json to the client. Declaration public static Task SendOkAsync<TResponse>(this HttpResponse rsp, TResponse response, JsonSerializerContext? jsonSerializerContext = null, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp TResponse response the object to serialize to json JsonSerializerContext jsonSerializerContext json serializer context if code generation is used CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task Type Parameters Name Description TResponse SendRedirectAsync(HttpResponse, string, bool, CancellationToken) send a 302/301 redirect response Declaration public static Task SendRedirectAsync(this HttpResponse rsp, string location, bool isPermanant, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp string location the location to redirect to bool isPermanant set to true for a 301 redirect. 302 is the default. CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task SendResultAsync(HttpResponse, IResult) execute and send any IResult produced by the Results class in minimal apis. Declaration public static Task SendResultAsync(this HttpResponse rsp, IResult result) Parameters Type Name Description HttpResponse rsp IResult result the IResult instance to execute such as: Results.Forbid(); Results.Ok(...); Returns Type Description Task SendStreamAsync(HttpResponse, Stream, string?, long?, string, DateTimeOffset?, bool, CancellationToken) send the contents of a stream to the client Declaration public static Task SendStreamAsync(this HttpResponse rsp, Stream stream, string? fileName = null, long? fileLengthBytes = null, string contentType = \"application/octet-stream\", DateTimeOffset? lastModified = null, bool enableRangeProcessing = false, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp Stream stream the stream to read the data from string fileName and optional file name to set in the content-disposition header long? fileLengthBytes optional total size of the file/stream string contentType optional content type to set on the http response DateTimeOffset? lastModified optional last modified date-time-offset for the data stream bool enableRangeProcessing optional switch for enabling range processing CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task SendStringAsync(HttpResponse, string, int, string, CancellationToken) send the supplied string content to the client. Declaration public static Task SendStringAsync(this HttpResponse rsp, string content, int statusCode = 200, string contentType = \"text/plain\", CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp string content the string to write to the response body int statusCode optional custom http status code string contentType optional content type header value CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task SendUnauthorizedAsync(HttpResponse, CancellationToken) send a 401 unauthorized response Declaration public static Task SendUnauthorizedAsync(this HttpResponse rsp, CancellationToken cancellation = default) Parameters Type Name Description HttpResponse rsp CancellationToken cancellation optional cancellation token. if not specified, the HttpContext.RequestAborted token is used. Returns Type Description Task"
  },
  "api/FastEndpoints.HubMode.html": {
    "href": "api/FastEndpoints.HubMode.html",
    "title": "Enum HubMode | FastEndpoints",
    "keywords": "Enum HubMode enum for specifying which mode the event hub should be running in. Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax [Flags] public enum HubMode Fields Name Description EventBroker enable remote event publishers to send events to this server which will be relayed to the connected subscribers. this mode also allows this server itself to publish events as well. EventPublisher this server/application itself is the sole publisher of events. no external publishers will be accepted. this is the default mode. RoundRobin with this mode events will only be delivered to just one of the subscribers connected to the hub in a round robin fashion. if for example, there's two subscribers (A and B) connected, event 1 will be delivered to subscriber A. event 2 will be delivered to subscriber B. event 3 will be delivered to subscriber A again and so on."
  },
  "api/FastEndpoints.IClientStreamCommandHandler-2.html": {
    "href": "api/FastEndpoints.IClientStreamCommandHandler-2.html",
    "title": "Interface IClientStreamCommandHandler<T, TResult> | FastEndpoints",
    "keywords": "Interface IClientStreamCommandHandler<T, TResult> interface to be implemented by a command handler for a stream of T that returns a single TResult. Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Core.dll Syntax public interface IClientStreamCommandHandler<T, TResult> where T : class where TResult : class Type Parameters Name Description T the type of item in the stream TResult the type of the result returned when the stream ends Methods ExecuteAsync(IAsyncEnumerable<T>, CancellationToken) accepts a stream of T and returns a TResult when the stream ends. Declaration Task<TResult> ExecuteAsync(IAsyncEnumerable<T> stream, CancellationToken ct) Parameters Type Name Description IAsyncEnumerable<T> stream the stream of incoming items CancellationToken ct optional cancellation token Returns Type Description Task<TResult>"
  },
  "api/FastEndpoints.ICommand-1.html": {
    "href": "api/FastEndpoints.ICommand-1.html",
    "title": "Interface ICommand<TResult> | FastEndpoints",
    "keywords": "Interface ICommand<TResult> interface for a command that returns a TResult Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Core.dll Syntax public interface ICommand<out TResult> Type Parameters Name Description TResult the type of the result that will be returned from the handler of this command (i.e. ICommandHandler<TCommand, TResult>)"
  },
  "api/FastEndpoints.ICommand.html": {
    "href": "api/FastEndpoints.ICommand.html",
    "title": "Interface ICommand | FastEndpoints",
    "keywords": "Interface ICommand interface for a command that does not return anything Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Core.dll Syntax public interface ICommand"
  },
  "api/FastEndpoints.ICommandHandler-1.html": {
    "href": "api/FastEndpoints.ICommandHandler-1.html",
    "title": "Interface ICommandHandler<TCommand> | FastEndpoints",
    "keywords": "Interface ICommandHandler<TCommand> interface to be implemented by a command handler for a given command type that does not return a result Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Core.dll Syntax public interface ICommandHandler<in TCommand> : ICommandHandler where TCommand : ICommand Type Parameters Name Description TCommand the type of the command Methods ExecuteAsync(TCommand, CancellationToken) accepts a command and does not return a result. Declaration Task ExecuteAsync(TCommand command, CancellationToken ct) Parameters Type Name Description TCommand command the input command object CancellationToken ct optional cancellation token Returns Type Description Task"
  },
  "api/FastEndpoints.ICommandHandler-2.html": {
    "href": "api/FastEndpoints.ICommandHandler-2.html",
    "title": "Interface ICommandHandler<TCommand, TResult> | FastEndpoints",
    "keywords": "Interface ICommandHandler<TCommand, TResult> interface to be implemented by a command handler for a given command type that returns a result Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Core.dll Syntax public interface ICommandHandler<in TCommand, TResult> : ICommandHandler where TCommand : ICommand<TResult> Type Parameters Name Description TCommand the type of the input command TResult the type of the result returned Methods ExecuteAsync(TCommand, CancellationToken) receives a command and returns a result. Declaration Task<TResult> ExecuteAsync(TCommand command, CancellationToken ct) Parameters Type Name Description TCommand command the input command object CancellationToken ct optional cancellation token Returns Type Description Task<TResult>"
  },
  "api/FastEndpoints.ICommandHandler.html": {
    "href": "api/FastEndpoints.ICommandHandler.html",
    "title": "Interface ICommandHandler | FastEndpoints",
    "keywords": "Interface ICommandHandler marker interface for all command handlers Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Core.dll Syntax public interface ICommandHandler"
  },
  "api/FastEndpoints.IEndpoint.html": {
    "href": "api/FastEndpoints.IEndpoint.html",
    "title": "Interface IEndpoint | FastEndpoints",
    "keywords": "Interface IEndpoint the common interface implemented by all endpoints Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IEndpoint Properties Definition gets the endpoint definition which contains all the configuration info for the endpoint Declaration EndpointDefinition Definition { get; } Property Value Type Description EndpointDefinition HttpContext the http context of the current request Declaration HttpContext HttpContext { get; } Property Value Type Description HttpContext ValidationFailures validation failures collection for the endpoint Declaration List<ValidationFailure> ValidationFailures { get; } Property Value Type Description List<ValidationFailure> Methods TestURLFor<TEndpoint>() Declaration public static string TestURLFor<TEndpoint>() Returns Type Description string Type Parameters Name Description TEndpoint"
  },
  "api/FastEndpoints.IEndpointFactory.html": {
    "href": "api/FastEndpoints.IEndpointFactory.html",
    "title": "Interface IEndpointFactory | FastEndpoints",
    "keywords": "Interface IEndpointFactory interface for the creation of endpoints. Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IEndpointFactory Methods Create(EndpointDefinition, HttpContext) returns the instantiated fast endpoint from a given EndpointDefinition and HttpContext Declaration BaseEndpoint Create(EndpointDefinition definition, HttpContext ctx) Parameters Type Name Description EndpointDefinition definition the endpoint definition for the current request HttpContext ctx the http context of the current request Returns Type Description BaseEndpoint"
  },
  "api/FastEndpoints.IEvent.html": {
    "href": "api/FastEndpoints.IEvent.html",
    "title": "Interface IEvent | FastEndpoints",
    "keywords": "Interface IEvent marker interface for an event model Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Core.dll Syntax public interface IEvent"
  },
  "api/FastEndpoints.IEventBus.html": {
    "href": "api/FastEndpoints.IEventBus.html",
    "title": "Interface IEventBus | FastEndpoints",
    "keywords": "Interface IEventBus interface to be implemented by an event bus Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IEventBus Methods PublishAsync<TEvent>(TEvent, Mode, CancellationToken) publishes a given event model to all subscribers registered to handle the that type of event. Declaration Task PublishAsync<TEvent>(TEvent eventModel, Mode waitMode = Mode.WaitForAll, CancellationToken cancellation = default) where TEvent : notnull Parameters Type Name Description TEvent eventModel the notification event model/dto to publish Mode waitMode specify whether to wait for none, any or all of the subscribers to complete their work CancellationToken cancellation an optional cancellation token Returns Type Description Task a Task that matches the wait mode specified. WaitForNone returns an already completed Task (fire and forget). WaitForAny returns a Task that will complete when any of the subscribers complete their work. WaitForAll return a Task that will complete only when all of the subscribers complete their work. Type Parameters Name Description TEvent the type of the event model"
  },
  "api/FastEndpoints.IEventHandler-1.html": {
    "href": "api/FastEndpoints.IEventHandler-1.html",
    "title": "Interface IEventHandler<TEvent> | FastEndpoints",
    "keywords": "Interface IEventHandler<TEvent> interface to be implemented by event handlers Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Core.dll Syntax public interface IEventHandler<TEvent> : IEventHandler Type Parameters Name Description TEvent the type of the event model to be handled by this event handler Methods HandleAsync(TEvent, CancellationToken) the handler logic for the event handler Declaration Task HandleAsync(TEvent eventModel, CancellationToken ct) Parameters Type Name Description TEvent eventModel the input event model CancellationToken ct optional cancellation token Returns Type Description Task"
  },
  "api/FastEndpoints.IEventHandler.html": {
    "href": "api/FastEndpoints.IEventHandler.html",
    "title": "Interface IEventHandler | FastEndpoints",
    "keywords": "Interface IEventHandler marker interface for all event handlers Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Core.dll Syntax public interface IEventHandler"
  },
  "api/FastEndpoints.IEventHubStorageProvider-1.html": {
    "href": "api/FastEndpoints.IEventHubStorageProvider-1.html",
    "title": "Interface IEventHubStorageProvider<TStorageRecord> | FastEndpoints",
    "keywords": "Interface IEventHubStorageProvider<TStorageRecord> interface for implementing a storage provider for event hub app (gRPC server) Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public interface IEventHubStorageProvider<TStorageRecord> where TStorageRecord : IEventStorageRecord Type Parameters Name Description TStorageRecord the type of the storage record Methods GetNextBatchAsync(PendingRecordSearchParams<TStorageRecord>) fetch the next batch of pending event storage records that need to be processed. Declaration ValueTask<IEnumerable<TStorageRecord>> GetNextBatchAsync(PendingRecordSearchParams<TStorageRecord> parameters) Parameters Type Name Description PendingRecordSearchParams<TStorageRecord> parameters use these supplied search parameters to find the next batch of event records from your database Returns Type Description ValueTask<IEnumerable<TStorageRecord>> MarkEventAsCompleteAsync(TStorageRecord, CancellationToken) mark the event storage record as complete by either replacing the entity on storage with the supplied instance or simply update the IsComplete field to true with a partial update operation. Declaration ValueTask MarkEventAsCompleteAsync(TStorageRecord r, CancellationToken ct) Parameters Type Name Description TStorageRecord r CancellationToken ct cancellation token Returns Type Description ValueTask PurgeStaleRecordsAsync(StaleRecordSearchParams<TStorageRecord>) this method will be called hourly. implement this method to remove stale records (completed or expired) from storage. or instead of removing them, you can move them to some other location (dead-letter-queue maybe) or for inspection by a human. or if you'd like to retry expired events, update the ExpireOn field to a future date/time. NOTE: the default match criteria is: r => r.IsComplete || DateTime.UtcNow >= r.ExpireOn Declaration ValueTask PurgeStaleRecordsAsync(StaleRecordSearchParams<TStorageRecord> parameters) Parameters Type Name Description StaleRecordSearchParams<TStorageRecord> parameters use these supplied search parameters to find relevant event records from your database Returns Type Description ValueTask RestoreSubscriberIDsForEventTypeAsync(SubscriberIDRestorationParams<TStorageRecord>) this method will only be called once (for each event type) on app startup. if there are any pending records on storage from a previous app run, simply return a collection of unique subscriber IDs. Declaration ValueTask<IEnumerable<string>> RestoreSubscriberIDsForEventTypeAsync(SubscriberIDRestorationParams<TStorageRecord> parameters) Parameters Type Name Description SubscriberIDRestorationParams<TStorageRecord> parameters use these supplied search parameters to find relevant event records from your database Returns Type Description ValueTask<IEnumerable<string>> StoreEventAsync(TStorageRecord, CancellationToken) store the event storage record however you please. ideally on a nosql database. Declaration ValueTask StoreEventAsync(TStorageRecord r, CancellationToken ct) Parameters Type Name Description TStorageRecord r the event storage record which contains the actual event object as well as some metadata CancellationToken ct cancellation token Returns Type Description ValueTask"
  },
  "api/FastEndpoints.IEventStorageRecord.html": {
    "href": "api/FastEndpoints.IEventStorageRecord.html",
    "title": "Interface IEventStorageRecord | FastEndpoints",
    "keywords": "Interface IEventStorageRecord interface for implementing an event storage record that encapsulates/embeds an event (IEvent) Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public interface IEventStorageRecord Properties Event the actual event object that will be embedded in the storage record. if your database/orm (such as ef-core) doesn't support embedding objects, you can take the following steps: 1. add a [NotMapped] attribute to this property. 2. add a new property, either a string or array 3. implement both and to serialize/deserialize the event object back and forth and store it in the newly added property. you may use any serializer you please. recommendation is to use MessagePack. Declaration object Event { get; set; } Property Value Type Description object EventType the full type name of the event Declaration string EventType { get; set; } Property Value Type Description string ExpireOn the expiration date/time of the event. this is used to purge stale records. default value is 4 hours from time of creation. Declaration DateTime ExpireOn { get; set; } Property Value Type Description DateTime IsComplete pending status of the event. will only return true if the event has been successfully processed and is ready to be discarded. Declaration bool IsComplete { get; set; } Property Value Type Description bool SubscriberID a subscriber id is a unique identifier of an event stream subscriber on a remote node. it is a unique id per each event handler type (TEvent+TEventHandler combo). you don't have to worry about generating this as it will automatically be set by the library. Declaration string SubscriberID { get; set; } Property Value Type Description string Methods GetEvent<TEvent>() implement this function to customize event deserialization. Declaration TEvent GetEvent<TEvent>() where TEvent : IEvent Returns Type Description TEvent Type Parameters Name Description TEvent SetEvent<TEvent>(TEvent) implement this method to customize event serialization. Declaration void SetEvent<TEvent>(TEvent @event) where TEvent : IEvent Parameters Type Name Description TEvent event Type Parameters Name Description TEvent"
  },
  "api/FastEndpoints.IEventSubscriberStorageProvider-1.html": {
    "href": "api/FastEndpoints.IEventSubscriberStorageProvider-1.html",
    "title": "Interface IEventSubscriberStorageProvider<TStorageRecord> | FastEndpoints",
    "keywords": "Interface IEventSubscriberStorageProvider<TStorageRecord> interface for implementing a storage provider for an event subscription client app (gRPC client) Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public interface IEventSubscriberStorageProvider<TStorageRecord> where TStorageRecord : IEventStorageRecord Type Parameters Name Description TStorageRecord the type of the storage record Methods GetNextBatchAsync(PendingRecordSearchParams<TStorageRecord>) fetch the next batch of pending event storage records that need to be processed. Declaration ValueTask<IEnumerable<TStorageRecord>> GetNextBatchAsync(PendingRecordSearchParams<TStorageRecord> parameters) Parameters Type Name Description PendingRecordSearchParams<TStorageRecord> parameters use these supplied search parameters to find the next batch of event records from your database Returns Type Description ValueTask<IEnumerable<TStorageRecord>> MarkEventAsCompleteAsync(TStorageRecord, CancellationToken) mark the event storage record as complete by either replacing the entity on storage with the supplied instance or simply update the IsComplete field to true with a partial update operation. Declaration ValueTask MarkEventAsCompleteAsync(TStorageRecord r, CancellationToken ct) Parameters Type Name Description TStorageRecord r the storage record to mark complete CancellationToken ct cancellation token Returns Type Description ValueTask PurgeStaleRecordsAsync(StaleRecordSearchParams<TStorageRecord>) this method will be called hourly. implement this method to remove stale records (completed or expired) from storage. or instead of removing them, you can move them to some other location (dead-letter-queue maybe) or for inspection by a human. or if you'd like to retry expired events, update the ExpireOn field to a future date/time. NOTE: the default match criteria is: r => r.IsComplete || DateTime.UtcNow >= r.ExpireOn Declaration ValueTask PurgeStaleRecordsAsync(StaleRecordSearchParams<TStorageRecord> parameters) Parameters Type Name Description StaleRecordSearchParams<TStorageRecord> parameters use these supplied search parameters to find stale records Returns Type Description ValueTask StoreEventAsync(TStorageRecord, CancellationToken) store the event storage record however you please. ideally on a nosql database. Declaration ValueTask StoreEventAsync(TStorageRecord r, CancellationToken ct) Parameters Type Name Description TStorageRecord r the event storage record which contains the actual event object as well as some metadata CancellationToken ct cancellation token Returns Type Description ValueTask"
  },
  "api/FastEndpoints.IGlobalPostProcessor.html": {
    "href": "api/FastEndpoints.IGlobalPostProcessor.html",
    "title": "Interface IGlobalPostProcessor | FastEndpoints",
    "keywords": "Interface IGlobalPostProcessor interface for defining global post-processors to be executed after the main endpoint handler is done Inherited Members IPostProcessor.PostProcessAsync(IPostProcessorContext, CancellationToken) Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IGlobalPostProcessor : IPostProcessor"
  },
  "api/FastEndpoints.IGlobalPreProcessor.html": {
    "href": "api/FastEndpoints.IGlobalPreProcessor.html",
    "title": "Interface IGlobalPreProcessor | FastEndpoints",
    "keywords": "Interface IGlobalPreProcessor interface for defining global pre-processors to be executed before the main endpoint handler is called Inherited Members IPreProcessor.PreProcessAsync(IPreProcessorContext, CancellationToken) Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IGlobalPreProcessor : IPreProcessor"
  },
  "api/FastEndpoints.IHasMapper-1.html": {
    "href": "api/FastEndpoints.IHasMapper-1.html",
    "title": "Interface IHasMapper<TMapper> | FastEndpoints",
    "keywords": "Interface IHasMapper<TMapper> marker/constraint for endpoints that have a mapper generic argument Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IHasMapper<TMapper> : IHasMapper where TMapper : IMapper Type Parameters Name Description TMapper the type of the mapper Properties Map the mapper property Declaration TMapper Map { get; set; } Property Value Type Description TMapper"
  },
  "api/FastEndpoints.IHasMapper.html": {
    "href": "api/FastEndpoints.IHasMapper.html",
    "title": "Interface IHasMapper | FastEndpoints",
    "keywords": "Interface IHasMapper marker interface for endpoints that has a mapper Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IHasMapper"
  },
  "api/FastEndpoints.IJobStorageProvider-1.html": {
    "href": "api/FastEndpoints.IJobStorageProvider-1.html",
    "title": "Interface IJobStorageProvider<TStorageRecord> | FastEndpoints",
    "keywords": "Interface IJobStorageProvider<TStorageRecord> interface for defining the contract of a job storage provider Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IJobStorageProvider<TStorageRecord> where TStorageRecord : IJobStorageRecord Type Parameters Name Description TStorageRecord the type of job storage record of this storage provider Methods GetNextBatchAsync(PendingJobSearchParams<TStorageRecord>) fetch the next pending batch of job storage records that need to be processed, with the supplied search parameters. Declaration Task<IEnumerable<TStorageRecord>> GetNextBatchAsync(PendingJobSearchParams<TStorageRecord> parameters) Parameters Type Name Description PendingJobSearchParams<TStorageRecord> parameters use these supplied search parameters to find the next batch of job records from your database Returns Type Description Task<IEnumerable<TStorageRecord>> MarkJobAsCompleteAsync(TStorageRecord, CancellationToken) mark the job storage record as complete by either replacing the entity on storage with the supplied instance or simply update the IsComplete field to true with a partial update operation. Declaration Task MarkJobAsCompleteAsync(TStorageRecord r, CancellationToken ct) Parameters Type Name Description TStorageRecord r the job storage record to mark as complete CancellationToken ct cancellation token Returns Type Description Task OnHandlerExecutionFailureAsync(TStorageRecord, Exception, CancellationToken) this will only be triggered when a command handler (ICommandHandler<TCommand>) associated with a command throws an exception. If you've set an execution time limit for the command, the thrown exception would be of type OperationCanceledException. when a job/command execution fails, it will be retried immediately. the failed job will be fetched again with the next batch of pending jobs. if one or more jobs keep failing repeatedly, it may cause the whole queue to get stuck in a retry loop preventing it from progressing. to prevent this from happening and allow other jobs to be given a chance at execution, you can reschedule failed jobs to be re-attempted at a future time instead. simply update the ExecuteAfter property to a future date/time and save the entity to the database (or do a partial update of only that property value). Declaration Task OnHandlerExecutionFailureAsync(TStorageRecord r, Exception exception, CancellationToken ct) Parameters Type Name Description TStorageRecord r the job that failed to execute successfully Exception exception the exception that was thrown CancellationToken ct cancellation token Returns Type Description Task PurgeStaleJobsAsync(StaleJobSearchParams<TStorageRecord>) this method will be called hourly. implement this method to delete stale records (completed or expired) from storage. you can safely delete the completed records. the incomplete & expired records can be moved to some other location (dead-letter-queue maybe) or for inspection by a human. or if you'd like to retry expired events, update the ExpireOn field to a future date/time. Declaration Task PurgeStaleJobsAsync(StaleJobSearchParams<TStorageRecord> parameters) Parameters Type Name Description StaleJobSearchParams<TStorageRecord> parameters use these supplied search parameters to find stale job records from your database Returns Type Description Task StoreJobAsync(TStorageRecord, CancellationToken) store the job storage record however you please. ideally on a nosql database. Declaration Task StoreJobAsync(TStorageRecord r, CancellationToken ct) Parameters Type Name Description TStorageRecord r the job storage record which contains the actual command object as well as some metadata CancellationToken ct Returns Type Description Task"
  },
  "api/FastEndpoints.IJobStorageRecord.html": {
    "href": "api/FastEndpoints.IJobStorageRecord.html",
    "title": "Interface IJobStorageRecord | FastEndpoints",
    "keywords": "Interface IJobStorageRecord Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IJobStorageRecord Properties Command the actual command object that will be embedded in the storage record. if your database/orm (such as ef-core) doesn't support embedding objects, you can take the following steps: 1. add a [NotMapped] attribute to this property. 2. add a new property, either a string or array 3. implement both and to serialize/deserialize the command object back and forth and store it in the newly added property. you may use any serializer you please. recommendation is to use MessagePack. Declaration object Command { get; set; } Property Value Type Description object ExecuteAfter the job will not be executed before this date/time. by default it will automatically be set to the time of creation allowing jobs to be executed as soon as they're created. Declaration DateTime ExecuteAfter { get; set; } Property Value Type Description DateTime ExpireOn the expiration date/time of job. if the job remains in an incomplete state past this time, the record is considered stale. Declaration DateTime ExpireOn { get; set; } Property Value Type Description DateTime IsComplete indicates whether the job has successfully completed or not. Declaration bool IsComplete { get; set; } Property Value Type Description bool QueueID a unique id for the job queue. each command type has it's own queue. this is automatically generated by the library. Declaration string QueueID { get; set; } Property Value Type Description string Methods GetCommand<TCommand>() implement this function to customize command deserialization. Declaration TCommand GetCommand<TCommand>() where TCommand : ICommand Returns Type Description TCommand Type Parameters Name Description TCommand SetCommand<TCommand>(TCommand) implement this method to customize command serialization. Declaration void SetCommand<TCommand>(TCommand command) where TCommand : ICommand Parameters Type Name Description TCommand command Type Parameters Name Description TCommand"
  },
  "api/FastEndpoints.IMapper.html": {
    "href": "api/FastEndpoints.IMapper.html",
    "title": "Interface IMapper | FastEndpoints",
    "keywords": "Interface IMapper marker interface for entity mappers Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IMapper"
  },
  "api/FastEndpoints.IPlainTextRequest.html": {
    "href": "api/FastEndpoints.IPlainTextRequest.html",
    "title": "Interface IPlainTextRequest | FastEndpoints",
    "keywords": "Interface IPlainTextRequest implement this interface on your request dto if you need to model bind the raw content body of an incoming http request Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IPlainTextRequest Properties Content the request body content will be bound to this property Declaration string Content { get; set; } Property Value Type Description string"
  },
  "api/FastEndpoints.IPostProcessor-2.html": {
    "href": "api/FastEndpoints.IPostProcessor-2.html",
    "title": "Interface IPostProcessor<TRequest, TResponse> | FastEndpoints",
    "keywords": "Interface IPostProcessor<TRequest, TResponse> defines the generic interface for a post-processor with specific types for the request and response, enabling type-safe post-processing. Inherited Members IPostProcessor.PostProcessAsync(IPostProcessorContext, CancellationToken) Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IPostProcessor<in TRequest, in TResponse> : IPostProcessor Type Parameters Name Description TRequest the type of the request object, which must be non-nullable. TResponse the type of the response object. Methods PostProcessAsync(IPostProcessorContext<TRequest, TResponse>, CancellationToken) asynchronously performs post-processing on the provided context with specific request and response types. Declaration Task PostProcessAsync(IPostProcessorContext<in TRequest, in TResponse> context, CancellationToken ct) Parameters Type Name Description IPostProcessorContext<TRequest, TResponse> context the post-processor context containing the typed request, response, and other processing details. CancellationToken ct the CancellationToken to observe while waiting for the task to complete. Returns Type Description Task a Task that represents the asynchronous post-process operation."
  },
  "api/FastEndpoints.IPostProcessor.html": {
    "href": "api/FastEndpoints.IPostProcessor.html",
    "title": "Interface IPostProcessor | FastEndpoints",
    "keywords": "Interface IPostProcessor defines the interface for a post-processor that can perform asynchronous post-processing tasks after a request has been handled. Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IPostProcessor Methods PostProcessAsync(IPostProcessorContext, CancellationToken) asynchronously performs post-processing on the provided context. Declaration Task PostProcessAsync(IPostProcessorContext context, CancellationToken ct) Parameters Type Name Description IPostProcessorContext context the post-processor context containing request, response, and other processing details. CancellationToken ct the CancellationToken to observe while waiting for the task to complete. Returns Type Description Task a Task that represents the asynchronous post-process operation."
  },
  "api/FastEndpoints.IPostProcessorContext-2.html": {
    "href": "api/FastEndpoints.IPostProcessorContext-2.html",
    "title": "Interface IPostProcessorContext<TRequest, TResponse> | FastEndpoints",
    "keywords": "Interface IPostProcessorContext<TRequest, TResponse> defines the generic interface for a post-processor context with specific types for the request and response. Inherited Members IPostProcessorContext.HttpContext IPostProcessorContext.ValidationFailures IPostProcessorContext.ExceptionDispatchInfo IPostProcessorContext.HasExceptionOccurred IPostProcessorContext.HasValidationFailures Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IPostProcessorContext<out TRequest, out TResponse> : IPostProcessorContext Type Parameters Name Description TRequest the type of the request object, which must be non-nullable. TResponse the type of the response object. Properties Request gets the request object of the generic type TRequest. this hides the non-generic version from IPostProcessorContext. Declaration TRequest Request { get; } Property Value Type Description TRequest Response gets the response object of the generic type TResponse, which may be null if the response is not available. this hides the non-generic version from IPostProcessorContext. Declaration TResponse? Response { get; } Property Value Type Description TResponse"
  },
  "api/FastEndpoints.IPostProcessorContext.html": {
    "href": "api/FastEndpoints.IPostProcessorContext.html",
    "title": "Interface IPostProcessorContext | FastEndpoints",
    "keywords": "Interface IPostProcessorContext defines the basic interface for a post-processor context, containing essential properties to access request, response, and associated processing details. Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IPostProcessorContext Properties ExceptionDispatchInfo gets information about any exception that was thrown during processing. this will be null if no exception has occurred. Declaration ExceptionDispatchInfo? ExceptionDispatchInfo { get; } Property Value Type Description ExceptionDispatchInfo HasExceptionOccurred determines if an exception has occurred during processing. Declaration bool HasExceptionOccurred { get; } Property Value Type Description bool HasValidationFailures determines if any validation failures have occurred during processing. Declaration bool HasValidationFailures { get; } Property Value Type Description bool HttpContext gets the HttpContext associated with the current request and response. Declaration HttpContext HttpContext { get; } Property Value Type Description HttpContext Request gets the request object. Declaration object Request { get; } Property Value Type Description object Response gets the response object, which may be null if the response is not available. Declaration object? Response { get; } Property Value Type Description object ValidationFailures gets a read-only collection of FluentValidation.Results.ValidationFailure that occurred during processing. Declaration IReadOnlyCollection<ValidationFailure> ValidationFailures { get; } Property Value Type Description IReadOnlyCollection<ValidationFailure>"
  },
  "api/FastEndpoints.IPreProcessor-1.html": {
    "href": "api/FastEndpoints.IPreProcessor-1.html",
    "title": "Interface IPreProcessor<TRequest> | FastEndpoints",
    "keywords": "Interface IPreProcessor<TRequest> defines the generic interface for a pre-processor with specific types for the request, enabling type-safe pre-processing. Inherited Members IPreProcessor.PreProcessAsync(IPreProcessorContext, CancellationToken) Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IPreProcessor<in TRequest> : IPreProcessor Type Parameters Name Description TRequest the type of the request object, which must be non-nullable. Methods PreProcessAsync(IPreProcessorContext<TRequest>, CancellationToken) asynchronously performs pre-processing on the provided context with a specific request type. Declaration Task PreProcessAsync(IPreProcessorContext<in TRequest> context, CancellationToken ct) Parameters Type Name Description IPreProcessorContext<TRequest> context the pre-processor context containing the typed request, and other processing details. CancellationToken ct The CancellationToken to observe while waiting for the task to complete. Returns Type Description Task a Task that represents the asynchronous pre-process operation."
  },
  "api/FastEndpoints.IPreProcessor.html": {
    "href": "api/FastEndpoints.IPreProcessor.html",
    "title": "Interface IPreProcessor | FastEndpoints",
    "keywords": "Interface IPreProcessor defines the interface for a pre-processor that can perform asynchronous pre-processing tasks before a request has been handled. Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IPreProcessor Methods PreProcessAsync(IPreProcessorContext, CancellationToken) asynchronously performs pre-processing on the provided context. Declaration Task PreProcessAsync(IPreProcessorContext context, CancellationToken ct) Parameters Type Name Description IPreProcessorContext context the pre-processor context containing request, and other processing details. CancellationToken ct the CancellationToken to observe while waiting for the task to complete. Returns Type Description Task a Task that represents the asynchronous pre-process operation."
  },
  "api/FastEndpoints.IPreProcessorContext-1.html": {
    "href": "api/FastEndpoints.IPreProcessorContext-1.html",
    "title": "Interface IPreProcessorContext<TRequest> | FastEndpoints",
    "keywords": "Interface IPreProcessorContext<TRequest> defines the generic interface for a pre-processor context with a specific type for the request. Inherited Members IPreProcessorContext.HttpContext IPreProcessorContext.ValidationFailures IPreProcessorContext.HasValidationFailures Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IPreProcessorContext<out TRequest> : IPreProcessorContext Type Parameters Name Description TRequest The type of the request object, which must be non-nullable. Properties Request gets the request object of the generic type TRequest. This hides the non-generic version from IPreProcessorContext. Declaration TRequest Request { get; } Property Value Type Description TRequest"
  },
  "api/FastEndpoints.IPreProcessorContext.html": {
    "href": "api/FastEndpoints.IPreProcessorContext.html",
    "title": "Interface IPreProcessorContext | FastEndpoints",
    "keywords": "Interface IPreProcessorContext defines the basic interface for a pre-processor context, containing essential properties to access request, and associated processing details. Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IPreProcessorContext Properties HasValidationFailures determines if any validation failures have occurred during processing. Declaration bool HasValidationFailures { get; } Property Value Type Description bool HttpContext gets the HttpContext associated with the current request. Declaration HttpContext HttpContext { get; } Property Value Type Description HttpContext Request gets the request object. Declaration object Request { get; } Property Value Type Description object ValidationFailures gets a collection of FluentValidation.Results.ValidationFailure that occurred during processing. Declaration List<ValidationFailure> ValidationFailures { get; } Property Value Type Description List<ValidationFailure>"
  },
  "api/FastEndpoints.IRequestBinder-1.html": {
    "href": "api/FastEndpoints.IRequestBinder-1.html",
    "title": "Interface IRequestBinder<TRequest> | FastEndpoints",
    "keywords": "Interface IRequestBinder<TRequest> create custom request binders by implementing this interface. by registering a custom modelbinder for an endpoint will completely disable the built-in model binding and completely depend on your implementation of the custom binder to return a correctly populated request dto for the endpoint. Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IRequestBinder<TRequest> where TRequest : notnull Type Parameters Name Description TRequest the type of the request dto Methods BindAsync(BinderContext, CancellationToken) this method will be called by the library for binding the incoming request data and return a populated request dto object. access the incoming request data via the RequestBinderContext and populate a new request dto instance and return it from this method. Declaration ValueTask<TRequest> BindAsync(BinderContext ctx, CancellationToken ct) Parameters Type Name Description BinderContext ctx request binder context encapsulating the incoming http request context, a list of validation failures for the endpoint, and an optional json serializer context. CancellationToken ct cancellation token Returns Type Description ValueTask<TRequest>"
  },
  "api/FastEndpoints.IRequestMapper.html": {
    "href": "api/FastEndpoints.IRequestMapper.html",
    "title": "Interface IRequestMapper | FastEndpoints",
    "keywords": "Interface IRequestMapper marker interface for request only mappers Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IRequestMapper : IMapper"
  },
  "api/FastEndpoints.IResponseInterceptor.html": {
    "href": "api/FastEndpoints.IResponseInterceptor.html",
    "title": "Interface IResponseInterceptor | FastEndpoints",
    "keywords": "Interface IResponseInterceptor interface for defining a response interceptor to be executed before the main endpoint handler executes Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IResponseInterceptor Methods InterceptResponseAsync(object, int, HttpContext, IReadOnlyCollection<ValidationFailure>, CancellationToken) implement this method to intercept the http response with the use of SendInterceptedAsync() method. Declaration Task InterceptResponseAsync(object response, int statusCode, HttpContext ctx, IReadOnlyCollection<ValidationFailure> failures, CancellationToken ct) Parameters Type Name Description object response the response object int statusCode HttpContext ctx the http context of the current request IReadOnlyCollection<ValidationFailure> failures the collection of validation failures for the endpoint CancellationToken ct cancellation token Returns Type Description Task"
  },
  "api/FastEndpoints.IResponseMapper.html": {
    "href": "api/FastEndpoints.IResponseMapper.html",
    "title": "Interface IResponseMapper | FastEndpoints",
    "keywords": "Interface IResponseMapper marker interface for response only mappers Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IResponseMapper : IMapper"
  },
  "api/FastEndpoints.IServerStreamCommand-1.html": {
    "href": "api/FastEndpoints.IServerStreamCommand-1.html",
    "title": "Interface IServerStreamCommand<TResult> | FastEndpoints",
    "keywords": "Interface IServerStreamCommand<TResult> interface for a command that returns a stream of TResult Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Core.dll Syntax public interface IServerStreamCommand<out TResult> where TResult : class Type Parameters Name Description TResult the type of the result stream that will be returned from the handler of this command (i.e. IServerStreamCommandHandler<TCommand, TResult>)"
  },
  "api/FastEndpoints.IServerStreamCommandHandler-2.html": {
    "href": "api/FastEndpoints.IServerStreamCommandHandler-2.html",
    "title": "Interface IServerStreamCommandHandler<TCommand, TResult> | FastEndpoints",
    "keywords": "Interface IServerStreamCommandHandler<TCommand, TResult> interface to be implemented by a command handler for a given command type that returns TResult stream Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Core.dll Syntax public interface IServerStreamCommandHandler<in TCommand, TResult> where TCommand : class, IServerStreamCommand<TResult> where TResult : class Type Parameters Name Description TCommand the type of the input command TResult the type of the result stream returned Methods ExecuteAsync(TCommand, CancellationToken) receives a command and returns a stream of TResult. Declaration IAsyncEnumerable<TResult> ExecuteAsync(TCommand command, CancellationToken ct) Parameters Type Name Description TCommand command the input command object CancellationToken ct optional cancellation token Returns Type Description IAsyncEnumerable<TResult>"
  },
  "api/FastEndpoints.IServiceResolver.html": {
    "href": "api/FastEndpoints.IServiceResolver.html",
    "title": "Interface IServiceResolver | FastEndpoints",
    "keywords": "Interface IServiceResolver interface used by fastendpoints for resolving services from the DI container. implement this interface and register the implementation in MS DI for customizing service resolving. Inherited Members IServiceResolverBase.CreateScope() IServiceResolverBase.TryResolve<TService>() IServiceResolverBase.TryResolve(Type) IServiceResolverBase.Resolve<TService>() IServiceResolverBase.Resolve(Type) Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IServiceResolver : IServiceResolverBase Methods CreateInstance(Type, IServiceProvider?) create an instance of a given type (which may not be registered in the DI container). this method will be called repeatedly. so a cached delegate/compiled expression using something like CreateFactory(Type, Type[]) should be used for instance creation. Declaration object CreateInstance(Type type, IServiceProvider? serviceProvider = null) Parameters Type Name Description Type type the type to create an instance of IServiceProvider serviceProvider optional service provider Returns Type Description object CreateSingleton(Type) create an instance of a given type (which may not be registered in the DI container) which will be used as a singleton. a utility such as CreateInstance(IServiceProvider, Type, params object[]) may be used. repeated calls with the same input type should return the same singleton instance by utilizing an internal concurrent/thread-safe cache. Declaration object CreateSingleton(Type type) Parameters Type Name Description Type type the type to create an instance of Returns Type Description object"
  },
  "api/FastEndpoints.IServiceResolverBase.html": {
    "href": "api/FastEndpoints.IServiceResolverBase.html",
    "title": "Interface IServiceResolverBase | FastEndpoints",
    "keywords": "Interface IServiceResolverBase interface used by fastendpoints for resolving services from the DI container. implement this interface and register the implementation in MS DI for customizing service resolving. Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public interface IServiceResolverBase Methods CreateScope() if you'd like to resolve scoped or transient services from the MS DI container, obtain a service scope from this method and dispose the scope when the work is complete. using var scope = CreateScope(); var scopedService = scope.Resolve<MyService>(); Declaration IServiceScope CreateScope() Returns Type Description IServiceScope Resolve(Type) resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration object Resolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved Resolve<TService>() resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration TService Resolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved TryResolve(Type) try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration object? TryResolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object TryResolve<TService>() try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration TService? TryResolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve"
  },
  "api/FastEndpoints.InMemoryEventHubStorage.html": {
    "href": "api/FastEndpoints.InMemoryEventHubStorage.html",
    "title": "Class InMemoryEventHubStorage | FastEndpoints",
    "keywords": "Class InMemoryEventHubStorage Inheritance object InMemoryEventHubStorage Implements IEventHubStorageProvider<InMemoryEventStorageRecord> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public sealed class InMemoryEventHubStorage : IEventHubStorageProvider<InMemoryEventStorageRecord> Methods GetNextBatchAsync(PendingRecordSearchParams<InMemoryEventStorageRecord>) fetch the next batch of pending event storage records that need to be processed. Declaration public ValueTask<IEnumerable<InMemoryEventStorageRecord>> GetNextBatchAsync(PendingRecordSearchParams<InMemoryEventStorageRecord> p) Parameters Type Name Description PendingRecordSearchParams<InMemoryEventStorageRecord> p Returns Type Description ValueTask<IEnumerable<InMemoryEventStorageRecord>> MarkEventAsCompleteAsync(InMemoryEventStorageRecord, CancellationToken) mark the event storage record as complete by either replacing the entity on storage with the supplied instance or simply update the IsComplete field to true with a partial update operation. Declaration public ValueTask MarkEventAsCompleteAsync(InMemoryEventStorageRecord e, CancellationToken ct) Parameters Type Name Description InMemoryEventStorageRecord e CancellationToken ct cancellation token Returns Type Description ValueTask PurgeStaleRecordsAsync(StaleRecordSearchParams<InMemoryEventStorageRecord>) this method will be called hourly. implement this method to remove stale records (completed or expired) from storage. or instead of removing them, you can move them to some other location (dead-letter-queue maybe) or for inspection by a human. or if you'd like to retry expired events, update the ExpireOn field to a future date/time. NOTE: the default match criteria is: r => r.IsComplete || DateTime.UtcNow >= r.ExpireOn Declaration public ValueTask PurgeStaleRecordsAsync(StaleRecordSearchParams<InMemoryEventStorageRecord> p) Parameters Type Name Description StaleRecordSearchParams<InMemoryEventStorageRecord> p Returns Type Description ValueTask RestoreSubscriberIDsForEventTypeAsync(SubscriberIDRestorationParams<InMemoryEventStorageRecord>) this method will only be called once (for each event type) on app startup. if there are any pending records on storage from a previous app run, simply return a collection of unique subscriber IDs. Declaration public ValueTask<IEnumerable<string>> RestoreSubscriberIDsForEventTypeAsync(SubscriberIDRestorationParams<InMemoryEventStorageRecord> p) Parameters Type Name Description SubscriberIDRestorationParams<InMemoryEventStorageRecord> p Returns Type Description ValueTask<IEnumerable<string>> StoreEventAsync(InMemoryEventStorageRecord, CancellationToken) store the event storage record however you please. ideally on a nosql database. Declaration public ValueTask StoreEventAsync(InMemoryEventStorageRecord e, CancellationToken _) Parameters Type Name Description InMemoryEventStorageRecord e CancellationToken _ Returns Type Description ValueTask Implements IEventHubStorageProvider<TStorageRecord>"
  },
  "api/FastEndpoints.InMemoryEventQueue.html": {
    "href": "api/FastEndpoints.InMemoryEventQueue.html",
    "title": "Class InMemoryEventQueue | FastEndpoints",
    "keywords": "Class InMemoryEventQueue provides some global configuration options for the in-memory event queues Inheritance object InMemoryEventQueue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public static class InMemoryEventQueue Properties MaxLimit the maximum number of items the internal queues are allowed to hold. when the item count surpasses this limit, the queues will be in an overflow state preventing acceptance of new events. NOTE: this limit applies per event type. i.e. if there's 10 event types, the total events held in memory will be 10X of this value. Declaration public static int MaxLimit { get; set; } Property Value Type Description int"
  },
  "api/FastEndpoints.InMemoryEventStorageRecord.html": {
    "href": "api/FastEndpoints.InMemoryEventStorageRecord.html",
    "title": "Class InMemoryEventStorageRecord | FastEndpoints",
    "keywords": "Class InMemoryEventStorageRecord Inheritance object InMemoryEventStorageRecord Implements IEventStorageRecord Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public sealed class InMemoryEventStorageRecord : IEventStorageRecord Properties Event the actual event object that will be embedded in the storage record. if your database/orm (such as ef-core) doesn't support embedding objects, you can take the following steps: 1. add a [NotMapped] attribute to this property. 2. add a new property, either a string or array 3. implement both and to serialize/deserialize the event object back and forth and store it in the newly added property. you may use any serializer you please. recommendation is to use MessagePack. Declaration public object Event { get; set; } Property Value Type Description object EventType the full type name of the event Declaration public string EventType { get; set; } Property Value Type Description string ExpireOn the expiration date/time of the event. this is used to purge stale records. default value is 4 hours from time of creation. Declaration public DateTime ExpireOn { get; set; } Property Value Type Description DateTime IsComplete pending status of the event. will only return true if the event has been successfully processed and is ready to be discarded. Declaration public bool IsComplete { get; set; } Property Value Type Description bool SubscriberID a subscriber id is a unique identifier of an event stream subscriber on a remote node. it is a unique id per each event handler type (TEvent+TEventHandler combo). you don't have to worry about generating this as it will automatically be set by the library. Declaration public string SubscriberID { get; set; } Property Value Type Description string Implements IEventStorageRecord"
  },
  "api/FastEndpoints.InternalErrorResponse.html": {
    "href": "api/FastEndpoints.InternalErrorResponse.html",
    "title": "Class InternalErrorResponse | FastEndpoints",
    "keywords": "Class InternalErrorResponse the dto used to send an error response to the client when an unhandled exception occurs on the server Inheritance object InternalErrorResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class InternalErrorResponse Properties Code http status code of the error response Declaration public int Code { get; set; } Property Value Type Description int Note additional information or instructions Declaration public string Note { get; set; } Property Value Type Description string Reason the reason for the error Declaration public string Reason { get; set; } Property Value Type Description string Status error status Declaration public string Status { get; set; } Property Value Type Description string"
  },
  "api/FastEndpoints.JobQueueExtensions.html": {
    "href": "api/FastEndpoints.JobQueueExtensions.html",
    "title": "Class JobQueueExtensions | FastEndpoints",
    "keywords": "Class JobQueueExtensions extension methods for job queues Inheritance object JobQueueExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public static class JobQueueExtensions Methods AddJobQueues<TStorageRecord, TStorageProvider>(IServiceCollection) add job queue functionality Declaration public static IServiceCollection AddJobQueues<TStorageRecord, TStorageProvider>(this IServiceCollection svc) where TStorageRecord : IJobStorageRecord, new() where TStorageProvider : class, IJobStorageProvider<TStorageRecord> Parameters Type Name Description IServiceCollection svc Returns Type Description IServiceCollection Type Parameters Name Description TStorageRecord the implementation type of the job storage record TStorageProvider the implementation type of the job storage provider QueueJobAsync(ICommand, DateTime?, DateTime?, CancellationToken) queues up a given command in the respective job queue for that command type. Declaration public static Task QueueJobAsync(this ICommand cmd, DateTime? executeAfter = null, DateTime? expireOn = null, CancellationToken ct = default) Parameters Type Name Description ICommand cmd the command to be queued DateTime? executeAfter if set, the job won't be executed before this date/time. if unspecified, execution is attempted as soon as possible. DateTime? expireOn if set, job will be considered stale/expired after this date/time. if unspecified, jobs expire after 4 hours of creation. CancellationToken ct cancellation token Returns Type Description Task UseJobQueues(IApplicationBuilder, Action<JobQueueOptions>?) enable job queue functionality with given settings Declaration public static IApplicationBuilder UseJobQueues(this IApplicationBuilder app, Action<JobQueueOptions>? options = null) Parameters Type Name Description IApplicationBuilder app Action<JobQueueOptions> options specify settings/execution limits for each job queue type Returns Type Description IApplicationBuilder Exceptions Type Condition InvalidOperationException thrown when no commands/handlers have been detected"
  },
  "api/FastEndpoints.JobQueueOptions.html": {
    "href": "api/FastEndpoints.JobQueueOptions.html",
    "title": "Class JobQueueOptions | FastEndpoints",
    "keywords": "Class JobQueueOptions options for job queues Inheritance object JobQueueOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public class JobQueueOptions Properties ExecutionTimeLimit the per job type max execution time limit for handler executions unless otherwise overridden using LimitsFor<TCommand>(int, TimeSpan) defaults to Infinite. Declaration public TimeSpan ExecutionTimeLimit { get; set; } Property Value Type Description TimeSpan MaxConcurrency the default max concurrency per job type. default value is the number of logical processors of the computer. you can specify per queue type overrides using LimitsFor<TCommand>(int, TimeSpan) Declaration public int MaxConcurrency { get; set; } Property Value Type Description int Methods LimitsFor<TCommand>(int, TimeSpan) specify execution limits such a max concurrency and execution time limit for a given command type. Declaration public void LimitsFor<TCommand>(int maxConcurrency, TimeSpan timeLimit) where TCommand : ICommand Parameters Type Name Description int maxConcurrency the maximum number of command executions of the same command type that's allowed to execute at the same time TimeSpan timeLimit the maximum amount of time each command is allowed to execute for. when execution time exceeds this value, a OperationCanceledException will be thrown. when that happens you can handle it in the OnHandlerExecutionFailureAsync(TStorageRecord, Exception, CancellationToken) method. Type Parameters Name Description TCommand the type of the command the limits apply to"
  },
  "api/FastEndpoints.LifeTime.html": {
    "href": "api/FastEndpoints.LifeTime.html",
    "title": "Enum LifeTime | FastEndpoints",
    "keywords": "Enum LifeTime enum for selecting the DI service lifetime Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax public enum LifeTime Fields Name Description Scoped scoped service lifetime Singleton singleton service lifetime Transient transient service lifetime"
  },
  "api/FastEndpoints.MainExtensions.html": {
    "href": "api/FastEndpoints.MainExtensions.html",
    "title": "Class MainExtensions | FastEndpoints",
    "keywords": "Class MainExtensions provides extensions to easily bootstrap fastendpoints in the asp.net middleware pipeline Inheritance object MainExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public static class MainExtensions Methods AddFastEndpoints(IServiceCollection, Action<EndpointDiscoveryOptions>?) adds the FastEndpoints services to the ASP.Net middleware pipeline Declaration public static IServiceCollection AddFastEndpoints(this IServiceCollection services, Action<EndpointDiscoveryOptions>? options = null) Parameters Type Name Description IServiceCollection services Action<EndpointDiscoveryOptions> options optionally specify the endpoint discovery options Returns Type Description IServiceCollection MapFastEndpoints(IEndpointRouteBuilder, Action<Config>?) Declaration public static IEndpointRouteBuilder MapFastEndpoints(this IEndpointRouteBuilder app, Action<Config>? configAction = null) Parameters Type Name Description IEndpointRouteBuilder app Action<Config> configAction Returns Type Description IEndpointRouteBuilder UseFastEndpoints(IApplicationBuilder, Action<Config>?) finalizes auto discovery of endpoints and prepares FastEndpoints to start processing requests HINT: you can use MapFastEndpoints(IEndpointRouteBuilder, Action<Config>?) instead of this method if you have some special requirement such as using \"Startup.cs\", etc. Declaration public static IApplicationBuilder UseFastEndpoints(this IApplicationBuilder app, Action<Config>? configAction = null) Parameters Type Name Description IApplicationBuilder app Action<Config> configAction an optional action to configure FastEndpoints Returns Type Description IApplicationBuilder Exceptions Type Condition InvalidCastException thrown when the app cannot be cast to IEndpointRouteBuilder"
  },
  "api/FastEndpoints.Mapper-3.html": {
    "href": "api/FastEndpoints.Mapper-3.html",
    "title": "Class Mapper<TRequest, TResponse, TEntity> | FastEndpoints",
    "keywords": "Class Mapper<TRequest, TResponse, TEntity> use this base class to define domain entity mappers for your endpoints. HINT: entity mappers are used as singletons for performance reasons. do not maintain state in the mappers. Inheritance object Mapper<TRequest, TResponse, TEntity> Implements IMapper IServiceResolverBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class Mapper<TRequest, TResponse, TEntity> : IMapper, IServiceResolverBase where TRequest : notnull where TResponse : notnull Type Parameters Name Description TRequest the type of request dto TResponse the type of response dto TEntity the type of domain entity to map to/from Methods CreateScope() if you'd like to resolve scoped or transient services from the MS DI container, obtain a service scope from this method and dispose the scope when the work is complete. using var scope = CreateScope(); var scopedService = scope.Resolve<MyService>(); Declaration public IServiceScope CreateScope() Returns Type Description IServiceScope FromEntity(TEntity) override this method and place the logic for mapping a domain entity to a response dto Declaration public virtual TResponse FromEntity(TEntity e) Parameters Type Name Description TEntity e the domain entity to map from Returns Type Description TResponse FromEntityAsync(TEntity, CancellationToken) override this method and place the logic for mapping a domain entity to a response dto Declaration public virtual Task<TResponse> FromEntityAsync(TEntity e, CancellationToken ct = default) Parameters Type Name Description TEntity e the domain entity to map from CancellationToken ct a cancellation token Returns Type Description Task<TResponse> Resolve(Type) resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public object Resolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved Resolve<TService>() resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public TService Resolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved ToEntity(TRequest) override this method and place the logic for mapping the request dto to the desired domain entity Declaration public virtual TEntity ToEntity(TRequest r) Parameters Type Name Description TRequest r the request dto Returns Type Description TEntity ToEntityAsync(TRequest, CancellationToken) override this method and place the logic for mapping the request dto to the desired domain entity Declaration public virtual Task<TEntity> ToEntityAsync(TRequest r, CancellationToken ct = default) Parameters Type Name Description TRequest r the request dto to map from CancellationToken ct a cancellation token Returns Type Description Task<TEntity> TryResolve(Type) try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public object? TryResolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object TryResolve<TService>() try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public TService? TryResolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve UpdateEntity(TRequest, TEntity) override this method and place the logic for mapping the updated request dto to the desired domain entity Declaration public virtual TEntity UpdateEntity(TRequest r, TEntity e) Parameters Type Name Description TRequest r the request dto to update from TEntity e the domain entity to update Returns Type Description TEntity Implements IMapper IServiceResolverBase"
  },
  "api/FastEndpoints.Messaging.Remote.Testing.Extensions.html": {
    "href": "api/FastEndpoints.Messaging.Remote.Testing.Extensions.html",
    "title": "Class Extensions | FastEndpoints",
    "keywords": "Class Extensions WAF extension methods of integration testing gRPC event/command queues Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Messaging.Remote.Testing Assembly: FastEndpoints.Messaging.Remote.Testing.dll Syntax public static class Extensions Methods RegisterTestCommandHandler<TCommand, THandler>(IServiceCollection) register test/fake/mock command handlers for integration testing gRPC commands Declaration public static void RegisterTestCommandHandler<TCommand, THandler>(this IServiceCollection s) where TCommand : ICommand where THandler : class, ICommandHandler<TCommand> Parameters Type Name Description IServiceCollection s Type Parameters Name Description TCommand the type of the command model to register a test handler for THandler the type of the test command handler RegisterTestEventHandler<TEvent, THandler>(IServiceCollection) register test/fake/mock event handlers for integration testing gRPC event queues Declaration public static void RegisterTestEventHandler<TEvent, THandler>(this IServiceCollection s) where TEvent : IEvent where THandler : class, IEventHandler<TEvent> Parameters Type Name Description IServiceCollection s Type Parameters Name Description TEvent the type of the event model to register a test handler for THandler the type of the test event handler RegisterTestRemote(IServiceCollection, TestServer) enables communicating with a remote gRPC server in the WAF testing environment Declaration public static void RegisterTestRemote(this IServiceCollection s, TestServer remote) Parameters Type Name Description IServiceCollection s TestServer remote the TestServer of the target WAF"
  },
  "api/FastEndpoints.Messaging.Remote.Testing.html": {
    "href": "api/FastEndpoints.Messaging.Remote.Testing.html",
    "title": "Namespace FastEndpoints.Messaging.Remote.Testing | FastEndpoints",
    "keywords": "Namespace FastEndpoints.Messaging.Remote.Testing Classes Extensions WAF extension methods of integration testing gRPC event/command queues"
  },
  "api/FastEndpoints.MiddlewareExtensions.html": {
    "href": "api/FastEndpoints.MiddlewareExtensions.html",
    "title": "Class MiddlewareExtensions | FastEndpoints",
    "keywords": "Class MiddlewareExtensions Inheritance object MiddlewareExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public static class MiddlewareExtensions Methods UseAntiForgery(IApplicationBuilder) enable anti-forgery token verification middleware. make sure to also add the anti-forgery services with builder.Services.AddAntiForgery() Declaration public static IApplicationBuilder UseAntiForgery(this IApplicationBuilder app) Parameters Type Name Description IApplicationBuilder app Returns Type Description IApplicationBuilder"
  },
  "api/FastEndpoints.Mode.html": {
    "href": "api/FastEndpoints.Mode.html",
    "title": "Enum Mode | FastEndpoints",
    "keywords": "Enum Mode enum for specifying the waiting mode for event notifications Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public enum Mode Fields Name Description WaitForAll return a Task that will complete only when all of the subscribers complete their work. HINT: exceptions can be captured by caller WaitForAny returns a Task that will complete when any of the subscribers complete their work WARNING: exceptions cannot be captured by caller WaitForNone returns an already completed Task (fire and forget) WARNING: exceptions cannot be captured by caller"
  },
  "api/FastEndpoints.Order.html": {
    "href": "api/FastEndpoints.Order.html",
    "title": "Enum Order | FastEndpoints",
    "keywords": "Enum Order enum used to specify whether to execute global pre/post processors before endpoint level processors Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public enum Order Fields Name Description After execute global processors after the endpoint level processors Before execute global processors before the endpoint level processors"
  },
  "api/FastEndpoints.ParseResult.html": {
    "href": "api/FastEndpoints.ParseResult.html",
    "title": "Struct ParseResult | FastEndpoints",
    "keywords": "Struct ParseResult dto used to hold the result of a value parsing operation Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public struct ParseResult Constructors ParseResult(bool, object?) constructor for initializing a ParseResult instance Declaration public ParseResult(bool isSuccess, object? value) Parameters Type Name Description bool isSuccess set to true of parsing was successful object value set the value that was obtained from the parsing operation Properties IsSuccess will be true if the parsing operation was a success Declaration public bool IsSuccess { readonly get; set; } Property Value Type Description bool Value will hold the parsed value if the parsing was successful Declaration public object? Value { readonly get; set; } Property Value Type Description object"
  },
  "api/FastEndpoints.PendingJobSearchParams-1.html": {
    "href": "api/FastEndpoints.PendingJobSearchParams-1.html",
    "title": "Struct PendingJobSearchParams<TStorageRecord> | FastEndpoints",
    "keywords": "Struct PendingJobSearchParams<TStorageRecord> a dto representing search parameters for pending job storage record retrieval Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public struct PendingJobSearchParams<TStorageRecord> where TStorageRecord : IJobStorageRecord Type Parameters Name Description TStorageRecord the type of storage record Properties CancellationToken cancellation token Declaration public readonly CancellationToken CancellationToken { get; } Property Value Type Description CancellationToken Limit the number of pending records to fetch Declaration public readonly int Limit { get; } Property Value Type Description int Match a boolean lambda expression to match the next batch of records r => r.QueueID == \"xxx\" && !r.IsComplete && DateTime.UtcNow >= r.ExecuteAfter && DateTime.UtcNow <= r.ExpireOn Declaration public readonly Expression<Func<TStorageRecord, bool>> Match { get; } Property Value Type Description Expression<Func<TStorageRecord, bool>> QueueID the ID of the job queue for fetching the next batch of records for. Declaration public readonly string QueueID { get; } Property Value Type Description string"
  },
  "api/FastEndpoints.PendingRecordSearchParams-1.html": {
    "href": "api/FastEndpoints.PendingRecordSearchParams-1.html",
    "title": "Struct PendingRecordSearchParams<TStorageRecord> | FastEndpoints",
    "keywords": "Struct PendingRecordSearchParams<TStorageRecord> a dto representing search parameters for pending event storage record retrieval Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public struct PendingRecordSearchParams<TStorageRecord> where TStorageRecord : IEventStorageRecord Type Parameters Name Description TStorageRecord the type of storage record Properties CancellationToken cancellation token Declaration public readonly CancellationToken CancellationToken { get; } Property Value Type Description CancellationToken Limit the number of pending records to fetch Declaration public readonly int Limit { get; } Property Value Type Description int Match a boolean lambda expression to match the next batch of records r => r.SubscriberID == \"xxx\" && !r.IsComplete && DateTime.UtcNow <= r.ExpireOn Declaration public readonly Expression<Func<TStorageRecord, bool>> Match { get; } Property Value Type Description Expression<Func<TStorageRecord, bool>> SubscriberID the subscriber ID for fetching the next batch of records Declaration public readonly string SubscriberID { get; } Property Value Type Description string"
  },
  "api/FastEndpoints.PlainTextRequest.html": {
    "href": "api/FastEndpoints.PlainTextRequest.html",
    "title": "Class PlainTextRequest | FastEndpoints",
    "keywords": "Class PlainTextRequest use this dto if you need to model bind the raw content body of an incoming http request or you may implement the IPlainTextRequest interface on your own request dto. Inheritance object PlainTextRequest Implements IPlainTextRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public class PlainTextRequest : IPlainTextRequest Properties Content the body content of the incoming request Declaration public string Content { get; set; } Property Value Type Description string Implements IPlainTextRequest"
  },
  "api/FastEndpoints.PostProcessor-3.html": {
    "href": "api/FastEndpoints.PostProcessor-3.html",
    "title": "Class PostProcessor<TRequest, TState, TResponse> | FastEndpoints",
    "keywords": "Class PostProcessor<TRequest, TState, TResponse> inherit this class to create a post-processor with access to the common processor state of the endpoint. Inheritance object PostProcessor<TRequest, TState, TResponse> Implements IPostProcessor<TRequest, TResponse> IPostProcessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class PostProcessor<TRequest, TState, TResponse> : IPostProcessor<TRequest, TResponse>, IPostProcessor where TState : class, new() Type Parameters Name Description TRequest type of the request DTO. TState type of the common processor state. TResponse type of the response. Methods PostProcessAsync(IPostProcessorContext<TRequest, TResponse>, TState, CancellationToken) implement this method to define the post-processing logic using the provided context and state. Declaration public abstract Task PostProcessAsync(IPostProcessorContext<TRequest, TResponse> context, TState state, CancellationToken ct) Parameters Type Name Description IPostProcessorContext<TRequest, TResponse> context the context object encapsulating all necessary information for post-processing. TState state the common processor state object, derived from the HttpContext or newly instantiated. CancellationToken ct cancellation token. Returns Type Description Task a Task representing the asynchronous operation. Implements IPostProcessor<TRequest, TResponse> IPostProcessor"
  },
  "api/FastEndpoints.PostProcessorContext-2.html": {
    "href": "api/FastEndpoints.PostProcessorContext-2.html",
    "title": "Class PostProcessorContext<TRequest, TResponse> | FastEndpoints",
    "keywords": "Class PostProcessorContext<TRequest, TResponse> represents the context for a post-processing operation with a request and response pair. Inheritance object PostProcessorContext<TRequest, TResponse> Implements IPostProcessorContext<TRequest, TResponse> IPostProcessorContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class PostProcessorContext<TRequest, TResponse> : IPostProcessorContext<TRequest, TResponse>, IPostProcessorContext Type Parameters Name Description TRequest the type of the request object, which must be non-nullable. TResponse the type of the response object. Properties ExceptionDispatchInfo gets the ExceptionDispatchInfo if an exception was captured during the processing. may be null if no exception was captured. Declaration public ExceptionDispatchInfo? ExceptionDispatchInfo { get; init; } Property Value Type Description ExceptionDispatchInfo HttpContext gets the HttpContext associated with the current request and response. Declaration public HttpContext HttpContext { get; init; } Property Value Type Description HttpContext Request gets the request associated with the post-processing context. Declaration public TRequest Request { get; init; } Property Value Type Description TRequest Response gets the response associated with the post-processing context. may be null if the response is not available or not yet created. Declaration public TResponse? Response { get; init; } Property Value Type Description TResponse ValidationFailures gets a collection of FluentValidation.Results.ValidationFailure instances that describe any validation failures. Declaration public IReadOnlyCollection<ValidationFailure> ValidationFailures { get; init; } Property Value Type Description IReadOnlyCollection<ValidationFailure> Implements IPostProcessorContext<TRequest, TResponse> IPostProcessorContext"
  },
  "api/FastEndpoints.PreProcessor-2.html": {
    "href": "api/FastEndpoints.PreProcessor-2.html",
    "title": "Class PreProcessor<TRequest, TState> | FastEndpoints",
    "keywords": "Class PreProcessor<TRequest, TState> inherit this class to create a pre-processor with access to the common processor state of the endpoint Inheritance object PreProcessor<TRequest, TState> Implements IPreProcessor<TRequest> IPreProcessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class PreProcessor<TRequest, TState> : IPreProcessor<TRequest>, IPreProcessor where TState : class, new() Type Parameters Name Description TRequest type of the request dto TState type of the common processor state Methods PreProcessAsync(IPreProcessorContext<TRequest>, TState, CancellationToken) this method is called with the given arguments when the pre-processor executes. Declaration public abstract Task PreProcessAsync(IPreProcessorContext<TRequest> context, TState state, CancellationToken ct) Parameters Type Name Description IPreProcessorContext<TRequest> context the context object encapsulating all necessary information for pre-processing. TState state the common processor state object CancellationToken ct cancellation token Returns Type Description Task Implements IPreProcessor<TRequest> IPreProcessor"
  },
  "api/FastEndpoints.PreProcessorContext-1.html": {
    "href": "api/FastEndpoints.PreProcessorContext-1.html",
    "title": "Class PreProcessorContext<TRequest> | FastEndpoints",
    "keywords": "Class PreProcessorContext<TRequest> represents the context for a pre-processing operation with a request. Inheritance object PreProcessorContext<TRequest> Implements IPreProcessorContext<TRequest> IPreProcessorContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class PreProcessorContext<TRequest> : IPreProcessorContext<TRequest>, IPreProcessorContext Type Parameters Name Description TRequest the type of the request object, which must be non-nullable. Properties HttpContext gets the HttpContext associated with the current request. Declaration public HttpContext HttpContext { get; init; } Property Value Type Description HttpContext Request gets the request associated with the pre-processing context. Declaration public TRequest Request { get; init; } Property Value Type Description TRequest ValidationFailures gets a collection of FluentValidation.Results.ValidationFailure instances that describe any validation failures. Declaration public List<ValidationFailure> ValidationFailures { get; init; } Property Value Type Description List<ValidationFailure> Implements IPreProcessorContext<TRequest> IPreProcessorContext"
  },
  "api/FastEndpoints.ProblemDetails.Error.html": {
    "href": "api/FastEndpoints.ProblemDetails.Error.html",
    "title": "Class ProblemDetails.Error | FastEndpoints",
    "keywords": "Class ProblemDetails.Error the error details object Inheritance object ProblemDetails.Error Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class ProblemDetails.Error Constructors Error() Declaration public Error() Error(ValidationFailure) Declaration public Error(ValidationFailure failure) Parameters Type Name Description ValidationFailure failure Properties Code the code of the error Declaration [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string? Code { get; set; } Property Value Type Description string IndicateSeverity if set to true, the FluentValidation.Severity value of the failure will be serialized to the response. Declaration public static bool IndicateSeverity { get; set; } Property Value Type Description bool Name the name of the error or property of the dto that caused the error Declaration public string Name { get; set; } Property Value Type Description string Reason the reason for the error Declaration public string Reason { get; set; } Property Value Type Description string Severity the severity of the error Declaration [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string? Severity { get; set; } Property Value Type Description string"
  },
  "api/FastEndpoints.ProblemDetails.html": {
    "href": "api/FastEndpoints.ProblemDetails.html",
    "title": "Class ProblemDetails | FastEndpoints",
    "keywords": "Class ProblemDetails RFC7807 compatible problem details/ error response class. this can be used by configuring startup like so: app.UseFastEndpoints(x => x.Errors.ResponseBuilder = ProblemDetails.ResponseBuilder); Inheritance object ProblemDetails Implements IResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class ProblemDetails : IResult Constructors ProblemDetails() Declaration public ProblemDetails() ProblemDetails(IReadOnlyList<ValidationFailure>, int?) Declaration public ProblemDetails(IReadOnlyList<ValidationFailure> failures, int? statusCode = null) Parameters Type Name Description IReadOnlyList<ValidationFailure> failures int? statusCode ProblemDetails(IReadOnlyList<ValidationFailure>, string, string, int) Declaration public ProblemDetails(IReadOnlyList<ValidationFailure> failures, string instance, string traceId, int statusCode) Parameters Type Name Description IReadOnlyList<ValidationFailure> failures string instance string traceId int statusCode Properties AllowDuplicates controls whether duplicate errors with the same name should be allowed. Declaration public static bool AllowDuplicates { set; } Property Value Type Description bool Errors Declaration public IEnumerable<ProblemDetails.Error> Errors { get; set; } Property Value Type Description IEnumerable<ProblemDetails.Error> Instance Declaration public string Instance { get; set; } Property Value Type Description string ResponseBuilder the built-in function for transforming validation errors to a RFC7807 compatible problem details error response dto. Declaration public static Func<List<ValidationFailure>, HttpContext, int, object> ResponseBuilder { get; } Property Value Type Description Func<List<ValidationFailure>, HttpContext, int, object> Status Declaration public int Status { get; set; } Property Value Type Description int Title Declaration public string Title { get; } Property Value Type Description string TitleValue globally sets the 'Title' value of the problem details dto. Declaration public static string TitleValue { set; } Property Value Type Description string TraceId Declaration public string TraceId { get; set; } Property Value Type Description string Type Declaration public string Type { get; } Property Value Type Description string TypeValue globally sets the 'Type' value of the problem details dto. Declaration public static string TypeValue { set; } Property Value Type Description string Methods ExecuteAsync(HttpContext) Write an HTTP response reflecting the result. Declaration public Task ExecuteAsync(HttpContext httpContext) Parameters Type Name Description HttpContext httpContext The HttpContext for the current request. Returns Type Description Task A task that represents the asynchronous execute operation. Implements IResult"
  },
  "api/FastEndpoints.QueryParamAttribute.html": {
    "href": "api/FastEndpoints.QueryParamAttribute.html",
    "title": "Class QueryParamAttribute | FastEndpoints",
    "keywords": "Class QueryParamAttribute properties decorated with this attribute will have a corresponding request parameter added to the swagger schema Inheritance object Attribute QueryParamAttribute FromQueryParamsAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)] public class QueryParamAttribute : Attribute"
  },
  "api/FastEndpoints.RegisterServiceAttribute-1.html": {
    "href": "api/FastEndpoints.RegisterServiceAttribute-1.html",
    "title": "Class RegisterServiceAttribute<TService> | FastEndpoints",
    "keywords": "Class RegisterServiceAttribute<TService> When using the 'FastEndpoints.Generator' package, any concrete class can be decorated with this attribute to source generate extension methods in the form of .RegisterServicesFrom{assembly-name}() which can be used to automatically register services with a single call per assembly. instead of multiple calls per each service you need registered in DI. specify the service type with the TService generic attribute argument. the service type would typically be an interface type. Inheritance object Attribute RegisterServiceAttribute<TService> Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)] public sealed class RegisterServiceAttribute<TService> : Attribute where TService : class Type Parameters Name Description TService the type of the service you are registering. typically an interface type. Constructors RegisterServiceAttribute(LifeTime) mark a class for registration in DI using the 'FastEndpoints.Generator' package by specifying the service lifetime. Declaration public RegisterServiceAttribute(LifeTime serviceLifetime) Parameters Type Name Description LifeTime serviceLifetime the service lifetime to use when registering in DI"
  },
  "api/FastEndpoints.RemoteConnection.html": {
    "href": "api/FastEndpoints.RemoteConnection.html",
    "title": "Class RemoteConnection | FastEndpoints",
    "keywords": "Class RemoteConnection represents a connection to a remote server that hosts command and event handlers Inheritance object RemoteConnection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public sealed class RemoteConnection Properties ChannelOptions grpc channel settings Declaration public GrpcChannelOptions ChannelOptions { get; set; } Property Value Type Description GrpcChannelOptions RemoteAddress the address of the remote server Declaration public string RemoteAddress { get; init; } Property Value Type Description string Methods RegisterClientStream<T, TResult>() register a remote handler for a \"client stream\" (IAsyncEnumerable<T>) for this remote connection. Declaration public void RegisterClientStream<T, TResult>() where T : class where TResult : class Type Parameters Name Description T the type of the items in the stream TResult the type of the result that will be received when the stream ends RegisterEvent<TEvent>() register an \"event\" that the remote server will be accepting (in EventBroker) for distribution to subscribers. Declaration public void RegisterEvent<TEvent>() where TEvent : class, IEvent Type Parameters Name Description TEvent the type of the event RegisterServerStream<TCommand, TResult>() register a \"server stream\" command (IServerStreamCommand<TResult>) for this remote connection where the handler for it is hosted/located. Declaration public void RegisterServerStream<TCommand, TResult>() where TCommand : class, IServerStreamCommand<TResult> where TResult : class Type Parameters Name Description TCommand the type of the command TResult the type of the result stream Register<TCommand>() register a \"void\" command (ICommand) for this remote connection where the handler for it is hosted/located. Declaration public void Register<TCommand>() where TCommand : class, ICommand Type Parameters Name Description TCommand the type of the command Register<TCommand, TResult>() register a \"unary\" command (ICommand<TResult>) for this remote connection where the handler for it is hosted/located. Declaration public void Register<TCommand, TResult>() where TCommand : class, ICommand<TResult> where TResult : class Type Parameters Name Description TCommand the type of the command TResult the type of the result Subscribe<TEvent, TEventHandler>(CallOptions) subscribe to a broadcast channel for a given event type (TEvent) on the remote host. the received events will be handled by the specified handler (TEventHandler) on this machine. Declaration public void Subscribe<TEvent, TEventHandler>(CallOptions callOptions = default) where TEvent : class, IEvent where TEventHandler : IEventHandler<TEvent> Parameters Type Name Description CallOptions callOptions the call options Type Parameters Name Description TEvent the type of the events that will be received TEventHandler the handler that will be handling the received events"
  },
  "api/FastEndpoints.RemoteConnectionExtensions.html": {
    "href": "api/FastEndpoints.RemoteConnectionExtensions.html",
    "title": "Class RemoteConnectionExtensions | FastEndpoints",
    "keywords": "Class RemoteConnectionExtensions client extension methods Inheritance object RemoteConnectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public static class RemoteConnectionExtensions Methods AddEventSubscriberStorageProvider<TStorageRecord, TStorageProvider>(IServiceCollection) register a custom event subscriber storage provider Declaration public static void AddEventSubscriberStorageProvider<TStorageRecord, TStorageProvider>(this IServiceCollection services) where TStorageRecord : IEventStorageRecord, new() where TStorageProvider : class, IEventSubscriberStorageProvider<TStorageRecord> Parameters Type Name Description IServiceCollection services Type Parameters Name Description TStorageRecord the type of the storage record TStorageProvider MapRemote(IHost, string, Action<RemoteConnection>) creates a grpc channel/connection to a remote server that hosts a known collection of command handlers and event hubs. IMPORTANT: call the Register<TCommand, TResult>() method (using action r) to specify which commands are handled by this remote server. event subscriptions can be specified using Subscribe<TEvent, TEventHandler>(CallOptions) method. Declaration public static IHost MapRemote(this IHost host, string remoteAddress, Action<RemoteConnection> r) Parameters Type Name Description IHost host string remoteAddress the address of the remote server Action<RemoteConnection> r a configuration action for the connection Returns Type Description IHost RemoteExecuteAsync(ICommand, CallOptions) execute the command on the relevant remote server Declaration public static Task RemoteExecuteAsync(this ICommand command, CallOptions options = default) Parameters Type Name Description ICommand command CallOptions options call options Returns Type Description Task Exceptions Type Condition InvalidOperationException thrown if the relevant remote handler has not been registered RemoteExecuteAsync<TResult>(ICommand<TResult>, CallOptions) execute the command on the relevant remote server and get back a result Declaration public static Task<TResult> RemoteExecuteAsync<TResult>(this ICommand<TResult> command, CallOptions options = default) where TResult : class Parameters Type Name Description ICommand<TResult> command CallOptions options call options Returns Type Description Task<TResult> Type Parameters Name Description TResult the type of the result Exceptions Type Condition InvalidOperationException thrown if the relevant remote handler has not been registered RemoteExecuteAsync<TResult>(IServerStreamCommand<TResult>, CallOptions) execute the command on the relevant remote server and get back a stream of TResult Declaration public static IAsyncEnumerable<TResult> RemoteExecuteAsync<TResult>(this IServerStreamCommand<TResult> command, CallOptions options = default) where TResult : class Parameters Type Name Description IServerStreamCommand<TResult> command CallOptions options call options Returns Type Description IAsyncEnumerable<TResult> Type Parameters Name Description TResult the type of the result stream Exceptions Type Condition InvalidOperationException thrown if the relevant remote handler has not been registered RemoteExecuteAsync<T, TResult>(IAsyncEnumerable<T>, CallOptions) send the stream of T to the relevant remote server and get back a result of TResult Declaration public static Task<TResult> RemoteExecuteAsync<T, TResult>(this IAsyncEnumerable<T> commands, CallOptions options = default) where T : class where TResult : class Parameters Type Name Description IAsyncEnumerable<T> commands the stream to send CallOptions options call options Returns Type Description Task<TResult> Type Parameters Name Description T the type of item in the stream TResult the type of the result that will be returned when the stream ends Exceptions Type Condition InvalidOperationException thrown if the relevant remote handler has not been registered RemotePublishAsync(IEvent, CallOptions) publish the event to the relevant remote server that's running in EventBroker Declaration public static Task RemotePublishAsync(this IEvent @event, CallOptions options = default) Parameters Type Name Description IEvent event CallOptions options call options Returns Type Description Task Exceptions Type Condition InvalidOperationException thrown if the relevant remote handler has not been registered"
  },
  "api/FastEndpoints.RequestBinder-1.html": {
    "href": "api/FastEndpoints.RequestBinder-1.html",
    "title": "Class RequestBinder<TRequest> | FastEndpoints",
    "keywords": "Class RequestBinder<TRequest> the default request binder for a given request dto type Inheritance object RequestBinder<TRequest> Implements IRequestBinder<TRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public class RequestBinder<TRequest> : IRequestBinder<TRequest> where TRequest : notnull Type Parameters Name Description TRequest the type of the request dto this binder will be dealing with Constructors RequestBinder() default constructor which enables all binding sources Declaration public RequestBinder() RequestBinder(BindingSource) constructor accepting a bitwise combination of enums which enables only the specified binding sources Declaration public RequestBinder(BindingSource enabledSources) Parameters Type Name Description BindingSource enabledSources a bitwise combination of enum values Methods BindAsync(BinderContext, CancellationToken) override this method to customize the request binding logic Declaration public virtual ValueTask<TRequest> BindAsync(BinderContext ctx, CancellationToken cancellation) Parameters Type Name Description BinderContext ctx the request binder context which holds all the data required for binding the incoming request CancellationToken cancellation cancellation token Returns Type Description ValueTask<TRequest> Exceptions Type Condition ValidationFailureException thrown if any failures occur during the binding process Implements IRequestBinder<TRequest>"
  },
  "api/FastEndpoints.RequestMapper-2.html": {
    "href": "api/FastEndpoints.RequestMapper-2.html",
    "title": "Class RequestMapper<TRequest, TEntity> | FastEndpoints",
    "keywords": "Class RequestMapper<TRequest, TEntity> use this base class to define a domain entity mapper for your endpoints that only has a request dto and no response dto. HINT: entity mappers are used as singletons for performance reasons. do not maintain state in the mappers. Inheritance object RequestMapper<TRequest, TEntity> Implements IRequestMapper IMapper IServiceResolverBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class RequestMapper<TRequest, TEntity> : IRequestMapper, IMapper, IServiceResolverBase where TRequest : notnull Type Parameters Name Description TRequest the type of request dto TEntity the type of domain entity to map to/from Methods CreateScope() if you'd like to resolve scoped or transient services from the MS DI container, obtain a service scope from this method and dispose the scope when the work is complete. using var scope = CreateScope(); var scopedService = scope.Resolve<MyService>(); Declaration public IServiceScope CreateScope() Returns Type Description IServiceScope Resolve(Type) resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public object Resolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved Resolve<TService>() resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public TService Resolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved ToEntity(TRequest) override this method and place the logic for mapping the request dto to the desired domain entity Declaration public virtual TEntity ToEntity(TRequest r) Parameters Type Name Description TRequest r the request dto Returns Type Description TEntity ToEntityAsync(TRequest, CancellationToken) override this method and place the logic for mapping the request dto to the desired domain entity Declaration public virtual Task<TEntity> ToEntityAsync(TRequest r, CancellationToken ct = default) Parameters Type Name Description TRequest r the request dto to map from CancellationToken ct a cancellation token Returns Type Description Task<TEntity> TryResolve(Type) try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public object? TryResolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object TryResolve<TService>() try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public TService? TryResolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Implements IRequestMapper IMapper IServiceResolverBase"
  },
  "api/FastEndpoints.ResponseHeader.html": {
    "href": "api/FastEndpoints.ResponseHeader.html",
    "title": "Class ResponseHeader | FastEndpoints",
    "keywords": "Class ResponseHeader describes a swagger response header for a certain response dto Inheritance object ResponseHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class ResponseHeader Constructors ResponseHeader(int, string) Declaration public ResponseHeader(int statusCode, string headerName) Parameters Type Name Description int statusCode string headerName Properties Description description for the header Declaration public string? Description { set; } Property Value Type Description string Example an example header value Declaration public object? Example { set; } Property Value Type Description object"
  },
  "api/FastEndpoints.ResponseMapper-2.html": {
    "href": "api/FastEndpoints.ResponseMapper-2.html",
    "title": "Class ResponseMapper<TResponse, TEntity> | FastEndpoints",
    "keywords": "Class ResponseMapper<TResponse, TEntity> use this base class to define a domain entity mapper for your endpoints that only has a response dto and no request dto. HINT: entity mappers are used as singletons for performance reasons. do not maintain state in the mappers. Inheritance object ResponseMapper<TResponse, TEntity> Implements IResponseMapper IMapper IServiceResolverBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class ResponseMapper<TResponse, TEntity> : IResponseMapper, IMapper, IServiceResolverBase where TResponse : notnull Type Parameters Name Description TResponse the type of response dto TEntity the type of domain entity to map to/from Methods CreateScope() if you'd like to resolve scoped or transient services from the MS DI container, obtain a service scope from this method and dispose the scope when the work is complete. using var scope = CreateScope(); var scopedService = scope.Resolve<MyService>(); Declaration public IServiceScope CreateScope() Returns Type Description IServiceScope FromEntity(TEntity) override this method and place the logic for mapping a domain entity to a response dto Declaration public virtual TResponse FromEntity(TEntity e) Parameters Type Name Description TEntity e the domain entity to map from Returns Type Description TResponse FromEntityAsync(TEntity, CancellationToken) override this method and place the logic for mapping a domain entity to a response dto Declaration public virtual Task<TResponse> FromEntityAsync(TEntity e, CancellationToken ct = default) Parameters Type Name Description TEntity e the domain entity to map from CancellationToken ct a cancellation token Returns Type Description Task<TResponse> Resolve(Type) resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public object Resolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved Resolve<TService>() resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public TService Resolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved TryResolve(Type) try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public object? TryResolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object TryResolve<TService>() try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public TService? TryResolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Implements IResponseMapper IMapper IServiceResolverBase"
  },
  "api/FastEndpoints.RouteHandlerBuilderExtensions.html": {
    "href": "api/FastEndpoints.RouteHandlerBuilderExtensions.html",
    "title": "Class RouteHandlerBuilderExtensions | FastEndpoints",
    "keywords": "Class RouteHandlerBuilderExtensions Inheritance object RouteHandlerBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public static class RouteHandlerBuilderExtensions Methods Accepts<TRequest>(RouteHandlerBuilder) override the default \"accepts metadata\" in order to accept any content-type from the client. Declaration public static RouteHandlerBuilder Accepts<TRequest>(this RouteHandlerBuilder hb) where TRequest : notnull Parameters Type Name Description RouteHandlerBuilder hb Returns Type Description RouteHandlerBuilder Type Parameters Name Description TRequest the type of the request dto ClearDefaultAccepts(RouteHandlerBuilder) clears just the default \"accepts metadata\" from the endpoint. Declaration public static RouteHandlerBuilder ClearDefaultAccepts(this RouteHandlerBuilder hb) Parameters Type Name Description RouteHandlerBuilder hb Returns Type Description RouteHandlerBuilder ClearDefaultProduces(RouteHandlerBuilder, params int[]) clears any number of given \"produces metadata\" from the endpoint by supplying the status codes of the responses to remove. not specifying any status codes will result in all produces metadata being removed. Declaration public static RouteHandlerBuilder ClearDefaultProduces(this RouteHandlerBuilder hb, params int[] statusCodes) Parameters Type Name Description RouteHandlerBuilder hb int[] statusCodes one or more status codes of the defaults to remove Returns Type Description RouteHandlerBuilder ProducesProblemDetails(RouteHandlerBuilder, int, string) adds produces metadata of type ProblemDetails (RFC7807 compatible) to the endpoint description Declaration public static RouteHandlerBuilder ProducesProblemDetails(this RouteHandlerBuilder hb, int statusCode = 400, string contentType = \"application/problem+json\") Parameters Type Name Description RouteHandlerBuilder hb int statusCode the status code of the error response string contentType content type header value Returns Type Description RouteHandlerBuilder ProducesProblemFE(RouteHandlerBuilder, int, string) adds produces metadata of type ErrorResponse to the endpoint description Declaration public static RouteHandlerBuilder ProducesProblemFE(this RouteHandlerBuilder hb, int statusCode = 400, string contentType = \"application/problem+json\") Parameters Type Name Description RouteHandlerBuilder hb int statusCode the status code of the error response string contentType content type header value Returns Type Description RouteHandlerBuilder ProducesProblemFE<TResponse>(RouteHandlerBuilder, int, string) adds produces metadata for a given type of error response dto Declaration public static RouteHandlerBuilder ProducesProblemFE<TResponse>(this RouteHandlerBuilder hb, int statusCode = 400, string contentType = \"application/problem+json\") Parameters Type Name Description RouteHandlerBuilder hb int statusCode the status code of the error response string contentType content type header value Returns Type Description RouteHandlerBuilder Type Parameters Name Description TResponse the type of the error response"
  },
  "api/FastEndpoints.Security.AuthExtensions.html": {
    "href": "api/FastEndpoints.Security.AuthExtensions.html",
    "title": "Class AuthExtensions | FastEndpoints",
    "keywords": "Class AuthExtensions a set of auth related extensions Inheritance object AuthExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Security Assembly: FastEndpoints.Security.dll Syntax public static class AuthExtensions Methods Add(List<Claim>, params Claim[]) adds multiple Claims to the list. Declaration public static void Add(this List<Claim> list, params Claim[] claims) Parameters Type Name Description List<Claim> list Claim[] claims the Claims to append to the list. Add(List<Claim>, params (string claimType, string claimValue)[]) adds multiple Claims to the list. Declaration public static void Add(this List<Claim> list, params (string claimType, string claimValue)[] claims) Parameters Type Name Description List<Claim> list (string claimType, string claimValue)[] claims the claim Type & Value tuples to add to the list. Add(List<string>, params string[]) adds multiple strings to a list. Declaration public static void Add(this List<string> list, params string[] values) Parameters Type Name Description List<string> list string[] values the strings to append to the list. AddCookieAuth(IServiceCollection, TimeSpan, Action<CookieAuthenticationOptions>?) configure and enable cookie based authentication Declaration public static IServiceCollection AddCookieAuth(this IServiceCollection services, TimeSpan validFor, Action<CookieAuthenticationOptions>? options = null) Parameters Type Name Description IServiceCollection services TimeSpan validFor specify how long the created cookie is valid for with a TimeSpan Action<CookieAuthenticationOptions> options optional action for configuring cookie authentication options Returns Type Description IServiceCollection AddJWTBearerAuth(IServiceCollection, string, TokenSigningStyle, Action<JwtBearerOptions>?) configure and enable jwt bearer authentication Declaration public static IServiceCollection AddJWTBearerAuth(this IServiceCollection services, string tokenSigningKey, JWTBearer.TokenSigningStyle tokenSigningStyle, Action<JwtBearerOptions>? jwtOptions = null) Parameters Type Name Description IServiceCollection services string tokenSigningKey the secret key to use for verifying the jwt tokens JWTBearer.TokenSigningStyle tokenSigningStyle specify the token signing style Action<JwtBearerOptions> jwtOptions configuration action to specify options for the authentication scheme Returns Type Description IServiceCollection AddJWTBearerAuth(IServiceCollection, string, TokenSigningStyle, Action<TokenValidationParameters>?, Action<JwtBearerEvents>?) configure and enable jwt bearer authentication Declaration public static IServiceCollection AddJWTBearerAuth(this IServiceCollection services, string tokenSigningKey, JWTBearer.TokenSigningStyle tokenSigningStyle = TokenSigningStyle.Symmetric, Action<TokenValidationParameters>? tokenValidation = null, Action<JwtBearerEvents>? bearerEvents = null) Parameters Type Name Description IServiceCollection services string tokenSigningKey the secret key to use for verifying the jwt tokens JWTBearer.TokenSigningStyle tokenSigningStyle specify the token signing style Action<TokenValidationParameters> tokenValidation configuration action to specify additional token validation parameters Action<JwtBearerEvents> bearerEvents configuration action to specify custom jwt bearer events Returns Type Description IServiceCollection AddJWTBearerAuth(IServiceCollection, string, Action<JwtBearerOptions>) configure and enable jwt bearer authentication Declaration public static IServiceCollection AddJWTBearerAuth(this IServiceCollection services, string tokenSigningKey, Action<JwtBearerOptions> jwtOptions) Parameters Type Name Description IServiceCollection services string tokenSigningKey the secret key to use for verifying the jwt tokens Action<JwtBearerOptions> jwtOptions configuration action to specify options for the authentication scheme Returns Type Description IServiceCollection ClaimValue(ClaimsPrincipal, string) get the claim value for a given claim type of the current user principal. if the user doesn't have the requested claim type, a null will be returned. Declaration public static string? ClaimValue(this ClaimsPrincipal principal, string claimType) Parameters Type Name Description ClaimsPrincipal principal string claimType the claim type to look for Returns Type Description string HasClaimType(ClaimsPrincipal, string) determines if the current user principal has the given claim type Declaration public static bool HasClaimType(this ClaimsPrincipal principal, string claimType) Parameters Type Name Description ClaimsPrincipal principal string claimType the claim type to check for Returns Type Description bool HasPermission(ClaimsPrincipal, string) returns true of the current user principal has a given permission code. Declaration public static bool HasPermission(this ClaimsPrincipal principal, string permissionCode) Parameters Type Name Description ClaimsPrincipal principal string permissionCode the permission code to check for Returns Type Description bool"
  },
  "api/FastEndpoints.Security.CookieAuth.html": {
    "href": "api/FastEndpoints.Security.CookieAuth.html",
    "title": "Class CookieAuth | FastEndpoints",
    "keywords": "Class CookieAuth static class for easy cookie based auth Inheritance object CookieAuth Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Security Assembly: FastEndpoints.Security.dll Syntax public static class CookieAuth Methods SignInAsync(Action<UserPrivileges>, Action<AuthenticationProperties>?) creates the auth cookie and adds it to the current http response Declaration public static Task SignInAsync(Action<UserPrivileges> privileges, Action<AuthenticationProperties>? properties = null) Parameters Type Name Description Action<UserPrivileges> privileges the privileges to be assigned to the user such as claims, permissions, and roles Action<AuthenticationProperties> properties an optional action to configure authentication properties Returns Type Description Task Exceptions Type Condition InvalidOperationException thrown if the auth middleware hasn't been configure or method is used outside the scope of an http request SignOutAsync(Action<AuthenticationProperties>?) signs the user out from the cookie authentication scheme Declaration public static Task SignOutAsync(Action<AuthenticationProperties>? properties = null) Parameters Type Name Description Action<AuthenticationProperties> properties an optional action to configure authentication properties Returns Type Description Task Exceptions Type Condition InvalidOperationException thrown if the auth middleware hasn't been configure or method is used outside the scope of an http request"
  },
  "api/FastEndpoints.Security.JWTBearer.TokenSigningStyle.html": {
    "href": "api/FastEndpoints.Security.JWTBearer.TokenSigningStyle.html",
    "title": "Enum JWTBearer.TokenSigningStyle | FastEndpoints",
    "keywords": "Enum JWTBearer.TokenSigningStyle token signing style enum Namespace: FastEndpoints.Security Assembly: FastEndpoints.Security.dll Syntax public enum JWTBearer.TokenSigningStyle Fields Name Description Asymmetric Symmetric"
  },
  "api/FastEndpoints.Security.JWTBearer.html": {
    "href": "api/FastEndpoints.Security.JWTBearer.html",
    "title": "Class JWTBearer | FastEndpoints",
    "keywords": "Class JWTBearer static class for easy creation of jwt bearer auth tokens Inheritance object JWTBearer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Security Assembly: FastEndpoints.Security.dll Syntax public static class JWTBearer Methods CreateToken(string, TokenSigningStyle, string?, string?, DateTime?, IEnumerable<string>?, IEnumerable<string>?, params (string claimType, string claimValue)[]) generate a jwt token with the supplied parameters and token signing style Declaration public static string CreateToken(string signingKey, JWTBearer.TokenSigningStyle signingStyle, string? issuer = null, string? audience = null, DateTime? expireAt = null, IEnumerable<string>? permissions = null, IEnumerable<string>? roles = null, params (string claimType, string claimValue)[] claims) Parameters Type Name Description string signingKey the secret key to use for signing the tokens JWTBearer.TokenSigningStyle signingStyle the signing style to use (Symmertic or Asymmetric) string issuer the issue string audience the audience DateTime? expireAt the expiry date IEnumerable<string> permissions one or more permissions to assign to the user principal IEnumerable<string> roles one or more roles to assign the user principal (string claimType, string claimValue)[] claims one or more claims to assign to the user principal Returns Type Description string CreateToken(string, Action<UserPrivileges>, string?, string?, DateTime?, TokenSigningStyle) generate a jwt token with the supplied parameters Declaration public static string CreateToken(string signingKey, Action<UserPrivileges> privileges, string? issuer = null, string? audience = null, DateTime? expireAt = null, JWTBearer.TokenSigningStyle signingStyle = TokenSigningStyle.Symmetric) Parameters Type Name Description string signingKey the secret key to use for signing the tokens Action<UserPrivileges> privileges an action to specify the privileges of the user string issuer the issuer string audience the audience DateTime? expireAt the expiry date JWTBearer.TokenSigningStyle signingStyle the signing style to use (Symmertic or Asymmetric) Returns Type Description string CreateToken(string, DateTime?, IEnumerable<string>?, IEnumerable<string>?, IEnumerable<Claim>?, string?, string?, TokenSigningStyle) generate a jwt token with the supplied parameters Declaration public static string CreateToken(string signingKey, DateTime? expireAt = null, IEnumerable<string>? permissions = null, IEnumerable<string>? roles = null, IEnumerable<Claim>? claims = null, string? issuer = null, string? audience = null, JWTBearer.TokenSigningStyle signingStyle = TokenSigningStyle.Symmetric) Parameters Type Name Description string signingKey the secret key to use for signing the tokens DateTime? expireAt the expiry date IEnumerable<string> permissions one or more permissions to assign to the user principal IEnumerable<string> roles one or more roles to assign the user principal IEnumerable<Claim> claims one or more claims to assign to the user principal string issuer the issuer string audience the audience JWTBearer.TokenSigningStyle signingStyle the signing style to use (Symmetric or Asymmetric) Returns Type Description string CreateToken(string, DateTime?, IEnumerable<string>?, IEnumerable<string>?, params (string claimType, string claimValue)[]) generate a jwt token with the supplied parameters Declaration public static string CreateToken(string signingKey, DateTime? expireAt = null, IEnumerable<string>? permissions = null, IEnumerable<string>? roles = null, params (string claimType, string claimValue)[] claims) Parameters Type Name Description string signingKey the secret key to use for signing the tokens DateTime? expireAt the expiry date IEnumerable<string> permissions one or more permissions to assign to the user principal IEnumerable<string> roles one or more roles to assign the user principal (string claimType, string claimValue)[] claims one or more claims to assign to the user principal Returns Type Description string CreateToken(string, string?, string?, DateTime?, IEnumerable<string>?, IEnumerable<string>?, params (string claimType, string claimValue)[]) generate a jwt token with the supplied parameters Declaration public static string CreateToken(string signingKey, string? issuer, string? audience, DateTime? expireAt = null, IEnumerable<string>? permissions = null, IEnumerable<string>? roles = null, params (string claimType, string claimValue)[] claims) Parameters Type Name Description string signingKey the secret key to use for signing the tokens string issuer the issue string audience the audience DateTime? expireAt the expiry date IEnumerable<string> permissions one or more permissions to assign to the user principal IEnumerable<string> roles one or more roles to assign the user principal (string claimType, string claimValue)[] claims one or more claims to assign to the user principal Returns Type Description string"
  },
  "api/FastEndpoints.Security.Permissions.html": {
    "href": "api/FastEndpoints.Security.Permissions.html",
    "title": "Class Permissions | FastEndpoints",
    "keywords": "Class Permissions inherit from this class and define your applications permissions as public const string public const string Inventory_Create_Item = \"100\"; public const string Inventory_Retrieve_Item = \"101\"; public const string Inventory_Update_Item = \"102\"; public const string Inventory_Delete_Item = \"103\"; Inheritance object Permissions Implements IEnumerable<(string PermissionName, string PermissionCode)> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Security Assembly: FastEndpoints.Security.dll Syntax public abstract class Permissions : IEnumerable<(string PermissionName, string PermissionCode)>, IEnumerable Constructors Permissions() Declaration protected Permissions() Methods AllCodes() get a list of all permission codes Declaration public IEnumerable<string> AllCodes() Returns Type Description IEnumerable<string> AllNames() get a list of all permission names Declaration public IEnumerable<string> AllNames() Returns Type Description IEnumerable<string> CodesFor(IEnumerable<string>) get a list of permission codes for a given list of permission names Declaration public IEnumerable<string> CodesFor(IEnumerable<string> names) Parameters Type Name Description IEnumerable<string> names the permission names to get the codes for Returns Type Description IEnumerable<string> GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<(string PermissionName, string PermissionCode)> GetEnumerator() Returns Type Description IEnumerator<(string PermissionName, string PermissionCode)> An enumerator that can be used to iterate through the collection. NamesFor(IEnumerable<string>) gets a list of permission names for the given list of permission codes Declaration public IEnumerable<string> NamesFor(IEnumerable<string> codes) Parameters Type Name Description IEnumerable<string> codes the permission codes to get the permission names for Returns Type Description IEnumerable<string> PermissionFromCode(string) get the permission tuple using it's code. returns null if not found Declaration public (string PermissionName, string PermissionCode)? PermissionFromCode(string permissionCode) Parameters Type Name Description string permissionCode code of the permission to get Returns Type Description (string PermissionName, string PermissionCode)? PermissionFromName(string) get the permission tuple using it's name. returns null if not found Declaration public (string PermissionName, string PermissionCode)? PermissionFromName(string permissionName) Parameters Type Name Description string permissionName name of the permission Returns Type Description (string PermissionName, string PermissionCode)? Implements IEnumerable<T> IEnumerable"
  },
  "api/FastEndpoints.Security.RefreshServiceOptions.html": {
    "href": "api/FastEndpoints.Security.RefreshServiceOptions.html",
    "title": "Class RefreshServiceOptions | FastEndpoints",
    "keywords": "Class RefreshServiceOptions Inheritance object RefreshServiceOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Security Assembly: FastEndpoints.Security.dll Syntax public class RefreshServiceOptions Properties AccessTokenValidity specifies how long the access token should be valid for. default is 5 minutes. Declaration public TimeSpan AccessTokenValidity { set; } Property Value Type Description TimeSpan Audience specifies the token audience Declaration public string? Audience { set; } Property Value Type Description string Issuer specifies the token issuer Declaration public string? Issuer { set; } Property Value Type Description string RefreshTokenValidity specifies how long the refresh token should be valid for. default is 4 hours. Declaration public TimeSpan RefreshTokenValidity { set; } Property Value Type Description TimeSpan TokenSigningKey specifies the secret key used to sign the jwt. an exception will be thrown if a value is not specified. Declaration public string? TokenSigningKey { set; } Property Value Type Description string TokenSigningStyle specifies the signing style of the jwt. default is symmetric. Declaration public JWTBearer.TokenSigningStyle TokenSigningStyle { set; } Property Value Type Description JWTBearer.TokenSigningStyle Methods Endpoint(string, Action<EndpointDefinition>) endpoint configuration action Declaration public void Endpoint(string refreshEndpointRoute, Action<EndpointDefinition> ep) Parameters Type Name Description string refreshEndpointRoute the route of the refresh token endpoint Action<EndpointDefinition> ep the action to be performed on the endpoint definition"
  },
  "api/FastEndpoints.Security.RefreshTokenService-2.html": {
    "href": "api/FastEndpoints.Security.RefreshTokenService-2.html",
    "title": "Class RefreshTokenService<TRequest, TResponse> | FastEndpoints",
    "keywords": "Class RefreshTokenService<TRequest, TResponse> implement this class to define your own refresh token endpoints. Inheritance object BaseEndpoint Endpoint<TRequest, TResponse> RefreshTokenService<TRequest, TResponse> Implements IEndpoint IEventBus IServiceResolverBase Inherited Members Endpoint<TRequest, TResponse>.HandleAsync(TRequest, CancellationToken) Endpoint<TRequest, TResponse>.ExecuteAsync(TRequest, CancellationToken) Endpoint<TRequest, TResponse>.TryResolve<TService>() Endpoint<TRequest, TResponse>.TryResolve(Type) Endpoint<TRequest, TResponse>.Resolve<TService>() Endpoint<TRequest, TResponse>.Resolve(Type) Endpoint<TRequest, TResponse>.CreateScope() Endpoint<TRequest, TResponse>.Route<T>(string, bool) Endpoint<TRequest, TResponse>.Query<T>(string, bool) Endpoint<TRequest, TResponse>.FormFileSectionsAsync(CancellationToken) Endpoint<TRequest, TResponse>.PublishAsync<TEvent>(TEvent, Mode, CancellationToken) Endpoint<TRequest, TResponse>.CreateTokenWith<TService>(string, Action<UserPrivileges>) Endpoint<TRequest, TResponse>.ProcessorState<TState>() Endpoint<TRequest, TResponse>.OnBeforeValidate(TRequest) Endpoint<TRequest, TResponse>.OnBeforeValidateAsync(TRequest, CancellationToken) Endpoint<TRequest, TResponse>.OnAfterValidate(TRequest) Endpoint<TRequest, TResponse>.OnAfterValidateAsync(TRequest, CancellationToken) Endpoint<TRequest, TResponse>.OnBeforeHandle(TRequest) Endpoint<TRequest, TResponse>.OnBeforeHandleAsync(TRequest, CancellationToken) Endpoint<TRequest, TResponse>.OnAfterHandle(TRequest, TResponse) Endpoint<TRequest, TResponse>.OnAfterHandleAsync(TRequest, TResponse, CancellationToken) Endpoint<TRequest, TResponse>.OnValidationFailed() Endpoint<TRequest, TResponse>.OnValidationFailedAsync(CancellationToken) Endpoint<TRequest, TResponse>.User Endpoint<TRequest, TResponse>.Response Endpoint<TRequest, TResponse>.Config Endpoint<TRequest, TResponse>.Env Endpoint<TRequest, TResponse>.Logger Endpoint<TRequest, TResponse>.BaseURL Endpoint<TRequest, TResponse>.HttpMethod Endpoint<TRequest, TResponse>.Form Endpoint<TRequest, TResponse>.Files Endpoint<TRequest, TResponse>.ResponseStarted Endpoint<TRequest, TResponse>.SendAsync(TResponse, int, CancellationToken) Endpoint<TRequest, TResponse>.SendResultAsync(IResult) Endpoint<TRequest, TResponse>.SendInterceptedAsync(object, int, CancellationToken) Endpoint<TRequest, TResponse>.SendCreatedAtAsync<TEndpoint>(object, TResponse, Http?, int?, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendCreatedAtAsync(string, object, TResponse, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendStringAsync(string, int, string, CancellationToken) Endpoint<TRequest, TResponse>.SendOkAsync(TResponse, CancellationToken) Endpoint<TRequest, TResponse>.SendOkAsync(CancellationToken) Endpoint<TRequest, TResponse>.SendErrorsAsync(int, CancellationToken) Endpoint<TRequest, TResponse>.SendNoContentAsync(CancellationToken) Endpoint<TRequest, TResponse>.SendNotFoundAsync(CancellationToken) Endpoint<TRequest, TResponse>.SendUnauthorizedAsync(CancellationToken) Endpoint<TRequest, TResponse>.SendForbiddenAsync(CancellationToken) Endpoint<TRequest, TResponse>.SendRedirectAsync(string, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendHeadersAsync(Action<IHeaderDictionary>, int, CancellationToken) Endpoint<TRequest, TResponse>.SendBytesAsync(byte[], string, string, DateTimeOffset?, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendFileAsync(FileInfo, string, DateTimeOffset?, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendStreamAsync(Stream, string, long?, string, DateTimeOffset?, bool, CancellationToken) Endpoint<TRequest, TResponse>.SendEventStreamAsync<T>(string, IAsyncEnumerable<T>, CancellationToken) Endpoint<TRequest, TResponse>.SendEmptyJsonObject(CancellationToken) Endpoint<TRequest, TResponse>.AccessControl(string, Apply?, params string[]) Endpoint<TRequest, TResponse>.AccessControl(string, params string[]) Endpoint<TRequest, TResponse>.AllowAnonymous(params Http[]) Endpoint<TRequest, TResponse>.AllowAnonymous(string[]) Endpoint<TRequest, TResponse>.AllowFileUploads(bool) Endpoint<TRequest, TResponse>.AllowFormData(bool) Endpoint<TRequest, TResponse>.AuthSchemes(params string[]) Endpoint<TRequest, TResponse>.Claims(params string[]) Endpoint<TRequest, TResponse>.ClaimsAll(params string[]) Endpoint<TRequest, TResponse>.Delete(params string[]) Endpoint<TRequest, TResponse>.Delete(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.Description(Action<RouteHandlerBuilder>, bool) Endpoint<TRequest, TResponse>.DontAutoTag() Endpoint<TRequest, TResponse>.DontCatchExceptions() Endpoint<TRequest, TResponse>.DontThrowIfValidationFails() Endpoint<TRequest, TResponse>.EnableAntiforgery() Endpoint<TRequest, TResponse>.Get(params string[]) Endpoint<TRequest, TResponse>.Get(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.Group<TEndpointGroup>() Endpoint<TRequest, TResponse>.Head(params string[]) Endpoint<TRequest, TResponse>.Head(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.Options(Action<RouteHandlerBuilder>) Endpoint<TRequest, TResponse>.Patch(params string[]) Endpoint<TRequest, TResponse>.Patch(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.Permissions(params string[]) Endpoint<TRequest, TResponse>.PermissionsAll(params string[]) Endpoint<TRequest, TResponse>.Policy(Action<AuthorizationPolicyBuilder>) Endpoint<TRequest, TResponse>.Policies(params string[]) Endpoint<TRequest, TResponse>.Post(params string[]) Endpoint<TRequest, TResponse>.Post(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.PostProcessor<TPostProcessor>() Endpoint<TRequest, TResponse>.PostProcessors(params IPostProcessor<TRequest, TResponse>[]) Endpoint<TRequest, TResponse>.PreProcessor<TPreProcessor>() Endpoint<TRequest, TResponse>.PreProcessors(params IPreProcessor<TRequest>[]) Endpoint<TRequest, TResponse>.Put(params string[]) Endpoint<TRequest, TResponse>.Put(string, Expression<Func<TRequest, object>>) Endpoint<TRequest, TResponse>.RequestBinder(IRequestBinder<TRequest>) Endpoint<TRequest, TResponse>.ResponseCache(int, ResponseCacheLocation, bool, string, string[]) Endpoint<TRequest, TResponse>.ResponseInterceptor(IResponseInterceptor) Endpoint<TRequest, TResponse>.Roles(params string[]) Endpoint<TRequest, TResponse>.RoutePrefixOverride(string) Endpoint<TRequest, TResponse>.Routes(params string[]) Endpoint<TRequest, TResponse>.SerializerContext<TContext>(TContext) Endpoint<TRequest, TResponse>.SerializerContext<TContext>() Endpoint<TRequest, TResponse>.Summary(Action<EndpointSummary>) Endpoint<TRequest, TResponse>.Summary(Action<EndpointSummary<TRequest>>) Endpoint<TRequest, TResponse>.Summary(EndpointSummary) Endpoint<TRequest, TResponse>.Tags(params string[]) Endpoint<TRequest, TResponse>.Throttle(int, double, string) Endpoint<TRequest, TResponse>.Validator<TValidator>() Endpoint<TRequest, TResponse>.Verbs(params Http[]) Endpoint<TRequest, TResponse>.Verbs(params string[]) Endpoint<TRequest, TResponse>.Version(int, int?) Endpoint<TRequest, TResponse>.ValidationFailed Endpoint<TRequest, TResponse>.AddError(ValidationFailure) Endpoint<TRequest, TResponse>.AddError(string, string, Severity) Endpoint<TRequest, TResponse>.AddError(Expression<Func<TRequest, object>>, string, string, Severity) Endpoint<TRequest, TResponse>.ThrowError(ValidationFailure, int?) Endpoint<TRequest, TResponse>.ThrowError(string, int?) Endpoint<TRequest, TResponse>.ThrowError(Expression<Func<TRequest, object>>, string, int?) Endpoint<TRequest, TResponse>.ThrowIfAnyErrors(int?) BaseEndpoint.Definition BaseEndpoint.HttpContext BaseEndpoint.ValidationFailures BaseEndpoint.Configure() BaseEndpoint.Verbs(params string[]) BaseEndpoint.Group<TEndpointGroup>() BaseEndpoint.GetAclHash(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Security Assembly: FastEndpoints.Security.dll Syntax public abstract class RefreshTokenService<TRequest, TResponse> : Endpoint<TRequest, TResponse>, IEndpoint, IEventBus, IServiceResolverBase where TRequest : notnull, TokenRequest, new() where TResponse : notnull, TokenResponse, new() Type Parameters Name Description TRequest the type of the request dto that will be accepted by the refresh endpoint TResponse the type of the response dto that will be sent by the refresh endpoint Methods CreateCustomToken<T>(string, Action<UserPrivileges>, Func<TResponse, T>) create a token response and map it to a different type. useful if you need to create the token manually by yourself. Declaration public Task<T> CreateCustomToken<T>(string userId, Action<UserPrivileges> privileges, Func<TResponse, T> map) Parameters Type Name Description string userId the id of the user to create the token for Action<UserPrivileges> privileges the user priviledges to be embeded in the jwt such as roles/claims/permissions Func<TResponse, T> map a func that maps properties from TResponse to T Returns Type Description Task<T> Type Parameters Name Description T the type to map to PersistTokenAsync(TResponse) this method will be called whenever a new access/refresh token pair is being generated. store the tokens and expiry dates however you wish for the purpose of verifying future refresh requests. Declaration public abstract Task PersistTokenAsync(TResponse response) Parameters Type Name Description TResponse response the response dto containing the tokens that's about to be sent to the requesting client Returns Type Description Task RefreshRequestValidationAsync(TRequest) validate the incoming refresh request by checking the token and expiry against the previously stored data. if the token is not valid and a new token pair should not be created, simply add validation errors using the AddError() method. the failures you add will be sent to the requesting client. if no failures are added, validation passes and a new token pair will be created and sent to the client. Declaration public abstract Task RefreshRequestValidationAsync(TRequest req) Parameters Type Name Description TRequest req the incoming refresh request dto Returns Type Description Task SetRenewalPrivilegesAsync(TRequest, UserPrivileges) specify the user privileges to be embeded in the jwt when a refresh request is received and validation has passed. this only applies to renewal/refresh requests received to the refresh endpoint and not the initial jwt creation. Declaration public abstract Task SetRenewalPrivilegesAsync(TRequest request, UserPrivileges privileges) Parameters Type Name Description TRequest request the request dto received from the client UserPrivileges privileges the user priviledges to be embeded in the jwt such as roles/claims/permissions Returns Type Description Task Setup(Action<RefreshServiceOptions>) configure the refresh token service options Declaration public void Setup(Action<RefreshServiceOptions> options) Parameters Type Name Description Action<RefreshServiceOptions> options action to be performed on the refresh service options object Implements IEndpoint IEventBus IServiceResolverBase"
  },
  "api/FastEndpoints.Security.TokenRequest.html": {
    "href": "api/FastEndpoints.Security.TokenRequest.html",
    "title": "Class TokenRequest | FastEndpoints",
    "keywords": "Class TokenRequest base dto for access/refresh token renewal requests Inheritance object TokenRequest TokenResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Security Assembly: FastEndpoints.Security.dll Syntax public class TokenRequest Properties RefreshToken a single-use refresh token which will be valid for the duration specified by RefreshExpiry Declaration public string RefreshToken { get; set; } Property Value Type Description string UserId unique identifier of a user Declaration public string UserId { get; set; } Property Value Type Description string"
  },
  "api/FastEndpoints.Security.TokenResponse.html": {
    "href": "api/FastEndpoints.Security.TokenResponse.html",
    "title": "Class TokenResponse | FastEndpoints",
    "keywords": "Class TokenResponse base dto for access/refresh token responses Inheritance object TokenRequest TokenResponse Inherited Members TokenRequest.UserId TokenRequest.RefreshToken object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Security Assembly: FastEndpoints.Security.dll Syntax public class TokenResponse : TokenRequest Properties AccessExpiry the expiry date-time of the access token Declaration [JsonIgnore] public DateTime AccessExpiry { get; } Property Value Type Description DateTime AccessToken the jwt access token which will be valid for the duration specified by AccessExpiry Declaration public string AccessToken { get; set; } Property Value Type Description string RefreshExpiry the expiry date-time of the refresh token Declaration [JsonIgnore] public DateTime RefreshExpiry { get; } Property Value Type Description DateTime"
  },
  "api/FastEndpoints.Security.html": {
    "href": "api/FastEndpoints.Security.html",
    "title": "Namespace FastEndpoints.Security | FastEndpoints",
    "keywords": "Namespace FastEndpoints.Security Classes AuthExtensions a set of auth related extensions CookieAuth static class for easy cookie based auth JWTBearer static class for easy creation of jwt bearer auth tokens Permissions inherit from this class and define your applications permissions as public const string public const string Inventory_Create_Item = \"100\"; public const string Inventory_Retrieve_Item = \"101\"; public const string Inventory_Update_Item = \"102\"; public const string Inventory_Delete_Item = \"103\"; RefreshServiceOptions RefreshTokenService<TRequest, TResponse> implement this class to define your own refresh token endpoints. TokenRequest base dto for access/refresh token renewal requests TokenResponse base dto for access/refresh token responses Enums JWTBearer.TokenSigningStyle token signing style enum"
  },
  "api/FastEndpoints.SecurityOptions.html": {
    "href": "api/FastEndpoints.SecurityOptions.html",
    "title": "Class SecurityOptions | FastEndpoints",
    "keywords": "Class SecurityOptions global security options Inheritance object SecurityOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class SecurityOptions Properties NameClaimType specify a custom claim type used to identity the name of a user principal. defaults to name. WARNING: do not change the default unless you fully comprehend what you're doing!!! Declaration public string NameClaimType { set; } Property Value Type Description string PermissionsClaimType specify a custom claim type used to identify permissions of a user principal. defaults to permission. WARNING: do not change the default unless you fully comprehend what you're doing!!! Declaration public string PermissionsClaimType { set; } Property Value Type Description string RoleClaimType specify a custom claim type used to identify roles of a user principal. defaults to role. WARNING: do not change the default unless you fully comprehend what you're doing!!! Declaration public string RoleClaimType { set; } Property Value Type Description string"
  },
  "api/FastEndpoints.SerializerOptions.html": {
    "href": "api/FastEndpoints.SerializerOptions.html",
    "title": "Class SerializerOptions | FastEndpoints",
    "keywords": "Class SerializerOptions serialization options for the endpoints Inheritance object SerializerOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class SerializerOptions Properties Options the json serializer options Declaration public JsonSerializerOptions Options { get; } Property Value Type Description JsonSerializerOptions RequestDeserializer a function for deserializing the incoming http request body. this function will be executed for each request received if it has a json request body. the input parameters of the func are as follows: HttpRequest : the incoming request Type : the type of the request dto which the request body will be deserialized into JsonSerializerContext? : json serializer context if code generation is used CancellationToken : a cancellation token Declaration public Func<HttpRequest, Type, JsonSerializerContext?, CancellationToken, ValueTask<object?>> RequestDeserializer { set; } Property Value Type Description Func<HttpRequest, Type, JsonSerializerContext, CancellationToken, ValueTask<object>> ResponseSerializer a function for writing serialized response dtos to the response body. this function will be executed whenever a json response is being sent to the client. you should set the content-type and write directly to the http response body stream in this function. the parameters of the func are as follows: HttpResponse : the http response object object : the response dto to be serialized string : the response content-type JsonSerializerContext? : json serializer context if code generation is used CancellationToken : a cancellation token example: config.ResponseSerializer = (rsp, dto, cType, jCtx , ct) => { rsp.ContentType = cType; return rsp.WriteAsync(Newtonsoft.Json.JsonConvert.SerializeObject(dto), ct); }; Declaration public Func<HttpResponse, object?, string, JsonSerializerContext?, CancellationToken, Task> ResponseSerializer { set; } Property Value Type Description Func<HttpResponse, object, string, JsonSerializerContext, CancellationToken, Task> SerializerErrorsField this is the field name used for adding serializer errors when the serializer throws due to bad json input and the error is not concerning a particular property/field of the incoming json. Declaration public string SerializerErrorsField { set; } Property Value Type Description string"
  },
  "api/FastEndpoints.ServiceScopeExtensions.html": {
    "href": "api/FastEndpoints.ServiceScopeExtensions.html",
    "title": "Class ServiceScopeExtensions | FastEndpoints",
    "keywords": "Class ServiceScopeExtensions Inheritance object ServiceScopeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public static class ServiceScopeExtensions Methods Resolve(IServiceScope, Type) resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public static object Resolve(this IServiceScope scope, Type typeOfService) Parameters Type Name Description IServiceScope scope Type typeOfService the type of the service to resolve Returns Type Description object Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved Resolve<TService>(IServiceScope) resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public static TService Resolve<TService>(this IServiceScope scope) where TService : class Parameters Type Name Description IServiceScope scope Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved TryResolve(IServiceScope, Type) try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public static object? TryResolve(this IServiceScope scope, Type typeOfService) Parameters Type Name Description IServiceScope scope Type typeOfService the type of the service to resolve Returns Type Description object TryResolve<TService>(IServiceScope) try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public static TService? TryResolve<TService>(this IServiceScope scope) where TService : class Parameters Type Name Description IServiceScope scope Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve"
  },
  "api/FastEndpoints.StaleJobSearchParams-1.html": {
    "href": "api/FastEndpoints.StaleJobSearchParams-1.html",
    "title": "Struct StaleJobSearchParams<TStorageRecord> | FastEndpoints",
    "keywords": "Struct StaleJobSearchParams<TStorageRecord> a dto representing search parameters for matching stale job storage records Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public struct StaleJobSearchParams<TStorageRecord> where TStorageRecord : IJobStorageRecord Type Parameters Name Description TStorageRecord the type of storage record Properties CancellationToken cancellation token Declaration public readonly CancellationToken CancellationToken { get; } Property Value Type Description CancellationToken Match a boolean lambda expression to match stale job records r => r.IsComplete || r.ExpireOn <= DateTime.UtcNow Declaration public readonly Expression<Func<TStorageRecord, bool>> Match { get; } Property Value Type Description Expression<Func<TStorageRecord, bool>>"
  },
  "api/FastEndpoints.StaleRecordSearchParams-1.html": {
    "href": "api/FastEndpoints.StaleRecordSearchParams-1.html",
    "title": "Struct StaleRecordSearchParams<TStorageRecord> | FastEndpoints",
    "keywords": "Struct StaleRecordSearchParams<TStorageRecord> a dto representing search parameters for matching stale event storage records Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public struct StaleRecordSearchParams<TStorageRecord> where TStorageRecord : IEventStorageRecord Type Parameters Name Description TStorageRecord the type of storage record Properties CancellationToken cancellation token Declaration public readonly CancellationToken CancellationToken { get; } Property Value Type Description CancellationToken Match a boolean lambda expression to match stale records r => r.IsComplete || DateTime.UtcNow >= r.ExpireOn Declaration public readonly Expression<Func<TStorageRecord, bool>> Match { get; } Property Value Type Description Expression<Func<TStorageRecord, bool>>"
  },
  "api/FastEndpoints.SubGroup-1.html": {
    "href": "api/FastEndpoints.SubGroup-1.html",
    "title": "Class SubGroup<TParent> | FastEndpoints",
    "keywords": "Class SubGroup<TParent> common configuration for a sub group of endpoints can be specified by implementing this abstract class and calling Configure(string, Action<EndpointDefinition>) in the constructor. Inheritance object Group SubGroup<TParent> Implements IServiceResolverBase Inherited Members Group.TryResolve<TService>() Group.TryResolve(Type) Group.Resolve<TService>() Group.Resolve(Type) Group.CreateScope() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class SubGroup<TParent> : Group, IServiceResolverBase where TParent : Group, new() Type Parameters Name Description TParent Methods Configure(string, Action<EndpointDefinition>) call this method in the constructor in order to configure the endpoint group. Declaration protected override sealed void Configure(string routePrefix, Action<EndpointDefinition> ep) Parameters Type Name Description string routePrefix the route prefix for the group Action<EndpointDefinition> ep the configuration action to be performed on the EndpointDefinition Overrides Group.Configure(string, Action<EndpointDefinition>) Implements IServiceResolverBase"
  },
  "api/FastEndpoints.SubscriberExceptionReceiver.html": {
    "href": "api/FastEndpoints.SubscriberExceptionReceiver.html",
    "title": "Class SubscriberExceptionReceiver | FastEndpoints",
    "keywords": "Class SubscriberExceptionReceiver inherit this class and override it's methods in order to receive event subscriber exceptions. Inheritance object SubscriberExceptionReceiver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public abstract class SubscriberExceptionReceiver Methods OnEventReceiveError<TEvent>(string, int, Exception, CancellationToken) this method is triggered when there's an error reading the next event message from the underlying gRPC stream. you'd hardly ever be overriding this method since it's none of your business most of the time and the operation would be automatically retried until successful. Declaration public virtual Task OnEventReceiveError<TEvent>(string subscriberID, int attemptCount, Exception exception, CancellationToken ct) where TEvent : class, IEvent Parameters Type Name Description string subscriberID the unique ID of the subscriber int attemptCount the number unsuccessful attempts to read the event message Exception exception the actual exception that was thrown by the operation CancellationToken ct cancellation token Returns Type Description Task Type Parameters Name Description TEvent the type of the event OnGetNextEventRecordError<TEvent>(string, int, Exception, CancellationToken) this method is triggered when the storage provider has trouble retrieving the next event record. Declaration public virtual Task OnGetNextEventRecordError<TEvent>(string subscriberID, int attemptCount, Exception exception, CancellationToken ct) where TEvent : class, IEvent Parameters Type Name Description string subscriberID the unique ID of the subscriber int attemptCount the number of times the record was attempted to be retrieved Exception exception the actual exception that was thrown by the operation CancellationToken ct cancellation token Returns Type Description Task Type Parameters Name Description TEvent the type of the event OnHandlerExecutionError<TEvent, THandler>(IEventStorageRecord, int, Exception, CancellationToken) this method is triggered when the event handler has trouble executing the HandleAsync(TEvent, CancellationToken) method. Declaration public virtual Task OnHandlerExecutionError<TEvent, THandler>(IEventStorageRecord record, int attemptCount, Exception exception, CancellationToken ct) where TEvent : class, IEvent where THandler : IEventHandler<TEvent> Parameters Type Name Description IEventStorageRecord record the event storage record that was supposed to be executed int attemptCount the number of times the record was attempted to be executed Exception exception the actual exception that was thrown by the operation CancellationToken ct cancellation token Returns Type Description Task Type Parameters Name Description TEvent the type of the event THandler the type of the event handler that failed to execute OnMarkEventAsCompleteError<TEvent>(IEventStorageRecord, int, Exception, CancellationToken) this method is triggered when the storage provider has trouble marking an event record as complete. Declaration public virtual Task OnMarkEventAsCompleteError<TEvent>(IEventStorageRecord record, int attemptCount, Exception exception, CancellationToken ct) where TEvent : class, IEvent Parameters Type Name Description IEventStorageRecord record the event storage record that was supposed to be marked complete int attemptCount the number of times the record was attempted to be marked complete Exception exception the actual exception that was thrown by the operation CancellationToken ct cancellation token Returns Type Description Task Type Parameters Name Description TEvent the type of the event OnStoreEventRecordError<TEvent>(IEventStorageRecord, int, Exception, CancellationToken) this method is triggered when the storage provider has trouble persisting an event record. Declaration public virtual Task OnStoreEventRecordError<TEvent>(IEventStorageRecord record, int attemptCount, Exception exception, CancellationToken ct) where TEvent : class, IEvent Parameters Type Name Description IEventStorageRecord record the event storage record that was supposed to be persisted int attemptCount the number of times the record was attempted to be persisted Exception exception the actual exception that was thrown by the operation CancellationToken ct cancellation token Returns Type Description Task Type Parameters Name Description TEvent the type of the event"
  },
  "api/FastEndpoints.SubscriberExceptionReceiverExtensions.html": {
    "href": "api/FastEndpoints.SubscriberExceptionReceiverExtensions.html",
    "title": "Class SubscriberExceptionReceiverExtensions | FastEndpoints",
    "keywords": "Class SubscriberExceptionReceiverExtensions Inheritance object SubscriberExceptionReceiverExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public static class SubscriberExceptionReceiverExtensions Methods AddSubscriberExceptionReceiver<TReceiver>(IServiceCollection) register a custom exception receiver for receiving event subscriber exceptions. Declaration public static IServiceCollection AddSubscriberExceptionReceiver<TReceiver>(this IServiceCollection services) where TReceiver : SubscriberExceptionReceiver Parameters Type Name Description IServiceCollection services Returns Type Description IServiceCollection Type Parameters Name Description TReceiver the implementation type of the receiver"
  },
  "api/FastEndpoints.SubscriberIDRestorationParams-1.html": {
    "href": "api/FastEndpoints.SubscriberIDRestorationParams-1.html",
    "title": "Struct SubscriberIDRestorationParams<TStorageRecord> | FastEndpoints",
    "keywords": "Struct SubscriberIDRestorationParams<TStorageRecord> parameters to use in finding subscriber IDs to restore Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: FastEndpoints Assembly: FastEndpoints.Messaging.Remote.dll Syntax public struct SubscriberIDRestorationParams<TStorageRecord> where TStorageRecord : IEventStorageRecord Type Parameters Name Description TStorageRecord the type of event storage record Properties CancellationToken a cancellation token Declaration public readonly CancellationToken CancellationToken { get; } Property Value Type Description CancellationToken EventType the type name of the events to search for which correlates to EventType Declaration public readonly string EventType { get; } Property Value Type Description string Match a boolean lambda expression to match pending records. r => r.EventType == \"xxx\" && !r.IsComplete && DateTime.UtcNow <= r.ExpireOn) Declaration public readonly Expression<Func<TStorageRecord, bool>> Match { get; } Property Value Type Description Expression<Func<TStorageRecord, bool>> Projection member expression to select/project the UNIQUE SubscriberID values. e => e.SubscriberID Declaration public readonly Expression<Func<TStorageRecord, string>> Projection { get; } Property Value Type Description Expression<Func<TStorageRecord, string>>"
  },
  "api/FastEndpoints.Summary-1.html": {
    "href": "api/FastEndpoints.Summary-1.html",
    "title": "Class Summary<TEndpoint> | FastEndpoints",
    "keywords": "Class Summary<TEndpoint> a class used for providing a textual description about an endpoint for swagger Inheritance object EndpointSummary Summary<TEndpoint> Inherited Members EndpointSummary.this[int] EndpointSummary.Summary EndpointSummary.Description EndpointSummary.RequestExamples EndpointSummary.ExampleRequest EndpointSummary.Params EndpointSummary.Responses EndpointSummary.ResponseExamples EndpointSummary.ResponseHeaders EndpointSummary.ResponseParam<TResponse>(int, Expression<Func<TResponse, object>>, string) EndpointSummary.ResponseParam<TResponse>(Expression<Func<TResponse, object>>, string) EndpointSummary.Response<TResponse>(int, string, string, TResponse) EndpointSummary.Response(int, string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class Summary<TEndpoint> : EndpointSummary where TEndpoint : IEndpoint Type Parameters Name Description TEndpoint the type of the endpoint this summary is associated with"
  },
  "api/FastEndpoints.Summary-2.html": {
    "href": "api/FastEndpoints.Summary-2.html",
    "title": "Class Summary<TEndpoint, TRequest> | FastEndpoints",
    "keywords": "Class Summary<TEndpoint, TRequest> a class used for providing a textual description about an endpoint for swagger Inheritance object EndpointSummary EndpointSummary<TRequest> Summary<TEndpoint, TRequest> Inherited Members EndpointSummary<TRequest>.RequestParam(Expression<Func<TRequest, object>>, string) EndpointSummary<TRequest>.ExampleRequest EndpointSummary.this[int] EndpointSummary.Summary EndpointSummary.Description EndpointSummary.RequestExamples EndpointSummary.Params EndpointSummary.Responses EndpointSummary.ResponseExamples EndpointSummary.ResponseHeaders EndpointSummary.ResponseParam<TResponse>(int, Expression<Func<TResponse, object>>, string) EndpointSummary.ResponseParam<TResponse>(Expression<Func<TResponse, object>>, string) EndpointSummary.Response<TResponse>(int, string, string, TResponse) EndpointSummary.Response(int, string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class Summary<TEndpoint, TRequest> : EndpointSummary<TRequest> where TEndpoint : IEndpoint where TRequest : notnull Type Parameters Name Description TEndpoint the type of the endpoint this summary is associated with TRequest the type of the request dto"
  },
  "api/FastEndpoints.Swagger.DocumentOptions.html": {
    "href": "api/FastEndpoints.Swagger.DocumentOptions.html",
    "title": "Class DocumentOptions | FastEndpoints",
    "keywords": "Class DocumentOptions options for the swagger document Inheritance object DocumentOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Swagger Assembly: FastEndpoints.Swagger.dll Syntax public class DocumentOptions Properties AutoTagPathSegmentIndex the index of the route path segment to use for tagging/grouping endpoints. set 0 to disable auto tagging. Declaration public int AutoTagPathSegmentIndex { get; set; } Property Value Type Description int DocumentSettings a function for configuring the swagger document generator settings Declaration public Action<AspNetCoreOpenApiDocumentGeneratorSettings>? DocumentSettings { get; set; } Property Value Type Description Action<AspNetCoreOpenApiDocumentGeneratorSettings> EnableGetRequestsWithBody by default GET request DTO properties are automatically converted to query parameters because fetch-client/swagger ui doesn't support it. set this to true if for some reason you'd like to disable this auto conversion and allow GET requests with a body. Declaration public bool EnableGetRequestsWithBody { get; set; } Property Value Type Description bool EnableJWTBearerAuth set to false to disable auto addition of jwt bearer auth support Declaration public bool EnableJWTBearerAuth { get; set; } Property Value Type Description bool EndpointFilter a function to filter out endpoints from the swagger document. this function will be run against every fast endpoint discovered. return true to include the endpoint and return false to exclude the endpoint from the swagger doc. Declaration public Func<EndpointDefinition, bool>? EndpointFilter { get; set; } Property Value Type Description Func<EndpointDefinition, bool> ExcludeNonFastEndpoints if set to true, only FastEndpoints will show up in the swagger doc Declaration public bool ExcludeNonFastEndpoints { get; set; } Property Value Type Description bool FlattenSchema enabling this flattens the inheritance hierarchy of all the schema. Declaration public bool FlattenSchema { get; set; } Property Value Type Description bool MaxEndpointVersion endpoints greater than this version will not be included in the swagger doc. Declaration public int MaxEndpointVersion { get; set; } Property Value Type Description int MinEndpointVersion endpoints lower than this version will not be included in the swagger doc. Declaration public int MinEndpointVersion { get; set; } Property Value Type Description int NewtonsoftSettings any additional newtonsoft serializer settings. most useful for registering custom converters. Declaration public Action<JsonSerializerSettings>? NewtonsoftSettings { get; set; } Property Value Type Description Action<JsonSerializerSettings> RemoveEmptyRequestSchema set to true for removing empty request dto schema from the swagger document. WARNING: enabling this also flattens the inheritance hierarchy of the schema. Declaration public bool RemoveEmptyRequestSchema { get; set; } Property Value Type Description bool SerializerSettings json serializer options Declaration public Action<JsonSerializerOptions>? SerializerSettings { get; set; } Property Value Type Description Action<JsonSerializerOptions> ShortSchemaNames set to true if you'd like schema names to be just the class name instead of the full name. Declaration public bool ShortSchemaNames { get; set; } Property Value Type Description bool ShowDeprecatedOps by default deprecated endpoints/operations will not show up in the swagger doc. set this to true if you instead want them to show up but displayed as \"obsolete\". Declaration public bool ShowDeprecatedOps { get; set; } Property Value Type Description bool TagCase the casing strategy to use when naming endpoint tags. Declaration public TagCase TagCase { get; set; } Property Value Type Description TagCase TagDescriptions specify swagger tag descriptions for the document. the key of the dictionary is the name of the tag to add a description for. Declaration public Action<Dictionary<string, string>>? TagDescriptions { get; set; } Property Value Type Description Action<Dictionary<string, string>> UsePropertyNamingPolicyForParams specify if PropertyNamingPolicy should be used for naming swagger parameters that are generated by the default operation processor. Declaration public bool UsePropertyNamingPolicyForParams { get; set; } Property Value Type Description bool"
  },
  "api/FastEndpoints.Swagger.Extensions.html": {
    "href": "api/FastEndpoints.Swagger.Extensions.html",
    "title": "Class Extensions | FastEndpoints",
    "keywords": "Class Extensions a set of extension methods for adding swagger support Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Swagger Assembly: FastEndpoints.Swagger.dll Syntax public static class Extensions Properties SelectedJsonNamingPolicy JsonNamingPolicy chosen for swagger Declaration public static JsonNamingPolicy? SelectedJsonNamingPolicy { get; } Property Value Type Description JsonNamingPolicy Methods AddAuth(OpenApiDocumentGeneratorSettings, string, OpenApiSecurityScheme, IEnumerable<string>?) add swagger auth for this open api document Declaration public static OpenApiDocumentGeneratorSettings AddAuth(this OpenApiDocumentGeneratorSettings s, string schemeName, OpenApiSecurityScheme securityScheme, IEnumerable<string>? globalScopeNames = null) Parameters Type Name Description OpenApiDocumentGeneratorSettings s string schemeName the authentication scheme OpenApiSecurityScheme securityScheme an open api security scheme object IEnumerable<string> globalScopeNames a collection of global scope names Returns Type Description OpenApiDocumentGeneratorSettings ConfigureDefaults(SwaggerUiSettings, Action<SwaggerUiSettings>?) configure swagger ui with some sensible defaults for FastEndpoints which can be overridden if needed. Declaration public static void ConfigureDefaults(this SwaggerUiSettings s, Action<SwaggerUiSettings>? settings = null) Parameters Type Name Description SwaggerUiSettings s Action<SwaggerUiSettings> settings provide an action that overrides any of the defaults DeActivateTryItOut(SwaggerUiSettings) the \"Try It Out\" button is activated by default. call this method to de-activate it by default. set NSwag.AspNetCore.SwaggerUiSettings.EnableTryItOut to false to remove the button from ui. Declaration public static void DeActivateTryItOut(this SwaggerUiSettings s) Parameters Type Name Description SwaggerUiSettings s EnableFastEndpoints(AspNetCoreOpenApiDocumentGeneratorSettings, Action<DocumentOptions>) enable support for FastEndpoints in swagger Declaration public static void EnableFastEndpoints(this AspNetCoreOpenApiDocumentGeneratorSettings settings, Action<DocumentOptions> documentOptions) Parameters Type Name Description AspNetCoreOpenApiDocumentGeneratorSettings settings Action<DocumentOptions> documentOptions the document options EnableJWTBearerAuth(AspNetCoreOpenApiDocumentGeneratorSettings) enable jwt bearer authorization support Declaration public static void EnableJWTBearerAuth(this AspNetCoreOpenApiDocumentGeneratorSettings settings) Parameters Type Name Description AspNetCoreOpenApiDocumentGeneratorSettings settings GetEndpointDefinition(OperationProcessorContext) gets the EndpointDefinition from the nwag operation processor context if this is a FastEndpoint operation. otherwise returns null. Declaration public static EndpointDefinition? GetEndpointDefinition(this OperationProcessorContext ctx) Parameters Type Name Description OperationProcessorContext ctx Returns Type Description EndpointDefinition GetExampleFromMetaData(IProducesResponseTypeMetadata) gets the example object if any, from a given ProducesResponseTypeMetadata internal class Declaration public static object? GetExampleFromMetaData(this IProducesResponseTypeMetadata metadata) Parameters Type Name Description IProducesResponseTypeMetadata metadata Returns Type Description object MarkNonNullablePropsAsRequired(AspNetCoreOpenApiDocumentGeneratorSettings) mark all non-nullable properties of the schema as required in the swagger document. this may only be needed for TS client generation with OAS3 swagger definitions. Declaration public static void MarkNonNullablePropsAsRequired(this AspNetCoreOpenApiDocumentGeneratorSettings x) Parameters Type Name Description AspNetCoreOpenApiDocumentGeneratorSettings x SwaggerDocument(IServiceCollection, Action<DocumentOptions>?) enable support for FastEndpoints and create a swagger document. Declaration public static IServiceCollection SwaggerDocument(this IServiceCollection services, Action<DocumentOptions>? options = null) Parameters Type Name Description IServiceCollection services Action<DocumentOptions> options swagger document configuration options Returns Type Description IServiceCollection UseSwaggerGen(IApplicationBuilder, Action<OpenApiDocumentMiddlewareSettings>?, Action<SwaggerUiSettings>?) enables the open-api/swagger middleware for fastendpoints. this method is simply a shortcut for the two calls [app.UseOpenApi()] and [app.UseSwaggerUi3(c => c.ConfigureDefaults())] Declaration public static IApplicationBuilder UseSwaggerGen(this IApplicationBuilder app, Action<OpenApiDocumentMiddlewareSettings>? config = null, Action<SwaggerUiSettings>? uiConfig = null) Parameters Type Name Description IApplicationBuilder app Action<OpenApiDocumentMiddlewareSettings> config optional config action for the open-api middleware Action<SwaggerUiSettings> uiConfig optional config action for the swagger-ui Returns Type Description IApplicationBuilder"
  },
  "api/FastEndpoints.Swagger.GlobalConfig.html": {
    "href": "api/FastEndpoints.Swagger.GlobalConfig.html",
    "title": "Class GlobalConfig | FastEndpoints",
    "keywords": "Class GlobalConfig gives access to the fastendpoints global configuration settings Inheritance object GlobalConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Swagger Assembly: FastEndpoints.Swagger.dll Syntax public static class GlobalConfig Properties EndpointRoutePrefix prefix for all routes (example 'api'). Declaration public static string? EndpointRoutePrefix { get; } Property Value Type Description string VersioningPrefix the prefix used in front of the version (for example 'v' produces 'v{version}'). Declaration public static string? VersioningPrefix { get; } Property Value Type Description string"
  },
  "api/FastEndpoints.Swagger.TagCase.html": {
    "href": "api/FastEndpoints.Swagger.TagCase.html",
    "title": "Enum TagCase | FastEndpoints",
    "keywords": "Enum TagCase enum values for swagger tag naming strategy Namespace: FastEndpoints.Swagger Assembly: FastEndpoints.Swagger.dll Syntax public enum TagCase Fields Name Description LowerCase None TitleCase"
  },
  "api/FastEndpoints.Swagger.html": {
    "href": "api/FastEndpoints.Swagger.html",
    "title": "Namespace FastEndpoints.Swagger | FastEndpoints",
    "keywords": "Namespace FastEndpoints.Swagger Classes DocumentOptions options for the swagger document Extensions a set of extension methods for adding swagger support GlobalConfig gives access to the fastendpoints global configuration settings Enums TagCase enum values for swagger tag naming strategy"
  },
  "api/FastEndpoints.TestResult-1.html": {
    "href": "api/FastEndpoints.TestResult-1.html",
    "title": "Class TestResult<TResponse> | FastEndpoints",
    "keywords": "Class TestResult<TResponse> a record encapsulating the http response as well as the resulting dto of a test execution Inheritance object TestResult<TResponse> Implements IEquatable<TestResult<TResponse>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed record TestResult<TResponse> : IEquatable<TestResult<TResponse>> Type Parameters Name Description TResponse the type of the response dto Constructors TestResult(HttpResponseMessage, TResponse) a record encapsulating the http response as well as the resulting dto of a test execution Declaration public TestResult(HttpResponseMessage Response, TResponse Result) Parameters Type Name Description HttpResponseMessage Response http response message object TResponse Result the resulting dto object Properties Response http response message object Declaration public HttpResponseMessage Response { get; init; } Property Value Type Description HttpResponseMessage Result the resulting dto object Declaration public TResponse Result { get; init; } Property Value Type Description TResponse Implements IEquatable<T>"
  },
  "api/FastEndpoints.Testing.BaseFixture.html": {
    "href": "api/FastEndpoints.Testing.BaseFixture.html",
    "title": "Class BaseFixture | FastEndpoints",
    "keywords": "Class BaseFixture Inheritance object BaseFixture TestFixture<TProgram> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Testing Assembly: FastEndpoints.Testing.dll Syntax public abstract class BaseFixture Fields AppCache Declaration protected static readonly ConcurrentDictionary<Type, object> AppCache Field Value Type Description ConcurrentDictionary<Type, object> _faker Declaration protected static readonly Faker _faker Field Value Type Description Faker"
  },
  "api/FastEndpoints.Testing.IFixture.html": {
    "href": "api/FastEndpoints.Testing.IFixture.html",
    "title": "Interface IFixture | FastEndpoints",
    "keywords": "Interface IFixture marker interface for TestFixture<TProgram> implementations Namespace: FastEndpoints.Testing Assembly: FastEndpoints.Testing.dll Syntax public interface IFixture Properties Fake bogus data generator Declaration Faker Fake { get; } Property Value Type Description Faker"
  },
  "api/FastEndpoints.Testing.TestClass-1.html": {
    "href": "api/FastEndpoints.Testing.TestClass-1.html",
    "title": "Class TestClass<TFixture> | FastEndpoints",
    "keywords": "Class TestClass<TFixture> abstract class for implementing a test-class, which is a collection of integration tests that may be related to each other. test methods can be run in a given order by decorating the methods with Xunit.Priority.PriorityAttribute Inheritance object TestClass<TFixture> Implements IClassFixture<TFixture> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Testing Assembly: FastEndpoints.Testing.dll Syntax [TestCaseOrderer(\"Xunit.Priority.PriorityOrderer\", \"Xunit.Priority\")] public abstract class TestClass<TFixture> : IClassFixture<TFixture> where TFixture : class, IFixture Type Parameters Name Description TFixture the type of the test fixture. a fixture is a shared data context for all tests of this class. the fixture is instantiated before any of the tests are executed and torn down after all tests have run. fixtures are implemented by inheriting TestFixture<TProgram> abstract class. Constructors TestClass(TFixture, ITestOutputHelper) Declaration protected TestClass(TFixture f, ITestOutputHelper o) Parameters Type Name Description TFixture f ITestOutputHelper o Properties Fake bogus data generator Declaration protected Faker Fake { get; } Property Value Type Description Faker Fixture fixture data that is shared among all tests of this class Declaration protected TFixture Fixture { get; init; } Property Value Type Description TFixture Fx fixture data that is shared among all tests of this class Declaration protected TFixture Fx { get; } Property Value Type Description TFixture Output xUnit test output helper Declaration protected ITestOutputHelper Output { get; init; } Property Value Type Description ITestOutputHelper Implements Xunit.IClassFixture<TFixture>"
  },
  "api/FastEndpoints.Testing.TestFixture-1.html": {
    "href": "api/FastEndpoints.Testing.TestFixture-1.html",
    "title": "Class TestFixture<TProgram> | FastEndpoints",
    "keywords": "Class TestFixture<TProgram> inherit this class to create a class fixture for an implementation of TestClass<TFixture>. Inheritance object BaseFixture TestFixture<TProgram> Implements IAsyncLifetime IFixture Inherited Members BaseFixture._faker BaseFixture.AppCache object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints.Testing Assembly: FastEndpoints.Testing.dll Syntax public abstract class TestFixture<TProgram> : BaseFixture, IAsyncLifetime, IFixture where TProgram : class Type Parameters Name Description TProgram the type of the web application to bootstrap via WebApplicationFactory<TEntryPoint> Constructors TestFixture(IMessageSink) Declaration protected TestFixture(IMessageSink s) Parameters Type Name Description IMessageSink s Properties Client the default http client Declaration public HttpClient Client { get; set; } Property Value Type Description HttpClient Fake bogus data generator Declaration public Faker Fake { get; } Property Value Type Description Faker Server the test server of the underlying WebApplicationFactory<TEntryPoint> Declaration public TestServer Server { get; } Property Value Type Description TestServer Services the service provider of the bootstrapped web application Declaration public IServiceProvider Services { get; } Property Value Type Description IServiceProvider Methods ConfigureApp(IWebHostBuilder) override this method if you'd like to provide any configuration for the web host of the underlying WebApplicationFactory<TEntryPoint> /> Declaration protected virtual void ConfigureApp(IWebHostBuilder a) Parameters Type Name Description IWebHostBuilder a ConfigureServices(IServiceCollection) override this method if you'd like to override (remove/replace) any services registered in the underlying web application's DI container. Declaration protected virtual void ConfigureServices(IServiceCollection s) Parameters Type Name Description IServiceCollection s CreateClient(WebApplicationFactoryClientOptions?) create a client for the underlying web application Declaration public HttpClient CreateClient(WebApplicationFactoryClientOptions? o = null) Parameters Type Name Description WebApplicationFactoryClientOptions o optional client options for the WAF Returns Type Description HttpClient CreateClient(Action<HttpClient>, WebApplicationFactoryClientOptions?) create a client for the underlying web application Declaration public HttpClient CreateClient(Action<HttpClient> c, WebApplicationFactoryClientOptions? o = null) Parameters Type Name Description Action<HttpClient> c configuration action for the client WebApplicationFactoryClientOptions o optional client options for the WAF Returns Type Description HttpClient CreateHandler() create a http message handler for the underlying web host/test server Declaration public HttpMessageHandler CreateHandler() Returns Type Description HttpMessageHandler DisposeAsync() Called when an object is no longer needed. Called just before Dispose() if the class also implements that. Declaration public virtual Task DisposeAsync() Returns Type Description Task InitializeAsync() Called immediately after the class has been created, before it is used. Declaration public Task InitializeAsync() Returns Type Description Task SetupAsync() override this method if you'd like to do some one-time setup for the test-class. it is run before any of the test-methods of the class is executed. Declaration protected virtual Task SetupAsync() Returns Type Description Task TearDownAsync() override this method if you'd like to do some one-time teardown for the test-class. it is run after all test-methods have executed. Declaration protected virtual Task TearDownAsync() Returns Type Description Task Implements Xunit.IAsyncLifetime IFixture"
  },
  "api/FastEndpoints.Testing.html": {
    "href": "api/FastEndpoints.Testing.html",
    "title": "Namespace FastEndpoints.Testing | FastEndpoints",
    "keywords": "Namespace FastEndpoints.Testing Classes BaseFixture TestClass<TFixture> abstract class for implementing a test-class, which is a collection of integration tests that may be related to each other. test methods can be run in a given order by decorating the methods with Xunit.Priority.PriorityAttribute TestFixture<TProgram> inherit this class to create a class fixture for an implementation of TestClass<TFixture>. Interfaces IFixture marker interface for TestFixture<TProgram> implementations"
  },
  "api/FastEndpoints.TestingExtensions.html": {
    "href": "api/FastEndpoints.TestingExtensions.html",
    "title": "Class TestingExtensions | FastEndpoints",
    "keywords": "Class TestingExtensions extension methods for registering fake/test/mock command and event handlers for integration testing Inheritance object TestingExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public static class TestingExtensions Methods RegisterTestCommandHandler<TCommand, THandler>(IServiceCollection) register test/fake/mock command handlers for integration testing commands that don't return a result Declaration public static void RegisterTestCommandHandler<TCommand, THandler>(this IServiceCollection s) where TCommand : ICommand where THandler : class, ICommandHandler<TCommand> Parameters Type Name Description IServiceCollection s Type Parameters Name Description TCommand the type of the command model to register a test handler for THandler the type of the test command handler RegisterTestCommandHandler<TCommand, THandler, TResult>(IServiceCollection) register test/fake/mock command handlers for integration testing commands that returns a result Declaration public static void RegisterTestCommandHandler<TCommand, THandler, TResult>(this IServiceCollection s) where TCommand : ICommand<TResult> where THandler : class, ICommandHandler<TCommand, TResult> Parameters Type Name Description IServiceCollection s Type Parameters Name Description TCommand the type of the command model to register a test handler for THandler the type of the test command handler TResult the type of the result RegisterTestEventHandler<TEvent, THandler>(IServiceCollection) register test/fake/mock event handlers for integration testing events Declaration public static void RegisterTestEventHandler<TEvent, THandler>(this IServiceCollection s) where TEvent : IEvent where THandler : class, IEventHandler<TEvent> Parameters Type Name Description IServiceCollection s Type Parameters Name Description TEvent the type of the event model to register a test handler for THandler the type of the test event handler"
  },
  "api/FastEndpoints.ThrottleAttribute.html": {
    "href": "api/FastEndpoints.ThrottleAttribute.html",
    "title": "Class ThrottleAttribute | FastEndpoints",
    "keywords": "Class ThrottleAttribute rate limit requests to this endpoint based on a request http header sent by the client. Inheritance object Attribute ThrottleAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.Attributes.dll Syntax [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public sealed class ThrottleAttribute : Attribute Constructors ThrottleAttribute(int, double, string?) rate limit requests to this endpoint based on a request http header sent by the client. Declaration public ThrottleAttribute(int hitLimit, double durationSeconds, string? headerName = null) Parameters Type Name Description int hitLimit how many requests are allowed within the given duration double durationSeconds the frequency in seconds where the accrued hit count should be reset string headerName the name of the request header used to uniquely identify clients. header name can also be configured globally using app.UseFastEndpoints(c=> c.ThrottleOptions...) not specifying a header name will first look for 'X-Forwarded-For' header and if not present, will use HttpContext.Connection.RemoteIpAddress. Properties DurationSeconds the frequency in seconds where the accrued hit count should be reset Declaration public double DurationSeconds { get; set; } Property Value Type Description double HeaderName the name of the request header used to uniquely identify clients. header name can also be configured globally using app.UseFastEndpoints(c=> c.Throttle...) not specifying a header name will first look for 'X-Forwarded-For' header and if not present, will use HttpContext.Connection.RemoteIpAddress. Declaration public string? HeaderName { get; set; } Property Value Type Description string HitLimit how many requests are allowed within the given duration Declaration public int HitLimit { get; set; } Property Value Type Description int"
  },
  "api/FastEndpoints.ThrottleOptions.html": {
    "href": "api/FastEndpoints.ThrottleOptions.html",
    "title": "Class ThrottleOptions | FastEndpoints",
    "keywords": "Class ThrottleOptions global settings for throttling Inheritance object ThrottleOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class ThrottleOptions Properties HeaderName header used to track rate limits Declaration public string? HeaderName { set; } Property Value Type Description string Message custom error response message for throttled requests Declaration public string? Message { set; } Property Value Type Description string"
  },
  "api/FastEndpoints.UserPrivileges.html": {
    "href": "api/FastEndpoints.UserPrivileges.html",
    "title": "Class UserPrivileges | FastEndpoints",
    "keywords": "Class UserPrivileges the priviledges of the user which will be embedded in the jwt or cookie Inheritance object UserPrivileges Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class UserPrivileges Properties Claims claims of the user Declaration public List<Claim> Claims { get; } Property Value Type Description List<Claim> this[string] shortcut for adding a new Claim to the claim list for the given claim type and value Declaration public string this[string claimType] { set; } Parameters Type Name Description string claimType the claim type to add Property Value Type Description string Permissions allowed permissions for the user Declaration public List<string> Permissions { get; } Property Value Type Description List<string> Roles roles of the user Declaration public List<string> Roles { get; } Property Value Type Description List<string>"
  },
  "api/FastEndpoints.ValidationContext-1.html": {
    "href": "api/FastEndpoints.ValidationContext-1.html",
    "title": "Class ValidationContext<T> | FastEndpoints",
    "keywords": "Class ValidationContext<T> Inheritance object ValidationContext ValidationContext<T> CommandHandlerBase<TCommand> Inherited Members ValidationContext.ValidationFailures ValidationContext.ValidationFailed ValidationContext.AddError(ValidationFailure) ValidationContext.AddError(string, string, Severity) ValidationContext.ThrowError(ValidationFailure, int?) ValidationContext.ThrowError(string, int?) ValidationContext.ThrowIfAnyErrors(int?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public class ValidationContext<T> : ValidationContext Type Parameters Name Description T Properties Instance Declaration public static ValidationContext<T> Instance { get; } Property Value Type Description ValidationContext<T> Methods AddError(Expression<Func<T, object?>>, string, string?, Severity) adds an error message for the specified property of the request dto Declaration public void AddError(Expression<Func<T, object?>> property, string errorMessage, string? errorCode = null, Severity severity = Severity.Error) Parameters Type Name Description Expression<Func<T, object>> property the property to add the error message for string errorMessage the error message string errorCode the error code associated with the error Severity severity the severity of the error ThrowError(Expression<Func<T, object?>>, string, int?) adds an error message for the specified property of the request dto and sends back a 400 bad request with error details immediately interrupting handler execution flow. no execution will continue past this call. Declaration public void ThrowError(Expression<Func<T, object?>> property, string errorMessage, int? statusCode = null) Parameters Type Name Description Expression<Func<T, object>> property the property to add the error message for string errorMessage the error message int? statusCode an optional status code to be used when building the error response"
  },
  "api/FastEndpoints.ValidationContext.html": {
    "href": "api/FastEndpoints.ValidationContext.html",
    "title": "Class ValidationContext | FastEndpoints",
    "keywords": "Class ValidationContext provides a way to manipulate the validation failures of the current endpoint context. call Instance to obtain an instance of the current validation context. Inheritance object ValidationContext ValidationContext<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public class ValidationContext Properties Instance Declaration public static ValidationContext Instance { get; } Property Value Type Description ValidationContext ValidationFailed Declaration public bool ValidationFailed { get; } Property Value Type Description bool ValidationFailures Declaration public List<ValidationFailure> ValidationFailures { get; } Property Value Type Description List<ValidationFailure> Methods AddError(ValidationFailure) Declaration public void AddError(ValidationFailure failure) Parameters Type Name Description ValidationFailure failure AddError(string, string?, Severity) Declaration public void AddError(string message, string? errorCode = null, Severity severity = Severity.Error) Parameters Type Name Description string message string errorCode Severity severity ThrowError(ValidationFailure, int?) Declaration public void ThrowError(ValidationFailure failure, int? statusCode = null) Parameters Type Name Description ValidationFailure failure int? statusCode ThrowError(string, int?) Declaration public void ThrowError(string message, int? statusCode = null) Parameters Type Name Description string message int? statusCode ThrowIfAnyErrors(int?) Declaration public void ThrowIfAnyErrors(int? statusCode = null) Parameters Type Name Description int? statusCode"
  },
  "api/FastEndpoints.ValidationFailureException.html": {
    "href": "api/FastEndpoints.ValidationFailureException.html",
    "title": "Class ValidationFailureException | FastEndpoints",
    "keywords": "Class ValidationFailureException the exception thrown when validation failure occurs. inspect the Failures property for details. Inheritance object Exception ValidationFailureException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class ValidationFailureException : Exception, ISerializable Constructors ValidationFailureException() Declaration public ValidationFailureException() ValidationFailureException(IEnumerable<ValidationFailure>, string) Declaration public ValidationFailureException(IEnumerable<ValidationFailure> failures, string message) Parameters Type Name Description IEnumerable<ValidationFailure> failures string message ValidationFailureException(string?) Declaration public ValidationFailureException(string? message) Parameters Type Name Description string message ValidationFailureException(string?, Exception?) Declaration public ValidationFailureException(string? message, Exception? innerException) Parameters Type Name Description string message Exception innerException Properties Failures the collection of failures that have occured. Declaration public IEnumerable<ValidationFailure>? Failures { get; init; } Property Value Type Description IEnumerable<ValidationFailure> StatusCode the status code to be used when building the error response. Declaration public int? StatusCode { get; } Property Value Type Description int? Implements ISerializable"
  },
  "api/FastEndpoints.ValidationOptions.html": {
    "href": "api/FastEndpoints.ValidationOptions.html",
    "title": "Class ValidationOptions | FastEndpoints",
    "keywords": "Class ValidationOptions validation related options Inheritance object ValidationOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class ValidationOptions Properties EnableDataAnnotationsSupport set this property to true if you'd like to enable support for System.ComponentModel.DataAnnotations attributes for basic validation. Declaration public bool EnableDataAnnotationsSupport { set; } Property Value Type Description bool"
  },
  "api/FastEndpoints.Validator-1.html": {
    "href": "api/FastEndpoints.Validator-1.html",
    "title": "Class Validator<TRequest> | FastEndpoints",
    "keywords": "Class Validator<TRequest> inherit from this base class to define your dto validators HINT: validators are registered as singletons. i.e. the same validator instance is used to validate each request for best performance. hance, do not maintain state in your validators. Inheritance object AbstractValidator<TRequest> Validator<TRequest> Implements IValidator<TRequest> IValidator IEnumerable<IValidationRule> IEnumerable IServiceResolverBase Inherited Members AbstractValidator<TRequest>.Validate(TRequest) AbstractValidator<TRequest>.ValidateAsync(TRequest, CancellationToken) AbstractValidator<TRequest>.Validate(ValidationContext<TRequest>) AbstractValidator<TRequest>.ValidateAsync(ValidationContext<TRequest>, CancellationToken) AbstractValidator<TRequest>.CreateDescriptor() AbstractValidator<TRequest>.RuleFor<TProperty>(Expression<Func<TRequest, TProperty>>) AbstractValidator<TRequest>.Transform<TProperty, TTransformed>(Expression<Func<TRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<TRequest>.Transform<TProperty, TTransformed>(Expression<Func<TRequest, TProperty>>, Func<TRequest, TProperty, TTransformed>) AbstractValidator<TRequest>.RuleForEach<TElement>(Expression<Func<TRequest, IEnumerable<TElement>>>) AbstractValidator<TRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<TRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<TRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<TRequest, IEnumerable<TElement>>>, Func<TRequest, TElement, TTransformed>) AbstractValidator<TRequest>.RuleSet(string, Action) AbstractValidator<TRequest>.When(Func<TRequest, bool>, Action) AbstractValidator<TRequest>.When(Func<TRequest, ValidationContext<TRequest>, bool>, Action) AbstractValidator<TRequest>.Unless(Func<TRequest, bool>, Action) AbstractValidator<TRequest>.Unless(Func<TRequest, ValidationContext<TRequest>, bool>, Action) AbstractValidator<TRequest>.WhenAsync(Func<TRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<TRequest>.WhenAsync(Func<TRequest, ValidationContext<TRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<TRequest>.UnlessAsync(Func<TRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<TRequest>.UnlessAsync(Func<TRequest, ValidationContext<TRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<TRequest>.Include(IValidator<TRequest>) AbstractValidator<TRequest>.Include<TValidator>(Func<TRequest, TValidator>) AbstractValidator<TRequest>.GetEnumerator() AbstractValidator<TRequest>.EnsureInstanceNotNull(object) AbstractValidator<TRequest>.RaiseValidationException(ValidationContext<TRequest>, ValidationResult) AbstractValidator<TRequest>.OnRuleAdded(IValidationRule<TRequest>) AbstractValidator<TRequest>.CascadeMode AbstractValidator<TRequest>.ClassLevelCascadeMode AbstractValidator<TRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public abstract class Validator<TRequest> : AbstractValidator<TRequest>, IValidator<TRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable, IServiceResolverBase where TRequest : class Type Parameters Name Description TRequest the type of the request dto Methods CreateScope() if you'd like to resolve scoped or transient services from the MS DI container, obtain a service scope from this method and dispose the scope when the work is complete. using var scope = CreateScope(); var scopedService = scope.Resolve<MyService>(); Declaration public IServiceScope CreateScope() Returns Type Description IServiceScope PreValidate(ValidationContext<TRequest>, ValidationResult) Determines if validation should occur and provides a means to modify the context and ValidationResult prior to execution. If this method returns false, then the ValidationResult is immediately returned from Validate/ValidateAsync. Declaration protected override bool PreValidate(ValidationContext<TRequest> context, ValidationResult result) Parameters Type Name Description ValidationContext<TRequest> context ValidationResult result Returns Type Description bool Overrides FluentValidation.AbstractValidator<TRequest>.PreValidate(FluentValidation.ValidationContext<TRequest>, FluentValidation.Results.ValidationResult) Resolve(Type) resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public object Resolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved Resolve<TService>() resolve an instance for the given type from the dependency injection container. will throw if unresolvable. Declaration public TService Resolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Exceptions Type Condition InvalidOperationException Thrown if requested service cannot be resolved TryResolve(Type) try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public object? TryResolve(Type typeOfService) Parameters Type Name Description Type typeOfService the type of the service to resolve Returns Type Description object TryResolve<TService>() try to resolve an instance for the given type from the dependency injection container. will return null if unresolvable. Declaration public TService? TryResolve<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService the type of the service to resolve Implements FluentValidation.IValidator<T> FluentValidation.IValidator IEnumerable<T> IEnumerable IServiceResolverBase"
  },
  "api/FastEndpoints.VersioningOptions.html": {
    "href": "api/FastEndpoints.VersioningOptions.html",
    "title": "Class VersioningOptions | FastEndpoints",
    "keywords": "Class VersioningOptions global endpoint versioning options Inheritance object VersioningOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: FastEndpoints Assembly: FastEndpoints.dll Syntax public sealed class VersioningOptions Properties DefaultVersion this value will be used on endpoints that does not specify a version Declaration public int DefaultVersion { set; } Property Value Type Description int Prefix the prefix used in front of the version (for example 'v' produces 'v{version}'). Declaration public string? Prefix { set; } Property Value Type Description string PrependToRoute set to true if you'd like to prefix the version to the route instead of being suffixed which is the default Declaration public bool? PrependToRoute { set; } Property Value Type Description bool?"
  },
  "api/FastEndpoints.html": {
    "href": "api/FastEndpoints.html",
    "title": "Namespace FastEndpoints | FastEndpoints",
    "keywords": "Namespace FastEndpoints Classes BaseEndpoint the base class all fast endpoints inherit from BindFromAttribute use this attribute to specify the name of route param, query param, or form field if it's different from the name of the property being bound to. BindingOptions request binding options CommandExtensions CommandHandlerBase<TCommand> the base class from which all CommandHandler<TCommand> classes inherit from CommandHandler<TCommand> inherit this base class if you'd like to manipulate validation state of the calling endpoint from within the command handler. CommandHandler<TCommand, TResult> inherit this base class if you'd like to manipulate validation state of the calling endpoint from within the command handler. Config global configuration settings for FastEndpoints DontInjectAttribute endpoint properties marked with this attribute will disable property injection for that property DontRegisterAttribute classes marked with this attribute will be skipped during assembly scanning for auto registration EmptyObject EndpointDefinition represents the configuration settings of an endpoint EndpointDiscoveryOptions defines how endpoint discovery and registration should be done at startup EndpointFactory the default endpoint factory. it creates an instance of the endpoint and injects both constructor and property dependencies. EndpointOptions endpoint registration options EndpointSummary a class used for providing a textual description about an endpoint for swagger EndpointSummary<TRequest> a class used for providing a textual description about an endpoint for swagger EndpointWithMapper<TRequest, TMapper> use this base class for defining endpoints that only use a request dto and don't use a response dto but uses a request mapper. EndpointWithMapping<TRequest, TResponse, TEntity> use this base class for defining endpoints that use both request and response dtos as well as require mapping to and from a domain entity. EndpointWithoutRequest use this base class for defining endpoints that doesn't need a request dto. usually used for routes that doesn't have any parameters. EndpointWithoutRequest<TResponse> use this base class for defining endpoints that doesn't need a request dto but return a response dto. EndpointWithoutRequest<TResponse, TMapper> use this base class for defining endpoints that doesn't need a request dto but return a response dto and uses a response mapper. Endpoint<TRequest> use this base class for defining endpoints that only use a request dto and don't use a response dto. Endpoint<TRequest, TResponse> use this base class for defining endpoints that use both request and response dtos. Endpoint<TRequest, TResponse, TMapper> use this base class for defining endpoints that use both request and response dtos as well as require mapping to and from a domain entity using a seperate entity mapper. EpVersion represents an endpoint version ErrorOptions error response customization settings ErrorResponse the dto used to send an error response to the client EventBase base class for the event bus EventBus<TEvent> event notification bus which uses an in-process pub/sub messaging system EventExtensions EventHubExceptionReceiver inherit this class and override it's methods in order to receive event hub exceptions. EventHubExceptionReceiverExtensions ExceptionHandlerExtensions extensions for global exception handling Factory a factory for instantiating endpoints/event/mappers/validators/etc. for testing purposes FromAttribute properties decorated with this attribute will have their values auto bound from the relevant claim of the current user principal. this is a shorter alias for the [FromClaim] attribute. FromBodyAttribute properties decorated with this attribute will have their values auto bound from the incoming request's json body. HINT: no other binding sources will be used for binding that property. FromClaimAttribute properties decorated with this attribute will have their values auto bound from the relevant claim of the current user principal FromHeaderAttribute properties decorated with this attribute will have their values auto bound from the relevant http header of the current request. FromQueryParamsAttribute properties decorated with this attribute will be bound by obtaining the values from query string parameters with matching names. WARNING: valid only on complex types with at least one public property. only one dto property can be decorated with this attribute. GlobalPostProcessor<TState> inherit this class to create a global post-processor with access to the common processor state of the endpoint GlobalPreProcessor<TState> inherit this class to create a global pre-processor with access to the common processor state of the endpoint Group common configuration for a group of endpoints can be specified by implementing this abstract class and calling Configure(string, Action<EndpointDefinition>) in the constructor. HandlerOptions<TStorageRecord, TStorageProvider> handler registration options HandlerServerExtensions handler server extensions HasPermissionAttribute boolean properties decorated with this attribute will have their values set to true if the current principal has the specified permission. HideFromDocsAttribute attribute used to mark classes that should be hidden from public api HttpAttribute base http attribute class HttpClientExtensions a set of extensions to the httpclient in order to facilitate route-less integration testing HttpContextExtensions HttpDeleteAttribute use this attribute to specify a DELETE route for an endpoint HttpGetAttribute use this attribute to specify a GET route for an endpoint HttpPatchAttribute use this attribute to specify a PATCH route for an endpoint HttpPostAttribute use this attribute to specify a POST route for an endpoint HttpPutAttribute use this attribute to specify a PUT route for an endpoint HttpResponseExtensions InMemoryEventHubStorage InMemoryEventQueue provides some global configuration options for the in-memory event queues InMemoryEventStorageRecord InternalErrorResponse the dto used to send an error response to the client when an unhandled exception occurs on the server JobQueueExtensions extension methods for job queues JobQueueOptions options for job queues MainExtensions provides extensions to easily bootstrap fastendpoints in the asp.net middleware pipeline Mapper<TRequest, TResponse, TEntity> use this base class to define domain entity mappers for your endpoints. HINT: entity mappers are used as singletons for performance reasons. do not maintain state in the mappers. MiddlewareExtensions PlainTextRequest use this dto if you need to model bind the raw content body of an incoming http request or you may implement the IPlainTextRequest interface on your own request dto. PostProcessorContext<TRequest, TResponse> represents the context for a post-processing operation with a request and response pair. PostProcessor<TRequest, TState, TResponse> inherit this class to create a post-processor with access to the common processor state of the endpoint. PreProcessorContext<TRequest> represents the context for a pre-processing operation with a request. PreProcessor<TRequest, TState> inherit this class to create a pre-processor with access to the common processor state of the endpoint ProblemDetails RFC7807 compatible problem details/ error response class. this can be used by configuring startup like so: app.UseFastEndpoints(x => x.Errors.ResponseBuilder = ProblemDetails.ResponseBuilder); ProblemDetails.Error the error details object QueryParamAttribute properties decorated with this attribute will have a corresponding request parameter added to the swagger schema RegisterServiceAttribute<TService> When using the 'FastEndpoints.Generator' package, any concrete class can be decorated with this attribute to source generate extension methods in the form of .RegisterServicesFrom{assembly-name}() which can be used to automatically register services with a single call per assembly. instead of multiple calls per each service you need registered in DI. specify the service type with the TService generic attribute argument. the service type would typically be an interface type. RemoteConnection represents a connection to a remote server that hosts command and event handlers RemoteConnectionExtensions client extension methods RequestBinder<TRequest> the default request binder for a given request dto type RequestMapper<TRequest, TEntity> use this base class to define a domain entity mapper for your endpoints that only has a request dto and no response dto. HINT: entity mappers are used as singletons for performance reasons. do not maintain state in the mappers. ResponseHeader describes a swagger response header for a certain response dto ResponseMapper<TResponse, TEntity> use this base class to define a domain entity mapper for your endpoints that only has a response dto and no request dto. HINT: entity mappers are used as singletons for performance reasons. do not maintain state in the mappers. RouteHandlerBuilderExtensions SecurityOptions global security options SerializerOptions serialization options for the endpoints ServiceScopeExtensions SubGroup<TParent> common configuration for a sub group of endpoints can be specified by implementing this abstract class and calling Configure(string, Action<EndpointDefinition>) in the constructor. SubscriberExceptionReceiver inherit this class and override it's methods in order to receive event subscriber exceptions. SubscriberExceptionReceiverExtensions Summary<TEndpoint> a class used for providing a textual description about an endpoint for swagger Summary<TEndpoint, TRequest> a class used for providing a textual description about an endpoint for swagger TestResult<TResponse> a record encapsulating the http response as well as the resulting dto of a test execution TestingExtensions extension methods for registering fake/test/mock command and event handlers for integration testing ThrottleAttribute rate limit requests to this endpoint based on a request http header sent by the client. ThrottleOptions global settings for throttling UserPrivileges the priviledges of the user which will be embedded in the jwt or cookie ValidationContext provides a way to manipulate the validation failures of the current endpoint context. call Instance to obtain an instance of the current validation context. ValidationContext<T> ValidationFailureException the exception thrown when validation failure occurs. inspect the Failures property for details. ValidationOptions validation related options Validator<TRequest> inherit from this base class to define your dto validators HINT: validators are registered as singletons. i.e. the same validator instance is used to validate each request for best performance. hance, do not maintain state in your validators. VersioningOptions global endpoint versioning options Structs BinderContext binder context supplied to custom request binders. EmptyRequest a request dto that doesn't have any properties EmptyResponse a response dto that doesn't have any properties ParseResult dto used to hold the result of a value parsing operation PendingJobSearchParams<TStorageRecord> a dto representing search parameters for pending job storage record retrieval PendingRecordSearchParams<TStorageRecord> a dto representing search parameters for pending event storage record retrieval StaleJobSearchParams<TStorageRecord> a dto representing search parameters for matching stale job storage records StaleRecordSearchParams<TStorageRecord> a dto representing search parameters for matching stale event storage records SubscriberIDRestorationParams<TStorageRecord> parameters to use in finding subscriber IDs to restore Interfaces IClientStreamCommandHandler<T, TResult> interface to be implemented by a command handler for a stream of T that returns a single TResult. ICommand interface for a command that does not return anything ICommandHandler marker interface for all command handlers ICommandHandler<TCommand> interface to be implemented by a command handler for a given command type that does not return a result ICommandHandler<TCommand, TResult> interface to be implemented by a command handler for a given command type that returns a result ICommand<TResult> interface for a command that returns a TResult IEndpoint the common interface implemented by all endpoints IEndpointFactory interface for the creation of endpoints. IEvent marker interface for an event model IEventBus interface to be implemented by an event bus IEventHandler marker interface for all event handlers IEventHandler<TEvent> interface to be implemented by event handlers IEventHubStorageProvider<TStorageRecord> interface for implementing a storage provider for event hub app (gRPC server) IEventStorageRecord interface for implementing an event storage record that encapsulates/embeds an event (IEvent) IEventSubscriberStorageProvider<TStorageRecord> interface for implementing a storage provider for an event subscription client app (gRPC client) IGlobalPostProcessor interface for defining global post-processors to be executed after the main endpoint handler is done IGlobalPreProcessor interface for defining global pre-processors to be executed before the main endpoint handler is called IHasMapper marker interface for endpoints that has a mapper IHasMapper<TMapper> marker/constraint for endpoints that have a mapper generic argument IJobStorageProvider<TStorageRecord> interface for defining the contract of a job storage provider IJobStorageRecord IMapper marker interface for entity mappers IPlainTextRequest implement this interface on your request dto if you need to model bind the raw content body of an incoming http request IPostProcessor defines the interface for a post-processor that can perform asynchronous post-processing tasks after a request has been handled. IPostProcessorContext defines the basic interface for a post-processor context, containing essential properties to access request, response, and associated processing details. IPostProcessorContext<TRequest, TResponse> defines the generic interface for a post-processor context with specific types for the request and response. IPostProcessor<TRequest, TResponse> defines the generic interface for a post-processor with specific types for the request and response, enabling type-safe post-processing. IPreProcessor defines the interface for a pre-processor that can perform asynchronous pre-processing tasks before a request has been handled. IPreProcessorContext defines the basic interface for a pre-processor context, containing essential properties to access request, and associated processing details. IPreProcessorContext<TRequest> defines the generic interface for a pre-processor context with a specific type for the request. IPreProcessor<TRequest> defines the generic interface for a pre-processor with specific types for the request, enabling type-safe pre-processing. IRequestBinder<TRequest> create custom request binders by implementing this interface. by registering a custom modelbinder for an endpoint will completely disable the built-in model binding and completely depend on your implementation of the custom binder to return a correctly populated request dto for the endpoint. IRequestMapper marker interface for request only mappers IResponseInterceptor interface for defining a response interceptor to be executed before the main endpoint handler executes IResponseMapper marker interface for response only mappers IServerStreamCommandHandler<TCommand, TResult> interface to be implemented by a command handler for a given command type that returns TResult stream IServerStreamCommand<TResult> interface for a command that returns a stream of TResult IServiceResolver interface used by fastendpoints for resolving services from the DI container. implement this interface and register the implementation in MS DI for customizing service resolving. IServiceResolverBase interface used by fastendpoints for resolving services from the DI container. implement this interface and register the implementation in MS DI for customizing service resolving. Enums Apply BindingSource enum for choosing which binding sources the default request binder should use Http enum for specifying a http verb HubMode enum for specifying which mode the event hub should be running in. LifeTime enum for selecting the DI service lifetime Mode enum for specifying the waiting mode for event notifications Order enum used to specify whether to execute global pre/post processors before endpoint level processors"
  },
  "api/NJsonSchema.Generation.SystemTextJsonUtilities.html": {
    "href": "api/NJsonSchema.Generation.SystemTextJsonUtilities.html",
    "title": "Class SystemTextJsonUtilities | FastEndpoints",
    "keywords": "Class SystemTextJsonUtilities Utility methods for dealing with System.Text.Json. Inheritance object SystemTextJsonUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NJsonSchema.Generation Assembly: FastEndpoints.Swagger.dll Syntax public static class SystemTextJsonUtilities Methods ConvertJsonOptionsToNewtonsoftSettings(dynamic) Converts System.Text.Json serializer options to Newtonsoft JSON settings. Declaration public static JsonSerializerSettings ConvertJsonOptionsToNewtonsoftSettings(dynamic serializerOptions) Parameters Type Name Description dynamic serializerOptions The options. Returns Type Description JsonSerializerSettings The settings."
  },
  "api/NJsonSchema.Generation.html": {
    "href": "api/NJsonSchema.Generation.html",
    "title": "Namespace NJsonSchema.Generation | FastEndpoints",
    "keywords": "Namespace NJsonSchema.Generation Classes SystemTextJsonUtilities Utility methods for dealing with System.Text.Json."
  },
  "index.html": {
    "href": "index.html",
    "title": "API REF Home | FastEndpoints",
    "keywords": "API Reference Documentation"
  }
}