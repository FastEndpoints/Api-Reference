### YamlMime:ManagedReference
items:
- uid: FastEndpoints.CommandExtensions
  commentId: T:FastEndpoints.CommandExtensions
  id: CommandExtensions
  parent: FastEndpoints
  children:
  - FastEndpoints.CommandExtensions.ExecuteAsync(FastEndpoints.ICommand,System.Threading.CancellationToken)
  - FastEndpoints.CommandExtensions.ExecuteAsync``1(FastEndpoints.ICommand{``0},System.Threading.CancellationToken)
  - FastEndpoints.CommandExtensions.RegisterForTesting``1(FastEndpoints.ICommandHandler{``0})
  - FastEndpoints.CommandExtensions.RegisterForTesting``2(FastEndpoints.ICommandHandler{``0,``1})
  langs:
  - csharp
  - vb
  name: CommandExtensions
  nameWithType: CommandExtensions
  fullName: FastEndpoints.CommandExtensions
  type: Class
  source:
    id: CommandExtensions
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Messaging\Commands\CommandExtensions.cs
    startLine: 2
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  syntax:
    content: public static class CommandExtensions
    content.vb: Public Module CommandExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: FastEndpoints.CommandExtensions.ExecuteAsync(FastEndpoints.ICommand,System.Threading.CancellationToken)
  commentId: M:FastEndpoints.CommandExtensions.ExecuteAsync(FastEndpoints.ICommand,System.Threading.CancellationToken)
  id: ExecuteAsync(FastEndpoints.ICommand,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: FastEndpoints.CommandExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync(ICommand, CancellationToken)
  nameWithType: CommandExtensions.ExecuteAsync(ICommand, CancellationToken)
  fullName: FastEndpoints.CommandExtensions.ExecuteAsync(FastEndpoints.ICommand, System.Threading.CancellationToken)
  type: Method
  source:
    id: ExecuteAsync
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Messaging\Commands\CommandExtensions.cs
    startLine: 14
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nexecutes the command that does not return a result\n"
  example: []
  syntax:
    content: public static Task ExecuteAsync(this ICommand command, CancellationToken ct = default(CancellationToken))
    parameters:
    - id: command
      type: FastEndpoints.ICommand
      description: the command to execute
    - id: ct
      type: System.Threading.CancellationToken
      description: optional cancellation token
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(command As ICommand, ct As CancellationToken = Nothing) As Task
  overload: FastEndpoints.CommandExtensions.ExecuteAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: thrown when a handler for the command cannot be instantiated
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: FastEndpoints.CommandExtensions.ExecuteAsync``1(FastEndpoints.ICommand{``0},System.Threading.CancellationToken)
  commentId: M:FastEndpoints.CommandExtensions.ExecuteAsync``1(FastEndpoints.ICommand{``0},System.Threading.CancellationToken)
  id: ExecuteAsync``1(FastEndpoints.ICommand{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: FastEndpoints.CommandExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TResult>(ICommand<TResult>, CancellationToken)
  nameWithType: CommandExtensions.ExecuteAsync<TResult>(ICommand<TResult>, CancellationToken)
  fullName: FastEndpoints.CommandExtensions.ExecuteAsync<TResult>(FastEndpoints.ICommand<TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ExecuteAsync
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Messaging\Commands\CommandExtensions.cs
    startLine: 39
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nexecutes the command and returns a result\n"
  example: []
  syntax:
    content: public static Task<TResult> ExecuteAsync<TResult>(this ICommand<TResult> command, CancellationToken ct = default(CancellationToken))
    parameters:
    - id: command
      type: FastEndpoints.ICommand{{TResult}}
      description: the command to execute
    - id: ct
      type: System.Threading.CancellationToken
      description: optional cancellation token
    typeParameters:
    - id: TResult
      description: the type of the returned result
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TResult)(command As ICommand(Of TResult), ct As CancellationToken = Nothing) As Task(Of TResult)
  overload: FastEndpoints.CommandExtensions.ExecuteAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: thrown when a handler for the command cannot be instantiated
  nameWithType.vb: CommandExtensions.ExecuteAsync(Of TResult)(ICommand(Of TResult), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: FastEndpoints.CommandExtensions.ExecuteAsync(Of TResult)(FastEndpoints.ICommand(Of TResult), System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TResult)(ICommand(Of TResult), CancellationToken)
- uid: FastEndpoints.CommandExtensions.RegisterForTesting``1(FastEndpoints.ICommandHandler{``0})
  commentId: M:FastEndpoints.CommandExtensions.RegisterForTesting``1(FastEndpoints.ICommandHandler{``0})
  id: RegisterForTesting``1(FastEndpoints.ICommandHandler{``0})
  isExtensionMethod: true
  parent: FastEndpoints.CommandExtensions
  langs:
  - csharp
  - vb
  name: RegisterForTesting<TCommand>(ICommandHandler<TCommand>)
  nameWithType: CommandExtensions.RegisterForTesting<TCommand>(ICommandHandler<TCommand>)
  fullName: FastEndpoints.CommandExtensions.RegisterForTesting<TCommand>(FastEndpoints.ICommandHandler<TCommand>)
  type: Method
  source:
    id: RegisterForTesting
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Messaging\Commands\CommandExtensions.cs
    startLine: 62
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nregisters a fake command handler for unit testing purposes\n"
  example: []
  syntax:
    content: >-
      public static void RegisterForTesting<TCommand>(this ICommandHandler<TCommand> handler)

          where TCommand : ICommand
    parameters:
    - id: handler
      type: FastEndpoints.ICommandHandler{{TCommand}}
      description: a fake handler instance
    typeParameters:
    - id: TCommand
      description: type of the command
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RegisterForTesting(Of TCommand As ICommand)(handler As ICommandHandler(Of TCommand))
  overload: FastEndpoints.CommandExtensions.RegisterForTesting*
  nameWithType.vb: CommandExtensions.RegisterForTesting(Of TCommand)(ICommandHandler(Of TCommand))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: FastEndpoints.CommandExtensions.RegisterForTesting(Of TCommand)(FastEndpoints.ICommandHandler(Of TCommand))
  name.vb: RegisterForTesting(Of TCommand)(ICommandHandler(Of TCommand))
- uid: FastEndpoints.CommandExtensions.RegisterForTesting``2(FastEndpoints.ICommandHandler{``0,``1})
  commentId: M:FastEndpoints.CommandExtensions.RegisterForTesting``2(FastEndpoints.ICommandHandler{``0,``1})
  id: RegisterForTesting``2(FastEndpoints.ICommandHandler{``0,``1})
  isExtensionMethod: true
  parent: FastEndpoints.CommandExtensions
  langs:
  - csharp
  - vb
  name: RegisterForTesting<TCommand, TResult>(ICommandHandler<TCommand, TResult>)
  nameWithType: CommandExtensions.RegisterForTesting<TCommand, TResult>(ICommandHandler<TCommand, TResult>)
  fullName: FastEndpoints.CommandExtensions.RegisterForTesting<TCommand, TResult>(FastEndpoints.ICommandHandler<TCommand, TResult>)
  type: Method
  source:
    id: RegisterForTesting
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Messaging\Commands\CommandExtensions.cs
    startLine: 78
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nregisters a fake command handler for unit testing purposes\n"
  example: []
  syntax:
    content: >-
      public static void RegisterForTesting<TCommand, TResult>(this ICommandHandler<TCommand, TResult> handler)

          where TCommand : ICommand<TResult>
    parameters:
    - id: handler
      type: FastEndpoints.ICommandHandler{{TCommand},{TResult}}
      description: a fake handler instance
    typeParameters:
    - id: TCommand
      description: type of the command
    - id: TResult
      description: type of the result being returned by the handler
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RegisterForTesting(Of TCommand As ICommand(Of TResult), TResult)(handler As ICommandHandler(Of TCommand, TResult))
  overload: FastEndpoints.CommandExtensions.RegisterForTesting*
  nameWithType.vb: CommandExtensions.RegisterForTesting(Of TCommand, TResult)(ICommandHandler(Of TCommand, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: FastEndpoints.CommandExtensions.RegisterForTesting(Of TCommand, TResult)(FastEndpoints.ICommandHandler(Of TCommand, TResult))
  name.vb: RegisterForTesting(Of TCommand, TResult)(ICommandHandler(Of TCommand, TResult))
references:
- uid: FastEndpoints
  commentId: N:FastEndpoints
  name: FastEndpoints
  nameWithType: FastEndpoints
  fullName: FastEndpoints
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: FastEndpoints.CommandExtensions.ExecuteAsync*
  commentId: Overload:FastEndpoints.CommandExtensions.ExecuteAsync
  name: ExecuteAsync
  nameWithType: CommandExtensions.ExecuteAsync
  fullName: FastEndpoints.CommandExtensions.ExecuteAsync
- uid: FastEndpoints.ICommand
  commentId: T:FastEndpoints.ICommand
  parent: FastEndpoints
  name: ICommand
  nameWithType: ICommand
  fullName: FastEndpoints.ICommand
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: FastEndpoints.ICommand{{TResult}}
  commentId: T:FastEndpoints.ICommand{``0}
  parent: FastEndpoints
  definition: FastEndpoints.ICommand`1
  name: ICommand<TResult>
  nameWithType: ICommand<TResult>
  fullName: FastEndpoints.ICommand<TResult>
  nameWithType.vb: ICommand(Of TResult)
  fullName.vb: FastEndpoints.ICommand(Of TResult)
  name.vb: ICommand(Of TResult)
  spec.csharp:
  - uid: FastEndpoints.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: FastEndpoints.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FastEndpoints.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: FastEndpoints.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints.ICommand`1
  commentId: T:FastEndpoints.ICommand`1
  name: ICommand<TResult>
  nameWithType: ICommand<TResult>
  fullName: FastEndpoints.ICommand<TResult>
  nameWithType.vb: ICommand(Of TResult)
  fullName.vb: FastEndpoints.ICommand(Of TResult)
  name.vb: ICommand(Of TResult)
  spec.csharp:
  - uid: FastEndpoints.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: FastEndpoints.ICommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FastEndpoints.ICommand`1
    name: ICommand
    nameWithType: ICommand
    fullName: FastEndpoints.ICommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints.CommandExtensions.RegisterForTesting*
  commentId: Overload:FastEndpoints.CommandExtensions.RegisterForTesting
  name: RegisterForTesting
  nameWithType: CommandExtensions.RegisterForTesting
  fullName: FastEndpoints.CommandExtensions.RegisterForTesting
- uid: FastEndpoints.ICommandHandler{{TCommand}}
  commentId: T:FastEndpoints.ICommandHandler{``0}
  parent: FastEndpoints
  definition: FastEndpoints.ICommandHandler`1
  name: ICommandHandler<TCommand>
  nameWithType: ICommandHandler<TCommand>
  fullName: FastEndpoints.ICommandHandler<TCommand>
  nameWithType.vb: ICommandHandler(Of TCommand)
  fullName.vb: FastEndpoints.ICommandHandler(Of TCommand)
  name.vb: ICommandHandler(Of TCommand)
  spec.csharp:
  - uid: FastEndpoints.ICommandHandler`1
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: FastEndpoints.ICommandHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FastEndpoints.ICommandHandler`1
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: FastEndpoints.ICommandHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints.ICommandHandler`1
  commentId: T:FastEndpoints.ICommandHandler`1
  name: ICommandHandler<TCommand>
  nameWithType: ICommandHandler<TCommand>
  fullName: FastEndpoints.ICommandHandler<TCommand>
  nameWithType.vb: ICommandHandler(Of TCommand)
  fullName.vb: FastEndpoints.ICommandHandler(Of TCommand)
  name.vb: ICommandHandler(Of TCommand)
  spec.csharp:
  - uid: FastEndpoints.ICommandHandler`1
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: FastEndpoints.ICommandHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FastEndpoints.ICommandHandler`1
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: FastEndpoints.ICommandHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints.ICommandHandler{{TCommand},{TResult}}
  commentId: T:FastEndpoints.ICommandHandler{``0,``1}
  parent: FastEndpoints
  definition: FastEndpoints.ICommandHandler`2
  name: ICommandHandler<TCommand, TResult>
  nameWithType: ICommandHandler<TCommand, TResult>
  fullName: FastEndpoints.ICommandHandler<TCommand, TResult>
  nameWithType.vb: ICommandHandler(Of TCommand, TResult)
  fullName.vb: FastEndpoints.ICommandHandler(Of TCommand, TResult)
  name.vb: ICommandHandler(Of TCommand, TResult)
  spec.csharp:
  - uid: FastEndpoints.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: FastEndpoints.ICommandHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FastEndpoints.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: FastEndpoints.ICommandHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints.ICommandHandler`2
  commentId: T:FastEndpoints.ICommandHandler`2
  name: ICommandHandler<TCommand, TResult>
  nameWithType: ICommandHandler<TCommand, TResult>
  fullName: FastEndpoints.ICommandHandler<TCommand, TResult>
  nameWithType.vb: ICommandHandler(Of TCommand, TResult)
  fullName.vb: FastEndpoints.ICommandHandler(Of TCommand, TResult)
  name.vb: ICommandHandler(Of TCommand, TResult)
  spec.csharp:
  - uid: FastEndpoints.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: FastEndpoints.ICommandHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FastEndpoints.ICommandHandler`2
    name: ICommandHandler
    nameWithType: ICommandHandler
    fullName: FastEndpoints.ICommandHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommand
    nameWithType: TCommand
    fullName: TCommand
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
