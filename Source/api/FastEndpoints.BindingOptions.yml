### YamlMime:ManagedReference
items:
- uid: FastEndpoints.BindingOptions
  commentId: T:FastEndpoints.BindingOptions
  id: BindingOptions
  parent: FastEndpoints
  children:
  - FastEndpoints.BindingOptions.Modifier
  - FastEndpoints.BindingOptions.ValueParserFor(Type,System.Nullable{Func{System.Object,FastEndpoints.ParseResult}})
  - FastEndpoints.BindingOptions.ValueParserFor``1(System.Nullable{Func{System.Object,FastEndpoints.ParseResult}})
  langs:
  - csharp
  - vb
  name: BindingOptions
  nameWithType: BindingOptions
  fullName: FastEndpoints.BindingOptions
  type: Class
  source:
    id: BindingOptions
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Config\BindingOptions.cs
    startLine: 6
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nrequest binding options\n"
  example: []
  syntax:
    content: public class BindingOptions
    content.vb: Public Class BindingOptions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: FastEndpoints.BindingOptions.Modifier
  commentId: F:FastEndpoints.BindingOptions.Modifier
  id: Modifier
  parent: FastEndpoints.BindingOptions
  langs:
  - csharp
  - vb
  name: Modifier
  nameWithType: BindingOptions.Modifier
  fullName: FastEndpoints.BindingOptions.Modifier
  type: Field
  source:
    id: Modifier
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Config\BindingOptions.cs
    startLine: 18
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nan optional action to be run after the endpoint level request binding has occured.\nit is intended as a way to perform common model binding logic that applies to all endpoints/requests.\nthe action is passed in the following arguments:\n<p><xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>: the request dto instance</p>\n<p><see cref=\"!:Type\"></see>: the type of the request dto</p>\n<p><xref href=\"FastEndpoints.BinderContext\" data-throw-if-not-resolved=\"false\"></xref>: the request binding context</p>\n<p><see cref=\"!:CancellationToken\"></see>: a cancellation token</p>\n<p>WARNING: be mindful of the performance cost of using reflection to modify the request dto object</p>\n"
  example: []
  syntax:
    content: public Action<object, Type, BinderContext, CancellationToken>? Modifier
    return:
      type: System.Nullable{Action{System.Object,Type,FastEndpoints.BinderContext,CancellationToken}}
    content.vb: Public Modifier As Action(Of Object, Type, BinderContext, CancellationToken)?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FastEndpoints.BindingOptions.ValueParserFor``1(System.Nullable{Func{System.Object,FastEndpoints.ParseResult}})
  commentId: M:FastEndpoints.BindingOptions.ValueParserFor``1(System.Nullable{Func{System.Object,FastEndpoints.ParseResult}})
  id: ValueParserFor``1(System.Nullable{Func{System.Object,FastEndpoints.ParseResult}})
  parent: FastEndpoints.BindingOptions
  langs:
  - csharp
  - vb
  name: ValueParserFor<T>(Nullable<Func<Object, ParseResult>>)
  nameWithType: BindingOptions.ValueParserFor<T>(Nullable<Func<Object, ParseResult>>)
  fullName: FastEndpoints.BindingOptions.ValueParserFor<T>(System.Nullable<Func<System.Object, FastEndpoints.ParseResult>>)
  type: Method
  source:
    id: ValueParserFor
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Config\BindingOptions.cs
    startLine: 45
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nadd a custom value parser function for any given type which the default model binder will use to parse values when model binding request dto properties from query/route/forms/headers/claims.\nthis is an alternative approach to adding a `TryParse()` function to your types that need model binding support from the abovementioned binding sources.\nonce you register a parser function here for a type, any `TryParse()` method on the type will not be used for parsing.\nalso, these parser functions do not apply to JSON deserialization done by STJ and can be considered the equivalent to registering a custom converter in STJ when it comes to query/route/forms/headers/claims binding sources.\n"
  example: []
  syntax:
    content: public bool ValueParserFor<T>(Func<object, ParseResult>? parser)
    parameters:
    - id: parser
      type: System.Nullable{Func{System.Object,FastEndpoints.ParseResult}}
      description: >
        a function that takes in a nullable object and returns a <xref href="FastEndpoints.ParseResult" data-throw-if-not-resolved="false"></xref> as the output.

        <pre><code>app.UseFastEndpoints(c =>

        {
           c.Binding.ValueParserFor&lt;Guid>(MyParsers.GuidParser);
        });


        public static class MyParsers

        {
           public static ParseResult GuidParser(object? input)
           {
               Guid result;
               bool success = Guid.TryParse(input?.ToString(), out result);
               return new(success, result);
           }
        }</code></pre>
    typeParameters:
    - id: T
      description: the type of the class which this parser function will target
    return:
      type: System.Boolean
    content.vb: Public Function ValueParserFor(Of T)(parser As Func(Of Object, ParseResult)?) As Boolean
  overload: FastEndpoints.BindingOptions.ValueParserFor*
  nameWithType.vb: BindingOptions.ValueParserFor(Of T)(Nullable(Of Func(Of Object, ParseResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.BindingOptions.ValueParserFor(Of T)(System.Nullable(Of Func(Of System.Object, FastEndpoints.ParseResult)))
  name.vb: ValueParserFor(Of T)(Nullable(Of Func(Of Object, ParseResult)))
- uid: FastEndpoints.BindingOptions.ValueParserFor(Type,System.Nullable{Func{System.Object,FastEndpoints.ParseResult}})
  commentId: M:FastEndpoints.BindingOptions.ValueParserFor(Type,System.Nullable{Func{System.Object,FastEndpoints.ParseResult}})
  id: ValueParserFor(Type,System.Nullable{Func{System.Object,FastEndpoints.ParseResult}})
  parent: FastEndpoints.BindingOptions
  langs:
  - csharp
  - vb
  name: ValueParserFor(Type, Nullable<Func<Object, ParseResult>>)
  nameWithType: BindingOptions.ValueParserFor(Type, Nullable<Func<Object, ParseResult>>)
  fullName: FastEndpoints.BindingOptions.ValueParserFor(Type, System.Nullable<Func<System.Object, FastEndpoints.ParseResult>>)
  type: Method
  source:
    id: ValueParserFor
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Config\BindingOptions.cs
    startLine: 73
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nadd a custom value parser function for any given type which the default model binder will use to parse values when model binding request dto properties from query/route/forms/headers/claims.\nthis is an alternative approach to adding a `TryParse()` function to your types that need model binding support from the abovementioned binding sources.\nonce you register a parser function here for a type, any `TryParse()` method on the type will not be used for parsing.\nalso, these parser functions do not apply to JSON deserialization done by STJ and can be considered the equivalent to registering a custom converter in STJ when it comes to query/route/forms/headers/claims binding sources.\n"
  example: []
  syntax:
    content: public bool ValueParserFor(Type type, Func<object, ParseResult>? parser)
    parameters:
    - id: type
      type: Type
      description: the type of the class which this parser function will target
    - id: parser
      type: System.Nullable{Func{System.Object,FastEndpoints.ParseResult}}
      description: >
        a function that takes in a nullable object and returns a <xref href="FastEndpoints.ParseResult" data-throw-if-not-resolved="false"></xref> as the output.

        <pre><code>app.UseFastEndpoints(c =>

        {
           c.Binding.ValueParserFor(typeof(Guid), MyParsers.GuidParser);
        });


        public static class MyParsers

        {
           public static ParseResult GuidParser(object? input)
           {
               Guid result;
               bool success = Guid.TryParse(input?.ToString(), out result);
               return new(success, result);
           }
        }</code></pre>
    return:
      type: System.Boolean
    content.vb: Public Function ValueParserFor(type As Type, parser As Func(Of Object, ParseResult)?) As Boolean
  overload: FastEndpoints.BindingOptions.ValueParserFor*
  nameWithType.vb: BindingOptions.ValueParserFor(Type, Nullable(Of Func(Of Object, ParseResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.BindingOptions.ValueParserFor(Type, System.Nullable(Of Func(Of System.Object, FastEndpoints.ParseResult)))
  name.vb: ValueParserFor(Type, Nullable(Of Func(Of Object, ParseResult)))
references:
- uid: FastEndpoints
  commentId: N:FastEndpoints
  name: FastEndpoints
  nameWithType: FastEndpoints
  fullName: FastEndpoints
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FastEndpoints.BinderContext
  commentId: T:FastEndpoints.BinderContext
  parent: FastEndpoints
  name: BinderContext
  nameWithType: BinderContext
  fullName: FastEndpoints.BinderContext
- uid: System.Nullable{Action{System.Object,Type,FastEndpoints.BinderContext,CancellationToken}}
  commentId: T:System.Nullable{Action{System.Object,Type,FastEndpoints.BinderContext,CancellationToken}}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Action<Object, Type, BinderContext, CancellationToken>>
  nameWithType: Nullable<Action<Object, Type, BinderContext, CancellationToken>>
  fullName: System.Nullable<Action<System.Object, Type, FastEndpoints.BinderContext, CancellationToken>>
  nameWithType.vb: Nullable(Of Action(Of Object, Type, BinderContext, CancellationToken))
  fullName.vb: System.Nullable(Of Action(Of System.Object, Type, FastEndpoints.BinderContext, CancellationToken))
  name.vb: Nullable(Of Action(Of Object, Type, BinderContext, CancellationToken))
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Action`4
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FastEndpoints.BinderContext
    name: BinderContext
    nameWithType: BinderContext
    fullName: FastEndpoints.BinderContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Action`4
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FastEndpoints.BinderContext
    name: BinderContext
    nameWithType: BinderContext
    fullName: FastEndpoints.BinderContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints.ParseResult
  commentId: T:FastEndpoints.ParseResult
  name: ParseResult
  nameWithType: ParseResult
  fullName: FastEndpoints.ParseResult
- uid: FastEndpoints.BindingOptions.ValueParserFor*
  commentId: Overload:FastEndpoints.BindingOptions.ValueParserFor
  name: ValueParserFor
  nameWithType: BindingOptions.ValueParserFor
  fullName: FastEndpoints.BindingOptions.ValueParserFor
- uid: System.Nullable{Func{System.Object,FastEndpoints.ParseResult}}
  commentId: T:System.Nullable{Func{System.Object,FastEndpoints.ParseResult}}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Func<Object, ParseResult>>
  nameWithType: Nullable<Func<Object, ParseResult>>
  fullName: System.Nullable<Func<System.Object, FastEndpoints.ParseResult>>
  nameWithType.vb: Nullable(Of Func(Of Object, ParseResult))
  fullName.vb: System.Nullable(Of Func(Of System.Object, FastEndpoints.ParseResult))
  name.vb: Nullable(Of Func(Of Object, ParseResult))
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FastEndpoints.ParseResult
    name: ParseResult
    nameWithType: ParseResult
    fullName: FastEndpoints.ParseResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FastEndpoints.ParseResult
    name: ParseResult
    nameWithType: ParseResult
    fullName: FastEndpoints.ParseResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
