### YamlMime:ManagedReference
items:
- uid: FastEndpoints.Group
  commentId: T:FastEndpoints.Group
  id: Group
  parent: FastEndpoints
  children:
  - FastEndpoints.Group.Configure(System.String,Action{FastEndpoints.EndpointDefinition})
  - FastEndpoints.Group.CreateScope
  - FastEndpoints.Group.Resolve(Type)
  - FastEndpoints.Group.Resolve``1
  - FastEndpoints.Group.TryResolve(Type)
  - FastEndpoints.Group.TryResolve``1
  langs:
  - csharp
  - vb
  name: Group
  nameWithType: Group
  fullName: FastEndpoints.Group
  type: Class
  source:
    id: Group
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Endpoint\Auxiliary\Group.cs
    startLine: 7
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\ncommon configuration for a group of endpoints can be specified by implementing this abstract class and calling <xref href=\"FastEndpoints.Group.Configure(System.String%2cAction%7bFastEndpoints.EndpointDefinition%7d)\" data-throw-if-not-resolved=\"false\"></xref> in the constructor.\n"
  example: []
  syntax:
    content: public abstract class Group
    content.vb: Public MustInherit Class Group
  inheritance:
  - System.Object
  derivedClasses:
  - FastEndpoints.SubGroup`1
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: FastEndpoints.Group.Configure(System.String,Action{FastEndpoints.EndpointDefinition})
  commentId: M:FastEndpoints.Group.Configure(System.String,Action{FastEndpoints.EndpointDefinition})
  id: Configure(System.String,Action{FastEndpoints.EndpointDefinition})
  parent: FastEndpoints.Group
  langs:
  - csharp
  - vb
  name: Configure(String, Action<EndpointDefinition>)
  nameWithType: Group.Configure(String, Action<EndpointDefinition>)
  fullName: FastEndpoints.Group.Configure(System.String, Action<FastEndpoints.EndpointDefinition>)
  type: Method
  source:
    id: Configure
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Endpoint\Auxiliary\Group.cs
    startLine: 16
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\ncall this method in the constructor in order to configure the endpoint group.\n"
  example: []
  syntax:
    content: protected virtual void Configure(string routePrefix, Action<EndpointDefinition> ep)
    parameters:
    - id: routePrefix
      type: System.String
      description: the route prefix for the group
    - id: ep
      type: Action{FastEndpoints.EndpointDefinition}
      description: the configuration action to be performed on the <xref href="FastEndpoints.EndpointDefinition" data-throw-if-not-resolved="false"></xref>
    content.vb: Protected Overridable Sub Configure(routePrefix As String, ep As Action(Of EndpointDefinition))
  overload: FastEndpoints.Group.Configure*
  nameWithType.vb: Group.Configure(String, Action(Of EndpointDefinition))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: FastEndpoints.Group.Configure(System.String, Action(Of FastEndpoints.EndpointDefinition))
  name.vb: Configure(String, Action(Of EndpointDefinition))
- uid: FastEndpoints.Group.TryResolve``1
  commentId: M:FastEndpoints.Group.TryResolve``1
  id: TryResolve``1
  parent: FastEndpoints.Group
  langs:
  - csharp
  - vb
  name: TryResolve<TService>()
  nameWithType: Group.TryResolve<TService>()
  fullName: FastEndpoints.Group.TryResolve<TService>()
  type: Method
  source:
    id: TryResolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Endpoint\Auxiliary\Group.cs
    startLine: 36
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\ntry to resolve an instance for the given type from the dependency injection container. will return null if unresolvable.\n"
  example: []
  syntax:
    content: >-
      public TService TryResolve<TService>()

          where TService : class
    typeParameters:
    - id: TService
      description: the type of the service to resolve
    return:
      type: '{TService}'
    content.vb: Public Function TryResolve(Of TService As Class) As TService
  overload: FastEndpoints.Group.TryResolve*
  nameWithType.vb: Group.TryResolve(Of TService)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.Group.TryResolve(Of TService)()
  name.vb: TryResolve(Of TService)()
- uid: FastEndpoints.Group.TryResolve(Type)
  commentId: M:FastEndpoints.Group.TryResolve(Type)
  id: TryResolve(Type)
  parent: FastEndpoints.Group
  langs:
  - csharp
  - vb
  name: TryResolve(Type)
  nameWithType: Group.TryResolve(Type)
  fullName: FastEndpoints.Group.TryResolve(Type)
  type: Method
  source:
    id: TryResolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Endpoint\Auxiliary\Group.cs
    startLine: 42
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\ntry to resolve an instance for the given type from the dependency injection container. will return null if unresolvable.\n"
  example: []
  syntax:
    content: public object TryResolve(Type typeOfService)
    parameters:
    - id: typeOfService
      type: Type
      description: the type of the service to resolve
    return:
      type: System.Object
    content.vb: Public Function TryResolve(typeOfService As Type) As Object
  overload: FastEndpoints.Group.TryResolve*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FastEndpoints.Group.Resolve``1
  commentId: M:FastEndpoints.Group.Resolve``1
  id: Resolve``1
  parent: FastEndpoints.Group
  langs:
  - csharp
  - vb
  name: Resolve<TService>()
  nameWithType: Group.Resolve<TService>()
  fullName: FastEndpoints.Group.Resolve<TService>()
  type: Method
  source:
    id: Resolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Endpoint\Auxiliary\Group.cs
    startLine: 49
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nresolve an instance for the given type from the dependency injection container. will throw if unresolvable.\n"
  example: []
  syntax:
    content: >-
      public TService Resolve<TService>()

          where TService : class
    typeParameters:
    - id: TService
      description: the type of the service to resolve
    return:
      type: '{TService}'
    content.vb: Public Function Resolve(Of TService As Class) As TService
  overload: FastEndpoints.Group.Resolve*
  nameWithType.vb: Group.Resolve(Of TService)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FastEndpoints.Group.Resolve(Of TService)()
  name.vb: Resolve(Of TService)()
- uid: FastEndpoints.Group.Resolve(Type)
  commentId: M:FastEndpoints.Group.Resolve(Type)
  id: Resolve(Type)
  parent: FastEndpoints.Group
  langs:
  - csharp
  - vb
  name: Resolve(Type)
  nameWithType: Group.Resolve(Type)
  fullName: FastEndpoints.Group.Resolve(Type)
  type: Method
  source:
    id: Resolve
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Endpoint\Auxiliary\Group.cs
    startLine: 56
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nresolve an instance for the given type from the dependency injection container. will throw if unresolvable.\n"
  example: []
  syntax:
    content: public object Resolve(Type typeOfService)
    parameters:
    - id: typeOfService
      type: Type
      description: the type of the service to resolve
    return:
      type: System.Object
    content.vb: Public Function Resolve(typeOfService As Type) As Object
  overload: FastEndpoints.Group.Resolve*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FastEndpoints.Group.CreateScope
  commentId: M:FastEndpoints.Group.CreateScope
  id: CreateScope
  parent: FastEndpoints.Group
  langs:
  - csharp
  - vb
  name: CreateScope()
  nameWithType: Group.CreateScope()
  fullName: FastEndpoints.Group.CreateScope()
  type: Method
  source:
    id: CreateScope
    path: D:\SOURCE-CONTROL\FastEndpoints\Library\Src\Library\Endpoint\Auxiliary\Group.cs
    startLine: 67
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\nif you&apos;d like to resolve scoped or transient services from the DI container, obtain a service scope from this method and dispose the scope when the work is complete.\n<p>\n<pre><code>using var scope = CreateScope();\nvar scopedService = scope.ServiceProvider.GetService(...);</code></pre>\n</p>\n"
  example: []
  syntax:
    content: public IServiceScope CreateScope()
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceScope
    content.vb: Public Function CreateScope As IServiceScope
  overload: FastEndpoints.Group.CreateScope*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: FastEndpoints.Group.Configure(System.String,Action{FastEndpoints.EndpointDefinition})
  commentId: M:FastEndpoints.Group.Configure(System.String,Action{FastEndpoints.EndpointDefinition})
  parent: FastEndpoints.Group
  isExternal: true
  name: Configure(String, Action<EndpointDefinition>)
  nameWithType: Group.Configure(String, Action<EndpointDefinition>)
  fullName: FastEndpoints.Group.Configure(System.String, Action<FastEndpoints.EndpointDefinition>)
  nameWithType.vb: Group.Configure(String, Action(Of EndpointDefinition))
  fullName.vb: FastEndpoints.Group.Configure(System.String, Action(Of FastEndpoints.EndpointDefinition))
  name.vb: Configure(String, Action(Of EndpointDefinition))
  spec.csharp:
  - uid: FastEndpoints.Group.Configure(System.String,Action{FastEndpoints.EndpointDefinition})
    name: Configure
    nameWithType: Group.Configure
    fullName: FastEndpoints.Group.Configure
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FastEndpoints.EndpointDefinition
    name: EndpointDefinition
    nameWithType: EndpointDefinition
    fullName: FastEndpoints.EndpointDefinition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FastEndpoints.Group.Configure(System.String,Action{FastEndpoints.EndpointDefinition})
    name: Configure
    nameWithType: Group.Configure
    fullName: FastEndpoints.Group.Configure
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FastEndpoints.EndpointDefinition
    name: EndpointDefinition
    nameWithType: EndpointDefinition
    fullName: FastEndpoints.EndpointDefinition
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints
  commentId: N:FastEndpoints
  name: FastEndpoints
  nameWithType: FastEndpoints
  fullName: FastEndpoints
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints.Group
  commentId: T:FastEndpoints.Group
  parent: FastEndpoints
  name: Group
  nameWithType: Group
  fullName: FastEndpoints.Group
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FastEndpoints.EndpointDefinition
  commentId: T:FastEndpoints.EndpointDefinition
  parent: FastEndpoints
  name: EndpointDefinition
  nameWithType: EndpointDefinition
  fullName: FastEndpoints.EndpointDefinition
- uid: FastEndpoints.Group.Configure*
  commentId: Overload:FastEndpoints.Group.Configure
  name: Configure
  nameWithType: Group.Configure
  fullName: FastEndpoints.Group.Configure
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Action{FastEndpoints.EndpointDefinition}
  commentId: '!:Action{FastEndpoints.EndpointDefinition}'
  definition: Action`1
  name: Action<EndpointDefinition>
  nameWithType: Action<EndpointDefinition>
  fullName: Action<FastEndpoints.EndpointDefinition>
  nameWithType.vb: Action(Of EndpointDefinition)
  fullName.vb: Action(Of FastEndpoints.EndpointDefinition)
  name.vb: Action(Of EndpointDefinition)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FastEndpoints.EndpointDefinition
    name: EndpointDefinition
    nameWithType: EndpointDefinition
    fullName: FastEndpoints.EndpointDefinition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FastEndpoints.EndpointDefinition
    name: EndpointDefinition
    nameWithType: EndpointDefinition
    fullName: FastEndpoints.EndpointDefinition
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: FastEndpoints.Group.TryResolve*
  commentId: Overload:FastEndpoints.Group.TryResolve
  name: TryResolve
  nameWithType: Group.TryResolve
  fullName: FastEndpoints.Group.TryResolve
- uid: '{TService}'
  commentId: '!:TService'
  definition: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: FastEndpoints.Group.Resolve*
  commentId: Overload:FastEndpoints.Group.Resolve
  name: Resolve
  nameWithType: Group.Resolve
  fullName: FastEndpoints.Group.Resolve
- uid: FastEndpoints.Group.CreateScope*
  commentId: Overload:FastEndpoints.Group.CreateScope
  name: CreateScope
  nameWithType: Group.CreateScope
  fullName: FastEndpoints.Group.CreateScope
- uid: Microsoft.Extensions.DependencyInjection.IServiceScope
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceScope
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: IServiceScope
  nameWithType: IServiceScope
  fullName: Microsoft.Extensions.DependencyInjection.IServiceScope
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
